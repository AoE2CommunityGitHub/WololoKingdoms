;======================================================================
; Strategic-numbers, goals, etc.
;======================================================================
(defrule
	(strategic-number sn-attack-intelligence == 1)
	(strategic-number sn-intelligent-gathering == 1)
=>
	(up-jump-rule 30))
(defrule
	(true)
=>
	(set-strategic-number sn-attack-intelligence 1)
	(set-strategic-number sn-attack-separation-time-randomness 0)
	(set-strategic-number sn-attack-winning-player 1)
	(set-strategic-number sn-attack-winning-player-factor 1)
	(set-strategic-number sn-attack-group-size-randomness 0)
	(set-strategic-number sn-attack-group-gather-spacing 5)
	(set-strategic-number sn-consecutive-idle-unit-limit 0)
	(set-strategic-number sn-garrison-rams 0)
	(set-strategic-number sn-ignore-attack-group-under-attack 0)
	(set-strategic-number sn-initial-attack-delay 0)
	(set-strategic-number sn-initial-attack-delay-type 0)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-strategic-number sn-dropsite-separation-distance 6)
	(set-strategic-number sn-dock-training-filter 0)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0); 8
	(set-strategic-number sn-disable-sighted-response-cap 0); cap at 50
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-percent-attack-boats 0)
	(set-strategic-number sn-number-defend-groups 0)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-minimum-defend-group-size 1)
	(set-strategic-number sn-maximum-defend-group-size 1)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
	(set-strategic-number sn-percent-enemy-sighted-response 100)
	(set-strategic-number sn-group-form-distance 40)
	(set-strategic-number sn-group-commander-selection-method 0)
	(set-strategic-number sn-group-leader-defense-distance 3)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-target-evaluation-siege-weapon		500)
	(set-strategic-number sn-target-evaluation-damage-capability	20)
	(set-strategic-number sn-target-evaluation-in-progress		0)
	(set-strategic-number sn-target-evaluation-distance		0)
	(set-strategic-number sn-target-evaluation-hitpoints		0)
	(set-strategic-number sn-target-evaluation-range		0)
	(set-strategic-number sn-target-evaluation-rof			0)
	(set-strategic-number sn-target-evaluation-time-kill-ratio	50)
	(set-strategic-number sn-target-evaluation-attack-attempts	0)
	(set-strategic-number sn-target-evaluation-ally-proximity	0)
	(set-strategic-number sn-target-evaluation-randomness		0)
	(set-strategic-number sn-target-evaluation-boat			0)
	(set-strategic-number sn-target-evaluation-continent		0)
	(set-strategic-number sn-target-evaluation-kills		0)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-sentry-distance 12); 10
	(set-strategic-number sn-sentry-distance-variation 0)
	(set-strategic-number sn-dock-defend-priority 1)
	(set-strategic-number sn-town-defend-priority 1)
	(set-strategic-number sn-gold-defend-priority 1)
	(set-strategic-number sn-stone-defend-priority 1)
	(set-strategic-number sn-forage-defend-priority 1)
	(set-strategic-number sn-relic-defend-priority 1)
	(set-strategic-number sn-livestock-defend-priority 1)
	(set-strategic-number sn-special-attack-type1 -1)
	(set-strategic-number sn-special-attack-type2 -1)
	(set-strategic-number sn-special-attack-type3 -1)
;	(set-strategic-number sn-special-attack-influence1 100); 10000
;	(set-strategic-number sn-special-attack-influence2 100); 10000
;	(set-strategic-number sn-special-attack-influence3 100); 10000
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-max-build-plan-gatherer-percentage 100)
	(set-strategic-number sn-food-dropsite-distance 3)
	(set-strategic-number sn-wood-dropsite-distance 3)
	(set-strategic-number sn-gold-dropsite-distance 3)
	(set-strategic-number sn-stone-dropsite-distance 3)
	(set-strategic-number sn-maximum-food-drop-distance 0)
	(set-strategic-number sn-maximum-wood-drop-distance 0)
	(set-strategic-number sn-maximum-gold-drop-distance 0)
	(set-strategic-number sn-maximum-stone-drop-distance 0)
	(set-strategic-number sn-maximum-fish-boat-drop-distance -1)
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-strategic-number sn-defend-overlap-distance 1)
	(set-strategic-number sn-defense-distance 3)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-military-superiority 0)
	(set-strategic-number sn-dock-placement-mode 0)
	(set-strategic-number sn-cap-civilian-builders 200)
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-cap-civilian-gatherers 1000)
	(set-strategic-number sn-percent-civilian-builders 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-percent-civilian-gatherers 100)
;	(set-strategic-number sn-number-forward-builders 0)
	(set-strategic-number sn-minimum-dropsite-buffer 13)
	(set-strategic-number sn-maximum-gaia-attack-response 3); 2
	(set-strategic-number sn-intelligent-gathering 1)
	(set-strategic-number sn-max-retask-gather-amount 0)
	(set-strategic-number sn-retask-gather-amount 0)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-use-by-type-max-gathering 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-max-skips-per-attempt 1)
	(set-strategic-number sn-minimum-water-body-size-for-dock 1600)
	(set-strategic-number sn-number-build-attempts-before-skip 1)
	(set-strategic-number sn-number-max-skip-cycles 1)
	(set-strategic-number sn-random-placement-factor 0)
	(set-strategic-number sn-required-forest-tiles 10)
	(set-strategic-number sn-camp-max-distance 12)
	(set-strategic-number sn-mill-max-distance 18)
	(set-strategic-number sn-minimum-town-size 3)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-minimum-peace-like-level 51)
;	(set-strategic-number sn-relic-return-distance 255)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number target-military-superiority 0)
	(set-strategic-number sn-zero-priority-distance 240)
	(set-strategic-number sn-initial-exploration-required 0)
;	(set-strategic-number sn-percent-half-exploration 30); default
;	(set-strategic-number sn-percent-exploration-required 0)
	(set-strategic-number sn-number-enemy-objects-required 1)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-number-boat-explore-groups 1)
;	(set-strategic-number sn-percentage-explore-exterminators 0)
	(set-strategic-number sn-minimum-explore-group-size 1)
	(set-strategic-number sn-maximum-explore-group-size 1)
	(set-strategic-number sn-minimum-boat-explore-group-size 1)
	(set-strategic-number sn-maximum-boat-explore-group-size 1)
	(set-strategic-number sn-total-number-explorers 1)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-blot-exploration-map 0)
	(set-strategic-number sn-blot-size 1)
	(set-strategic-number sn-build-frequency 1)
	(set-strategic-number sn-do-not-scale-for-difficulty-level 1)
	(set-strategic-number sn-easiest-reaction-percentage 100)
	(set-strategic-number sn-easier-reaction-percentage 100)
	(set-strategic-number sn-scaling-frequency 1)
	(set-strategic-number sn-track-player-history 0)
	(set-strategic-number sn-coop-share-attacking 1)
	(set-strategic-number sn-coop-share-attacking-interval 2)
	(set-strategic-number infantry 0)
	(set-strategic-number archers 0)
	(set-strategic-number cavalry 0)
	(set-strategic-number gunpowder 0)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number moenche 0)
	(set-strategic-number siege 0)
	(set-strategic-number sn-coop-share-information 1)
	(set-goal enemyState dark)
	(set-goal TSA-goal 0)
	(set-goal kloster no)
	(set-goal tc no)
	(set-goal enablesmith no)
	(set-goal enemy-goal 0)
	(set-goal enemy-goal2 0)
	(set-goal Team-milgoal 0)
	(set-goal dreitc no)
	(set-goal fleet yes)
	(set-goal enemy-boats no)
	(disable-self))
(defrule
	(true)
=>
	(set-goal woodavailable yes)
	(set-goal increase-ts 0)
	(set-goal escrowing no)
	(set-goal Multiplayer no)
	(set-goal farms no)
	(set-goal retreat yes)
	(set-goal rebuildcamp yes)
	(set-goal gatherunits no)
	(set-goal defend no); dead vills
	(set-goal relocating no)
	(set-goal researchplan no) ; research plan not completed
	(set-goal retargetenemy yes)
	(up-setup-cost-data 1 cost-food);	(up-reset-cost-data cost-food)
	(set-goal attacking no)
	(disable-self))
(defrule
	(true)
=>
	(set-goal spreadunits no)
	(set-strategic-number sn-unexplored-construction 0); !
	(set-strategic-number sn-minimum-boat-attack-group-size 1)
	(set-strategic-number sn-maximum-boat-attack-group-size 1)
	(set-strategic-number sn-number-boat-attack-groups 0)
	(set-difficulty-parameter ability-to-dodge-missiles 0); opposite
	(set-difficulty-parameter ability-to-maintain-distance 0); same here
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	(set-goal map water)
	(set-goal nomad no)
	(set-goal underattack no)
	(disable-self))
(defrule
	(true)
=>
	(set-goal attackmethod TSA)
	(set-strategic-number sn-current-age dark)
	(set-goal allowspears yes)
	(set-goal allowskirms yes)
	(set-goal retreatnow no)
	(set-goal scoutg no)
	(set-goal stanceg no)
	(set-goal request no)
	(set-goal wwonder no)
	(set-goal islands no)
	(set-goal siegereq no)
	(set-goal patroldefense no)
	(set-goal reset yes)
	(set-goal market-flare 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal unit-flare 0)
	(set-goal math-goal 0)
	(set-goal attackInProgress no)
	(set-strategic-number sn-object-repair-level 20607); 16384 = siege weapons alone
	(set-strategic-number sn-enable-training-queue 1)
	(set-strategic-number sn-livestock-to-town-center 1)
	(set-strategic-number sn-town-center-placement 0)
	(set-strategic-number sn-dock-proximity-factor -100); -1 ; 10000
	(set-strategic-number sn-dock-avoidance-factor 500); -1 ; 1000
	(set-goal threat-time 0)
	(set-goal threat-player 0)
	(set-goal threat-source 0)
	(set-goal threat-target 0)
	(set-goal siegeretreat no)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-disable-tower-priority 1)
	(set-strategic-number sn-wall-targeting-mode 1)
	(set-strategic-number sn-enable-offensive-priority 1)
	(up-set-defense-priority c: stone-wall-line c: 0)
	(up-set-defense-priority c: palisade-wall c: 2); 0
	(up-set-defense-priority c: gate-class c: 2)
	(up-set-offense-priority c: stone-wall-line c: 0)
	(up-set-offense-priority c: palisade-wall c: 2); 1
	(up-set-offense-priority c: gate-class c: 2)
	(set-strategic-number sn-local-targeting-mode 1)
	(set-strategic-number sn-enable-patrol-attack 1)
	(set-goal boar-captured 0)
	(set-goal defendchat yes)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-wood-gatherer-percentage 0)
	(set-strategic-number teambalance 0)
	(set-goal queue yes)
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(set-goal gr-var 1)
	(up-set-defense-priority c: wonder c: 32767)
	(up-set-offense-priority c: wonder c: 11)
	(set-goal assistance no)
	(set-goal position-goal 0)
	(set-goal target-pop 0)
	(set-goal target-mpop 0)
	(set-goal attacknotifier no)
	(disable-self))
(defrule
	(true)
=>
	(set-goal 402 0)
	(set-goal 403 0)
	(set-goal temporary-goal8 0)
	(set-strategic-number teamsuperiority 0)
	(set-goal milunits yes)
	(set-goal landnomad no)
	(set-goal strategy usual)
	(set-goal drushtarget 0)
	(set-goal selectdrushwaypoint 0)
	(set-strategic-number sn-preferred-mill-placement 0)
	(set-strategic-number sn-wood-modifier-percentage 0)
	(set-strategic-number sn-food-modifier-percentage 0)
	(set-strategic-number sn-gold-modifier-percentage 0)
	(set-strategic-number sn-stone-modifier-percentage 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal loom-dist noloom)
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(set-goal maxfarms 1000)
	(set-goal rescout no)
	(set-goal retask no)
	(set-goal feudalvills 0)
	(set-goal deer-luring 0)
	(set-goal drushmicro no)
	(set-goal tradecarts no)
	(set-goal data 0)
;	(set-strategic-number sn-target-point-adjustment 5)
	(set-strategic-number sn-disable-trade-evasion 1)
	(set-goal escrow-flag 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal gatherinside yes)
	(set-goal attackpriorities usual)
	(set-goal attackprioritychange yes)
	(set-goal strategy-type -1)
	(set-goal enemysling 0)
	(generate-random-number 100)
	(up-get-fact random-number 0 gl-random-number)
	(set-goal distancegoal 0)
	(set-strategic-number sn-disable-builder-assistance 1)
	(set-goal buildmill no)
	(set-goal buildlumber no)
	(set-goal spears yes)
	(set-goal uugoal no)
	(set-goal urgoal no)
	(disable-self))
(defrule
	(true)
=>
	(set-goal livestock-switch -1)
	(set-goal livestock-place -1)
	(set-goal stopmonks no)
	(set-goal pocketcheck 0)
	(set-goal strategy-type2 land)
	(set-goal champgoal no)
	(set-goal scoutmicro no)
	(set-goal scouting yes)
	(set-strategic-number sn-safe-town-size 30); 45
	(set-goal comsystem 3453); I'm using the communication system.
	(set-goal identity Promi); Hi, I'm Promi. :)
	(set-goal aggressivestrat 0) ; 1 = looking for an aggressive strat ; 24 = completed successfully
	(set-goal alliedplayer 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal strategylocked no)
	(set-goal armytech dark)
;	(set-goal targetdistance 100)
	(set-goal resign no)
	(set-goal enemyscouts 0); count
	(set-strategic-number sn-enable-boar-hunting 0)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-minimum-number-hunters 0)
	(set-strategic-number sn-minimum-boar-lure-group-size 1000); 0
	(up-get-point position-map-size temporary-point-x)
	(up-modify-goal map-size g:= temporary-point-x)
	(set-goal allowdmstable no)
	(set-goal allowdmarchery no)
	(set-goal allowdmbarracks no)
	(set-goal cozy 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal navycount 0)
	(set-goal biggestenemynavy 0)
	(set-goal enemyfocusnavy 0)
	(set-goal maxnavy minNavy); 0
	(up-get-point position-self position-self-x)
	(set-strategic-number husks 0)
	(set-strategic-number eagles 0)
	(set-strategic-number spears 0)
	(set-goal sum-villagers 0)
	(set-goal wood-villagers 0)
	(set-goal food-villagers 0)
	(set-goal gold-villagers 0)
	(set-goal stone-villagers 0)
	(set-goal fishing no)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number skirms 0)
	(set-strategic-number skirmsarchers 0)
	(set-strategic-number moenchesiege 0)
	(set-goal patrolhelp no)
	(up-set-defense-priority c: market c: 250)
	(up-set-offense-priority c: market c: 2)
	(set-goal skip-target no)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0)
	(set-goal ep-pop 0)
	(set-goal ep-cpop 0)
	(set-goal ep-mpop 0)
	(set-goal ep-stables 0)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-free-siege-targeting 1)
;	(up-set-offense-priority c: war-elephant c: 10)
;	(up-set-offense-priority c: knight c: 10)
;	(up-set-offense-priority c: cataphract c: 10)
;	(up-set-offense-priority c: tarkan c: 10)
;	(up-set-offense-priority c: teutonic-knight c: 10)
;	(up-set-offense-priority c: war-wagon c: 10)
;	(up-set-offense-priority c: janissary c: 9)
;	(up-set-offense-priority c: conquistador c: 9)
;	(up-set-offense-priority c: mameluke c: 10)
;	(up-set-offense-priority c: huskarl c: 10)
;	(up-set-offense-priority c: hand-cannoneer c: 9)
;	(up-set-offense-priority c: eagle-warrior c: 9)
	(disable-self))
(defrule
	(true)
=>
	(up-set-offense-priority c: monk c: 11)
;	(up-set-offense-priority c: scout-cavalry c: 8)
;	(up-set-offense-priority c: militiaman c: 8)
;	(up-set-offense-priority c: jaguar-man c: 8)
;	(up-set-offense-priority c: woad-raider c: 8)
;	(up-set-offense-priority c: berserk c: 8)
;	(up-set-offense-priority c: samurai c: 8)
;	(up-set-offense-priority c: spearman c: 9)
;	(up-set-offense-priority c: camel c: 8)
	(up-set-offense-priority c: demolition-ship c: 11)
	(up-set-offense-priority c: transport-ship c: 7); 10
;	(up-set-offense-priority c: turtle-ship c: 9)
;	(up-set-offense-priority c: fire-ship c: 9)
;	(up-set-offense-priority c: galley c: 8)
	(disable-self))
(defrule
	(true)
=>
;	(up-set-offense-priority c: longboat c: 9)
	(up-set-offense-priority c: missionary c: 11)
	(up-set-offense-priority c: unpacked-trebuchet c: 9); 10
	(up-set-offense-priority c: trebuchet c: 3); 6
;	(up-set-offense-priority c: throwing-axeman c: 8)
;	(up-set-offense-priority c: mangudai c: 8)
;	(up-set-offense-priority c: cavalry-archer c: 6)
;	(up-set-offense-priority c: chu-ko-nu c: 7)
;	(up-set-offense-priority c: plumed-archer c: 6)
;	(up-set-offense-priority c: archer c: 6)
;	(up-set-offense-priority c: longbowman c: 5)
	(up-set-offense-priority c: 904 c: 3); 7
;	(up-set-offense-priority c: skirmisher c: 0)
	(disable-self))
(defrule
	(true)
=>
	(up-set-offense-priority c: king-class c: 11)
;	(up-set-offense-priority c: fishing-ship c: 7)
	(set-strategic-number sn-preferred-trade-distance 220)
	(set-goal sk-var no)
	(set-goal kr-var 2)
	(set-strategic-number sn-placement-zone-size 9); 20
	(set-goal escrow-state with-escrow)
	(set-goal verbuendete -1)
	(set-goal feinde -1)
	(set-goal minBoar 13)
	(up-set-defense-priority c: house c: 2)
	(up-set-offense-priority c: house c: 1)
	(enable-wall-placement 2)
	(set-strategic-number sn-disable-villager-garrison 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal temporary-goal9 0)
	(set-goal escrow-flag2 0)
	(set-goal wood-gpp 0)
	(set-goal food-gpp 0)
	(set-goal gold-gpp 0)
	(set-goal excessWood 0)
	(set-goal excessFood 0)
	(set-goal excessGold 0)
	(set-goal excessStone 0)
	(set-goal scoreTarget 0)
	(set-goal scoreTLast 0)
	(set-goal scoreTDiff 0)
	(set-goal tower-garrison-time 0)
	(set-goal shore-count 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal map-treatment-switch-time 0)
	(set-goal palagoal no)
	(set-strategic-number camels 0)
	(up-modify-escrow wood c:= 0)
	(up-modify-escrow food c:= 0)
	(up-modify-escrow gold c:= 0)
	(up-modify-escrow stone c:= 0)
	(up-release-escrow)
	(set-goal c-scout-time 930); 900; 960
	(up-full-reset-search)
	(up-get-fact population-cap 0 feitoria-cap)
	(up-modify-goal feitoria-cap c:z/ 100)
	(set-goal walled no)
	(set-goal battle-elephant-set 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal caravel-set 0)
	(set-goal skirmisher-set 0)
	(set-goal mangonel-set 0)
	(set-goal maa-var 0)
	(disable-self)); end init disable-self & jump
#load-if-not-defined REVEAL-NORMAL
(defrule
	(true)
=>
	(set-strategic-number sn-unexplored-construction 1)
	(disable-self))
#end-if
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(true)
=>
	(set-strategic-number sn-enable-new-building-system 1)
	(set-strategic-number sn-home-exploration-time home-exploration-time)
	(disable-self))
(defrule
	(building-type-count town-center >= 1)
(or	(not	(death-match-game))
	(unit-type-count-total villager >= 16)); 24
=>
;	(up-assign-builders c: monastery c: 2)
	(up-assign-builders c: feitoria c: 2)
	(up-assign-builders c: castle c: 5)
	(up-assign-builders c: town-center-foundation c: 4)
	(up-assign-builders c: wonder c: 40)
	(up-assign-builders c: watch-tower c: 3); hm
	(up-assign-builders c: bombard-tower c: 2); hm
;	(disable-self)
)
(defrule
; test	(building-type-count-total town-center >= 1)
	(building-type-count town-center <= 0)
=>
	(up-assign-builders c: town-center-foundation c: 20)
;	(disable-self)
)
(defrule
	(building-type-count town-center <= 0);	(building-type-count-total town-center <= 0)
	(game-time < 600)
	(goal nomad yes)
	(up-compare-goal landnomad >= yes);	(goal landnomad yes)
	(up-pending-objects c: house <= 0)
	(housing-headroom < 5)
	(population-headroom > 0)
;(or	(wood-amount < 30)
;	(and	(wood-amount < 305)
;		(building-type-count-total town-center <= 0)))
(not	(civ-selected hun))
=>
	(up-assign-builders c: town-center-foundation c: LN-TC-builders)
;	(disable-self)
)
(defrule
	(civilian-population < up-max-civ)
	(building-type-count town-center >= 1)
=>
	(up-assign-builders c: town-center-foundation c: 4)
;	(disable-self)
)
(defrule
(or	(population >= max-civ-pop)
(or	(civilian-population >= up-max-civ)
	(and	(death-match-game)
		(unit-type-count-total villager < 16)))); 24
	(building-type-count town-center >= 1)
=>
	(up-assign-builders c: town-center-foundation c: 1)
;	(disable-self)
)
(defrule
(or	(strategic-number sn-current-age <= feudal)
	(not	(death-match-game)))
	(building-type-count stable < 1)
	(building-type-count archery-range < 1)
=>
	(up-assign-builders c: stable c: 2)
	(up-assign-builders c: archery-range c: 2)
	(disable-self))
(defrule
(or	(game-time >= 185)
	(current-age >= feudal-age))
(or	(up-compare-goal strategy-type == feudal-war)
(or	(building-type-count stable >= 1)
	(building-type-count archery-range >= 1))); -total
=>
	(up-assign-builders c: stable c: 1)
	(up-assign-builders c: archery-range c: 1)
	(disable-self))
(defrule
	(current-age == feudal-age)
	(strategic-number sn-current-age == feudal)
	(up-compare-goal strategy-type >= castle-war)
	(building-type-count blacksmith < 1)
=>
	(up-assign-builders c: blacksmith c: 2)
	(disable-self))
(defrule
	(building-type-count blacksmith >= 1)
=>
	(up-assign-builders c: blacksmith c: 1)
	(disable-self))
(defrule
	(current-age == feudal-age)
(or	(building-type-count-total barracks <= 0)
	(goal drushmicro yes))
	(building-type-count market < 1)
=>
	(up-assign-builders c: market c: 2)
	(disable-self))
(defrule
(or	(building-type-count market >= 1)
	(current-age >= castle-age))
=>
	(up-assign-builders c: market c: 1)
	(disable-self))
#end-if
#end-if


(defrule
	(up-compare-goal boar-hunting-goal <= -1)
(or	(game-time >= 900)
(or	(not	(death-match-game))
	(unit-type-count-total villager >= 32)))
=>
	(set-goal boar-hunting-goal 0)
	(disable-self))


#load-if-defined UP-MONGOL-CIV-ALLY
(defrule
	(true)
=>
	(set-strategic-number sn-blot-size 0)
	(disable-self))
#else
(defrule
(nor	(current-age >= feudal-age)
(or	(unit-type-count eagle-warrior-line >= 1)
	(civ-selected mongol)))
=>
	(set-strategic-number sn-blot-size 1)
	(disable-self))
(defrule
(or	(current-age >= feudal-age)
(or	(unit-type-count eagle-warrior-line >= 1)
	(civ-selected mongol)))
=>
	(set-strategic-number sn-blot-size 0)
	(disable-self))
#end-if


#load-if-defined UP-POCKET-POSITION
(defrule
	(up-compare-goal position-goal != pocket)
=>
	(set-goal position-goal pocket)
;	(chat-local-to-self "I'm pocket.")
	(disable-self))
#else
(defrule
	(up-compare-goal position-goal != flank)
=>
	(set-goal position-goal flank)
;	(chat-local-to-self "I'm flank.")
;	(set-goal cozy -1); For now.
	(disable-self))
#end-if

(defrule
(or	(up-timer-status one-min == timer-running)
	(and	(strategic-number teambalance == 0)
		(and	(goal verbuendete 0)
			(goal feinde 1))))
=>
	(up-jump-rule 5))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal verbuendete 0)
	(set-goal feinde 0))
(defrule; end neg jump
(or	(players-stance focus-player ally)
	(stance-toward focus-player ally))
	(player-in-game focus-player)
	(strategic-number sn-focus-player-number != my-player-number)
=>
	(up-modify-goal verbuendete c:+ 1))
(defrule
(nor	(players-stance focus-player ally)
	(stance-toward focus-player ally))
	(player-in-game focus-player)
=>
	(up-modify-goal feinde c:+ 1))
(defrule
	(up-timer-status one-min != timer-running)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(up-modify-sn teambalance c:= 1)
	(up-modify-sn teambalance g:+ verbuendete)
	(up-modify-sn teambalance g:- feinde)
	(up-modify-sn teambalance c:max -1)
	(up-modify-sn teambalance c:min 1)); end jump



(defrule
	(true)
=>
	(set-goal attackStart no)
	(up-get-fact unit-type-count livestock-class mysheep)
	(up-get-threat-data threat-time threat-player threat-source threat-target)
	(up-find-player enemy find-attacker attacking-enemy)
	(up-get-target-fact unit-type-count scout-cavalry-line enemyscouts)
	(up-get-fact military-population 0 my-mpop)
	(up-get-fact civilian-population 0 my-cpop)
	(up-get-fact population 0 my-pop)
	(up-get-fact unit-type-count villager villagercount)
	(up-get-fact unit-type-count-total villager villagercounttotal)
	(up-modify-goal villagercount c:min 240)
	(up-modify-goal villagercounttotal c:min 240)
	(up-get-fact unit-type-count-total militiaman-line champcount)
	(up-get-fact food-amount 0 total-food-amount)
	(up-modify-goal attacknotifier g:= attacking))
(defrule
	(true)
=>
	(up-get-fact resource-amount amount-relics relic-count)
	(up-get-fact unit-type-count-total trade-cart temporary-goal)
	(up-modify-goal tradeunits g:= temporary-goal)
	(up-get-fact unit-type-count-total trade-cog temporary-goal)
	(up-modify-goal tradeunits g:+ temporary-goal)
	(up-get-fact unit-type-count-total kamayuk temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal spearcount g:= temporary-goal)
	(up-get-fact unit-type-count-total spearman-line temporary-goal)
	(up-modify-goal spearcount g:+ temporary-goal)
	(up-get-fact unit-type-count-total skirmisher-line skirmcount)
	(set-strategic-number sn-object-repair-level 20607); 16384 = siege weapons alone
	(set-goal control-goal 0)
	(set-goal search-action -1)
	(up-get-fact warboat-count 0 navycount))
#load-if-defined UP-GAME-WK
(defrule
	(players-unit-type-count every-enemy karambit-warrior <= 0); for
	(players-unit-type-count every-enemy elite-karambit-warrior <= 0); now
(or	(unit-type-count karambit-warrior >= 2)
	(unit-type-count elite-karambit-warrior >= 2))
=>
	(up-get-focus-fact unit-type-count karambit-warrior temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-get-focus-fact unit-type-count elite-karambit-warrior temporary-goal2)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-goal temporary-goal c:/ 3); 2; for now
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal my-mpop g:- temporary-goal))
#end-if
(defrule
	(up-compare-const relic-boost >= 101)
	(up-compare-goal relic-count >= 1)
	(building-type-count monastery >= 1); nn but also nn
=>
	(up-modify-goal relic-count c:* relic-boost)
	(up-modify-goal relic-count c:/ 100))
(defrule
	(up-compare-const trade-boost >= 101)
	(up-compare-goal tradeunits >= 1)
;	(players-building-type-count any-ally market >= 1); nn but also nn
(or	(building-type-count market >= 1); nn but also nn
	(building-type-count dock >= 1))
=>
	(up-modify-goal tradeunits c:* trade-boost)
	(up-modify-goal tradeunits c:/ 100))
(defrule
	(true)
=>
	(up-modify-goal tradeunits g:+ relic-count)
	(up-modify-goal tradeunits g:+ relic-count)
	(up-get-fact unit-type-count turtle-ship-line temporary-goal)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal navycount g:+ temporary-goal)
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0)
	(set-strategic-number sn-free-siege-targeting 1)
	(set-strategic-number sn-gather-idle-soldiers-at-center 0)
	(up-get-fact wood-amount 0 excessWood))
(defrule
	(true)
=>
	(up-get-fact escrow-amount wood temporary-goal)
	(up-modify-goal excessWood g:- temporary-goal)
	(up-get-fact food-amount 0 excessFood)
	(up-get-fact escrow-amount food temporary-goal)
	(up-modify-goal excessFood g:- temporary-goal)
	(up-get-fact gold-amount 0 excessGold)
	(up-get-fact escrow-amount gold temporary-goal)
	(up-modify-goal excessGold g:- temporary-goal)
	(up-get-fact stone-amount 0 excessStone)
	(up-get-fact escrow-amount stone temporary-goal)
	(up-modify-goal excessStone g:- temporary-goal)
	(up-get-fact building-type-count-total feitoria temporary-goal)
	(up-modify-goal temporary-goal2 g:= temporary-goal)
	(up-modify-goal temporary-goal2 c:* 2)
	(up-modify-goal tradeunits g:+ temporary-goal))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal c:* 20)
	(up-modify-goal my-cpop g:+ temporary-goal)
	(up-get-fact civilian-population 0 custom-civ-pop)
	(up-modify-goal custom-civ-pop g:+ temporary-goal)
	(up-modify-goal custom-civ-pop g:+ relic-count)
;	(up-get-precise-time 0 start-time)
	(up-get-victory-data winning-player victory-type victory-time)
	(set-strategic-number sn-allow-civilian-defense 1)
	(set-strategic-number sn-allow-civilian-offense 0)
	(set-strategic-number sn-number-civilian-militia 0)
	(up-get-fact stone-amount 0 total-stone-amount)
	(set-goal siegeretreat no)
	(set-goal wwonder no)
	(set-goal jump-rule-goal 0)
	(set-goal next-rule-id 0)
	(set-strategic-number sn-gather-defense-units 1))
(defrule
	(true)
=>
	(up-get-fact unit-type-count-total skirmisher-line skirmisher-set)
	(up-get-fact unit-type-count-total genitour temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal skirmisher-set g:+ temporary-goal)
	(up-get-fact unit-type-count-total elite-genitour temporary-goal2)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-goal skirmisher-set g:+ temporary-goal2)
	(up-get-fact unit-type-count-total 732 temporary-goal3)
	(up-modify-goal temporary-goal3 c:max 0)
	(up-modify-goal skirmisher-set g:+ temporary-goal3)
	(up-get-fact unit-type-count-total imperial-skirmisher temporary-goal4)
	(up-modify-goal temporary-goal4 c:max 0)
	(up-modify-goal skirmisher-set g:+ temporary-goal4))
(defrule
	(true)
=>
	(up-get-fact unit-type-count-total mangonel-line mangonel-set)
	(up-get-fact unit-type-count-total 699 temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal mangonel-set g:+ temporary-goal)
	(up-get-fact unit-type-count-total 701 temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal mangonel-set g:+ temporary-goal)); end init 2





(defrule
	(building-type-count town-center <= 0)
	(unit-type-count villager >= 1)
=>
	(up-full-reset-search)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object position-self-x))
(defrule
	(building-type-count town-center >= 1)
=>
	(up-full-reset-search)
	(up-find-local c: town-center c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object position-self-x)
	(up-get-object-data object-data-id position-self-id)
	(up-modify-sn sn-safe-town-size s:= sn-maximum-town-size)
	(up-modify-sn sn-safe-town-size c:max 14); 14
	(up-modify-sn sn-safe-town-size c:min 46)); 44
(defrule
	(up-compare-goal position-self-x != -1)
=>
	(up-set-target-point position-self-x)
	(up-copy-point drushwaypoint-x position-self-x)
	(up-copy-point drushwaypoint2-x position-self-x)
	(up-copy-point drushretreatpoint-x position-self-x)
	(disable-self))
(defrule
	(players-building-count target-player >= 1); any-enemy
=>
	(up-get-target-fact player-distance 0 targetdistance)
	(up-get-target-fact population 0 target-pop)
	(up-get-target-fact civilian-population 0 target-cpop)
	(up-get-target-fact military-population 0 target-mpop)
	(up-modify-sn target-civilian-superiority g:= my-cpop)
	(up-modify-sn target-civilian-superiority g:- target-cpop)
	(up-modify-sn target-military-superiority g:= my-mpop)
	(up-modify-sn target-military-superiority g:- target-mpop))

(defrule
	(players-building-count target-player <= 0); every-enemy
	(up-compare-goal targetdistance <= 0)
=>
	(up-modify-goal targetdistance c:= preftradedist)
	(up-get-point position-flank temporary-point-x)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal)
	(up-modify-goal targetdistance g:min temporary-goal)
	(up-get-point position-opposite temporary-point-x)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal)
	(up-modify-goal targetdistance g:min temporary-goal)
	(up-get-point position-mirror temporary-point-x)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal)
	(up-modify-goal targetdistance g:min temporary-goal)
	(up-get-point scouting-type temporary-point-x)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal)
	(up-modify-goal targetdistance g:min temporary-goal)
	(disable-self))
(defrule
	(players-building-count target-player <= 0); every-enemy
	(goal nomad yes)
;(or	(building-type-count lumber-camp >= 1)
	(building-type-count town-center >= 1);)
=>
	(up-get-point position-center temporary-point-x)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal)
	(up-modify-goal temporary-goal2 g:= map-size)
	(up-modify-goal temporary-goal2 c:/ 16)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal targetdistance g:min temporary-goal)
	(disable-self))
(defrule
	(players-building-count target-player <= 0); every-enemy
(or	(up-compare-goal targetdistance <= 0)
	(up-compare-goal targetdistance g:> map-size))
=>
	(up-chat-data-to-player my-player-number "TD: %d" g: targetdistance)
	(up-modify-goal targetdistance c:max 44)
	(up-modify-goal targetdistance g:min map-size)
;	(up-chat-data-to-player my-player-number "TD2: %d" g: targetdistance)
)

(defrule
(or	(cc-players-unit-type-count 0 forage-bush >= 1)
	(up-compare-goal forage-count != 0))
;(or	(game-time < 1200)
;	(research-available ri-horse-collar))
;;	(up-gaia-type-count c: forage-bush >= 1)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-modify-goal temporary-goal2 s:= sn-maximum-food-drop-distance)
	(up-modify-goal temporary-goal2 c:max 22); 30
	(up-modify-goal temporary-goal2 c:min 32); 40
	(up-filter-distance c: -1 g: temporary-goal2)
	(up-find-remote c: forage-bush c: 64)
	(up-get-search-state local-total)
	(up-modify-goal forage-count g:= remote-total)
;	(up-chat-data-to-self "Forage-count: %d." g: forage-count)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
(or	(cc-players-unit-type-count 0 shore-fish-class >= 1)
	(up-compare-goal forage-count != 0))
;	(up-gaia-type-count c: shore-fish-class >= 1)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-modify-goal temporary-goal2 s:= sn-maximum-food-drop-distance)
	(up-modify-goal temporary-goal2 c:max 22); 30
	(up-modify-goal temporary-goal2 c:min 32); 40
	(up-filter-distance c: -1 g: temporary-goal2)
	(up-find-remote c: shore-fish-class c: 64)
	(up-get-search-state local-total)
	(up-modify-goal shore-count g:= remote-total)
;	(up-chat-data-to-self "shore-count: %d." g: shore-count)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
;	(game-time < 1200)
	(dropsite-min-distance boar-hunting <= 34)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-filter-distance c: -1 c: 34)
	(up-find-remote c: 48 c: 200)
	(up-find-remote c: 822 c: 200)
	(up-get-search-state local-total)
	(up-modify-goal myboars g:= remote-total)
;	(up-chat-data-to-self "There are %d boar[s] in our vicinity." g: myboars)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
;	(game-time < 1200)
	(up-compare-goal myboars g:> boarcounter)
=>
	(up-modify-goal boarcounter c:+ 1)
;	(up-chat-data-to-self "Found %d boar[s]." g: boarcounter)
	(up-jump-rule -1))
(defrule
;	(game-time < 1200)
	(up-compare-goal myboars g:== boarcounter)
=>
	(up-modify-goal boardiffgoal g:- boarcounter)
	(up-modify-goal totalboars g:- boardiffgoal)
	(up-modify-goal boardiffgoal g:= boarcounter)
;	(up-chat-data-to-self "Found %d boar[s] in total." g: totalboars)
)
(defrule
;	(game-time < 1200)
	(up-compare-goal myboars g:< boarcounter)
=>
	(up-modify-goal boarcounter c:- 1)
	(up-modify-goal boardiffgoal g:= boarcounter))
(defrule
;	(game-time < 1200)
	(up-compare-goal mysheep g:> sheepcounter)
=>
	(up-modify-goal sheepcounter c:+ 1)
;	(up-chat-data-to-self "Found %d sheep." g: sheepcounter)
	(up-jump-rule -1))
(defrule
;	(game-time < 1200)
	(up-compare-goal mysheep g:== sheepcounter)
=>
	(up-modify-goal sheepdiffgoal g:- sheepcounter)
	(up-modify-goal totalsheep g:- sheepdiffgoal)
	(up-modify-goal sheepdiffgoal g:= sheepcounter)
;	(up-chat-data-to-self "Found %d sheep in total." g: totalsheep)
)
(defrule
;	(game-time < 1200)
	(up-compare-goal mysheep g:< sheepcounter)
=>
	(up-modify-goal sheepcounter c:- 1)
	(up-modify-goal sheepdiffgoal g:= sheepcounter))




(defrule
	(strategic-number sn-current-age >= fcastlea)
(or	(and	(unit-type-count villager-food <= 0)
		(unit-type-count fishing-ship <= 0))
(or	(game-time >= 2400)
(or	(civilian-population >= up-max-civ)
(or	(population >= max-civ-pop)
(or	(food-amount >= 100); 50
	(unit-type-count villager-food >= 15))))))
=>
	(up-jump-rule 3))
(defrule
	(true);	(strategic-number sn-current-age <= feudal)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(up-full-reset-search)
	(up-find-local c: villager-class c: 60)
	(up-remove-objects search-local object-data-gather-type != food)
	(up-find-local c: fishing-ship c: 60)
	(up-get-search-state local-total))
(defrule
;	(strategic-number sn-current-age <= feudal)
	(up-set-target-object search-local g: temporary-goal)
(or	(up-object-data object-data-target == forage-food)
(or	(up-object-data object-data-target == sheep-food)
(or	(up-object-data object-data-target == boar-food)
(or	(up-object-data object-data-target == deer-food)
(or	(up-object-data object-data-target == farm-food)
(or	(up-object-data object-data-target == ocean-fish-class)
	(up-object-data object-data-target == shore-fish-class)))))))
=>
	(up-get-object-data object-data-carry temporary-goal2)
	(up-modify-goal total-food-amount g:+ temporary-goal2))
(defrule
;	(strategic-number sn-current-age <= feudal)
	(up-set-target-object search-local g: temporary-goal)
	(up-compare-goal temporary-goal g:< local-total); just
	(up-compare-goal temporary-goal < 120); to be
	(up-compare-goal temporary-goal g:< my-cpop); safe
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-jump-rule -2)); end jump


(defrule
	(strategic-number sn-current-age >= imperial)
(or	(unit-type-count villager-stone <= 0)
(or	(game-time >= 2400)
(or	(and	(building-type-count-total town-center >= 5)
		(building-type-count-total castle >= 1))
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop)))))
=>
	(up-jump-rule 3))
(defrule
	(true);	(strategic-number sn-current-age <= castlea)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(up-full-reset-search)
	(up-find-local c: 124 c: 20)
	(up-find-local c: 220 c: 20)
	(up-get-search-state local-total))
(defrule
;	(strategic-number sn-current-age <= castlea)
	(up-set-target-object search-local g: temporary-goal)
(or	(up-object-data object-data-target == stone-mine)
	(up-object-data object-data-target == stone-mine-class))
=>
	(up-get-object-data object-data-carry temporary-goal2)
	(up-modify-goal total-stone-amount g:+ temporary-goal2))
(defrule
;	(strategic-number sn-current-age <= castlea)
	(up-set-target-object search-local g: temporary-goal)
	(up-compare-goal temporary-goal g:< local-total); just
	(up-compare-goal temporary-goal < 40); to be
	(up-compare-goal temporary-goal g:< my-cpop); safe
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-jump-rule -2)); end jump


(defrule
	(true); band-aid for now
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(up-full-reset-search))


(defrule
	(true)
=>
	(up-modify-goal maxfarms g:= villagercount)
	(up-modify-goal maxfarms s:%* sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal3 g:= maxfarms)
	(up-get-fact unit-type-count villager-food temporary-goal)
	(up-modify-goal maxfarms g:- temporary-goal)
	(up-get-fact unit-type-count villager-farmer temporary-goal)
	(up-modify-goal maxfarms g:+ temporary-goal)
	(up-modify-goal maxfarms c:max 0)
	(up-modify-goal temporary-goal3 c:+ 5);
	(up-modify-goal maxfarms g:min temporary-goal3)
	(up-get-fact unit-type-count villager-forager temporary-goal)
;	(up-modify-goal temporary-goal c:- 4)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-goal temporary-goal g:- forage-count)
	(up-modify-goal temporary-goal c:max 0)
;	(up-modify-goal temporary-goal c:min 8)
;	(up-chat-data-to-player my-player-number "temporary-goalFo: %d" g: temporary-goal)
)
(defrule
(or	(strategic-number sn-current-age >= fcastlea)
	(up-research-status c: castle-age >= research-available))
	(up-research-status c: ri-horse-collar != research-available)
	(up-research-status c: ri-horse-collar != research-pending)
	(up-research-status c: ri-heavy-plow != research-available)
	(up-research-status c: ri-heavy-plow != research-pending)
=>
	(up-get-fact unit-type-count villager-hunter temporary-goal2)
	(up-modify-goal temporary-goal2 c:- 8)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-get-fact unit-type-count villager-shepherd temporary-goal2)
	(up-modify-goal temporary-goal2 c:- 6)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-goal temporary-goal g:+ temporary-goal2))
(defrule
;	(building-type-count-total town-center <= 1)
;	(building-type-count-total mill <= 1)
;(or	(strategic-number sn-current-age >= fcastlea)
;	(up-research-status c: castle-age >= research-available))
	(up-research-status c: ri-horse-collar != research-available)
	(up-research-status c: ri-horse-collar != research-pending)
	(up-research-status c: ri-heavy-plow != research-available)
	(up-research-status c: ri-heavy-plow != research-pending)
=>
	(up-get-fact unit-type-count villager-fisherman temporary-goal2)
;	(up-modify-goal temporary-goal2 c:- 4)
	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal temporary-goal2 g:- shore-count)
	(up-modify-goal temporary-goal2 c:max 0)
;	(up-modify-goal temporary-goal2 c:min 8)
;	(up-chat-data-to-player my-player-number "temporary-goalFi: %d" g: temporary-goal)
	(up-modify-goal temporary-goal g:+ temporary-goal2))
(defrule
	(up-research-status c: ri-horse-collar <= research-pending)
	(up-research-status c: ri-horse-collar >= research-available)
	(wood-amount < 195); 135
=>
	(up-jump-rule 2))
(defrule
(or	(up-compare-goal forage-count <= 2); 3
(or	(and	(goal maa-var yes)
		(building-type-count-total barracks >= 1))
(or	(building-type-count-total archery-range >= 2); test
(or	(strategic-number sn-current-age >= fcastlea)
(or	(up-research-status c: castle-age >= research-available)
	(building-type-count-total blacksmith >= 1))))))
=>
;	(up-chat-data-to-player my-player-number "maxfarms: %d" g: maxfarms)
	(up-modify-goal maxfarms g:+ temporary-goal)
	(up-modify-goal maxfarms c:max 0)
	(up-jump-rule 1))
(defrule
(or	(and	(goal strategy s-flush)
		(building-type-count-total stable >= 1))
	(current-age <= dark-age))
=>
;	(up-chat-data-to-player my-player-number "maxfarms2: %d" g: maxfarms)
	(up-modify-goal maxfarms g:+ temporary-goal)
	(up-modify-goal maxfarms c:max 0))
(defrule
	(game-time < 360); deathmatch etc
;	(current-age >= castle-age)
	(up-compare-goal excessFood >= 1200)
	(unit-type-count-total villager < 30)
	(up-compare-goal maxfarms >= 1)
=>
;	(set-goal maxfarms 0)
	(up-get-fact unit-type-count villager-farmer temporary-goal)
	(up-modify-goal maxfarms g:= temporary-goal)
	(up-modify-goal maxfarms c:max 0))
(defrule
	(goal strategy grush)
	(game-time < 900)
	(building-type-count-total dock <= 2); 0
	(unit-type-count-total villager < 33); 30
	(wood-amount < 210); hmm
(or	(up-compare-goal total-food-amount >= 50)
	(up-pending-objects c: villager >= 2))
;(nand	(unit-type-count villager-food < 6); 7
;	(and	(unit-type-count fishing-ship < 3); 4
;		(up-compare-goal total-food-amount < 50)))
	(up-compare-goal maxfarms >= 1)
=>
;	(set-goal maxfarms 0)
	(up-get-fact unit-type-count villager-farmer temporary-goal)
	(up-modify-goal maxfarms g:= temporary-goal)
	(up-modify-goal maxfarms c:max 0))

(defrule
	(goal attacking yes)
; test	(goal attackmethod TSA)
;	(goal retargetenemy yes)
(or	(up-projectile-detected projectile-castle c:< 3000)
	(up-projectile-detected projectile-bombard-tower c:< 3000))
	(players-building-type-count target-player castle <= 0);	(up-building-type-in-town c: castle <= 0)
	(players-building-type-count target-player bombard-tower <= 0);	(up-building-type-in-town c: bombard-tower <= 0)
(or	(population >= max-civ-pop); test
(or	(unit-type-count battering-ram-line >= 1)
(or	(unit-type-count trebuchet-set >= 1)
	(unit-type-count bombard-cannon >= 2))))
;	(strategic-number sn-safe-town-size < 55); 60
=>
;	(set-strategic-number sn-safe-town-size 55))
	(up-modify-sn sn-safe-town-size c:+ 5)
	(up-modify-sn sn-safe-town-size c:min 55);
	(up-modify-sn sn-safe-town-size c:max 67))

(defrule
(or	(strategic-number sn-military-superiority <= 0)
	(goal attacking no))
=>
	(set-difficulty-parameter ability-to-maintain-distance 0))
(defrule; test
(or	(strategic-number sn-military-superiority >= 1)
	(and	(strategic-number sn-military-superiority >= 0)
		(goal attacking yes)))
=>
	(set-difficulty-parameter ability-to-maintain-distance 25)); 33
(defrule; test
	(strategic-number sn-military-superiority >= 2)
	(goal attacking yes)
=>
	(set-difficulty-parameter ability-to-maintain-distance 50)); 67
(defrule; test
	(strategic-number sn-military-superiority >= 3)
	(goal attacking yes)
=>
	(set-difficulty-parameter ability-to-maintain-distance 75)); 83


;(defrule
;	(timer-triggered twentysec)
;(or	(unit-type-count-total magyar-huszar >= 27)
;(or	(unit-type-count-total boyar >= 30)
;(or	(unit-type-count-total cavalry-class >= 30)
;	(unit-type-count-total scout-cavalry-line >= 27))))
;=>
;	(set-difficulty-parameter ability-to-dodge-missiles 100))
;(defrule
;	(timer-triggered twentysec)
;	(unit-type-count-total magyar-huszar < 27)
;	(unit-type-count-total boyar < 30)
;	(unit-type-count-total cavalry-class < 30)
;	(unit-type-count-total scout-cavalry-line < 27)
;=>
;	(set-difficulty-parameter ability-to-dodge-missiles 0))
(defrule
	(up-compare-goal control-goal != 0)
	(up-compare-goal control-goal != 7)
	(up-compare-goal strategy != stonewall)
(nand	(goal strategy krush)
	(goal kr-var 1))
=>
	(set-goal control-goal 0))
(defrule
	(up-compare-goal control-goal != 6)
	(up-compare-goal control-goal != 7)
(or	(up-compare-goal strategy == stonewall)
	(and	(goal strategy krush)
		(goal kr-var 1)))
=>
	(set-goal control-goal 6))

(defrule
	(up-compare-goal jump-rule-goal <= 0)
=>
	(up-get-rule-id current-rule-id)
;	(up-chat-data-to-player my-player-number "jt0: %d" g: current-rule-id)
)
(defrule
	(goal strategy usual)
	(up-compare-goal strategy-affinity != 0)
=>
	(up-modify-goal strategy-affinity c:= 0))
(defrule
	(goal strategy drush)
	(up-compare-const drush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= drush-affinity))
(defrule
	(goal strategy r-flush)
	(up-compare-const r-flush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= r-flush-affinity))
(defrule
	(goal sk-var yes)
	(up-compare-const sk-var-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= sk-var-affinity))
(defrule
	(goal strategy krush)
	(up-compare-const krush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= krush-affinity))
(defrule
	(goal strategy s-flush)
	(up-compare-const s-flush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= s-flush-affinity))
(defrule
	(goal strategy castledrop)
	(up-compare-const castledrop-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= castledrop-affinity))
(defrule
	(goal strategy stonewall)
	(up-compare-const stonewall-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= stonewall-affinity))
(defrule
	(goal strategy a-rush)
	(up-compare-const a-rush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= a-rush-affinity))
(defrule
	(goal strategy ca-rush)
	(up-compare-const ca-rush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= ca-rush-affinity))
(defrule
	(goal strategy klew)
	(up-compare-const klew-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= klew-affinity))
(defrule
	(goal strategy grush)
	(up-compare-const grush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= grush-affinity))
(defrule
	(up-compare-goal jump-rule-goal == 1)
	(up-compare-goal next-rule-id >= 0)
	(up-compare-goal next-rule-id <= 9999)
=>
	(set-goal jump-rule-goal 2)
	(up-jump-direct g: next-rule-id)
;	(up-chat-data-to-player my-player-number "jt1: %d" g: next-rule-id)
)







(defrule
	(game-time > 2)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-find-player ally find-closest my-flank)
	(up-modify-sn sn-focus-player-number g:= my-flank)
	(up-get-focus-fact allied-goal position-goal temporary-goal2)
	(up-find-player ally find-closest my-flank2)
	(up-find-next-player ally find-closest my-flank2)
	(up-modify-sn sn-focus-player-number g:= my-flank2)
	(up-get-focus-fact allied-goal position-goal temporary-goal3)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(disable-self))
(defrule
	(game-time > 2)
	(up-compare-goal temporary-goal2 != flank)
	(goal temporary-goal3 flank)
	(up-compare-goal position-goal != flank)
=>
	(up-modify-goal temporary-goal4 g:= my-flank)
	(up-modify-goal my-flank g:= my-flank2)
	(up-modify-goal my-flank2 g:= temporary-goal4)
	(disable-self))
;(defrule
;	(game-time > 2)
;	(goal temporary-goal2 flank)
;	(goal temporary-goal3 pocket)
;	(up-compare-goal position-goal != pocket)
;=>
;	(up-modify-goal my-flank g:= my-flank2)
;	(disable-self))
(defrule
	(game-time > 2)
	(up-compare-goal position-goal != pocket)
=>
	(set-goal my-flank2 0); only one player next to us
	(disable-self))
;(defrule
;	(game-time > 2)
;=>
;	(up-chat-data-to-player my-player-number "I will protect player #%d with all my might!" g: my-flank)
;	(up-chat-data-to-player my-player-number "Maybe even player #%d." g: my-flank2)
;;	(up-modify-sn sn-focus-player-number g:= temporary-goal)
;	(disable-self))


#load-if-not-defined UP-2-PLAYER-GAME
(defrule
;(or	(player-valid 3)
;(or	(player-valid 4)
;(or	(player-valid 5)
;(or	(player-valid 6)
;(or	(player-valid 7)
;	(player-valid 8))))))
	(up-compare-goal Multiplayer != yes)
=>
	(set-goal Multiplayer yes)
	(up-set-defense-priority c: market c: 3000); 2500
	(up-set-offense-priority c: market c: 6)); 5
#end-if

(defrule
;(nor
(not
	(civ-selected chinese)
)
;	(civ-selected mayan))
	(housing-headroom < 3)
	(food-amount >= 50)
	(game-time < 60)
	(building-type-count-total town-center >= 1)
(not	(death-match-game))
=>
	(up-assign-builders c: house c: 2)
	(disable-self))
(defrule
	(building-type-count house >= 1); -total
=>
	(up-assign-builders c: house c: 1)
	(disable-self))
(defrule
	(game-time > 60); below
=>
	(up-assign-builders c: house c: 1)
	(disable-self))

(defrule
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 255)
	(goal woodavailable no)
=>
	(set-goal woodavailable yes))
(defrule
(or	(dropsite-min-distance wood < 0)
	(dropsite-min-distance wood >= 255))
	(goal woodavailable yes)
=>
	(set-goal woodavailable no))

(defrule
	(cc-players-unit-type-count 0 shore-fish-class < shorefishreq)
	(cc-players-unit-type-count 0 ocean-fish-class < deepfishreq)
(or	(cc-players-unit-type-count 0 shore-fish-class < shorefishreq2)
	(cc-players-unit-type-count 0 ocean-fish-class < deepfishreq2))
=>
	(set-goal map land)
;	(chat-to-player my-player-number "No watermap.")
;	(set-strategic-number sn-garrison-rams 1)
	(disable-self))

(defrule
	(game-time < 10)
(or	(map-type oasis)
(or	(map-type fortress)
	(map-type black-forest)))
(or	(up-compare-goal map != land)
	(up-compare-goal fleet != no))
=>
	(chat-to-player my-player-number "O/F/B: No watermap.")
	(set-goal map land)
	(set-goal fleet no)
	(disable-self))

#load-if-not-defined OASIS-MAP
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined BLACK-FOREST-MAP
(defrule
	(goal map land)
	(goal enemy-boats yes)
=>
	(chat-to-player my-player-number "Enemy boats -> Watermap?")
	(set-goal map water))
#end-if
#end-if
#end-if

(defrule
	(game-time g:>= map-treatment-switch-time)
	(up-timer-status embassy != timer-running)
(or	(map-type islands)
	(map-type team-islands))
	(goal islands no)
=>
	(set-goal islands yes)
	(set-goal enemy-boats yes)
	(set-goal map water)
;	(chat-to-player my-player-number "Defined as island-map.")
)

;#load-if-not-defined BALTIC-MAP
;#load-if-not-defined COASTAL-MAP
;#load-if-not-defined CONTINENTAL-MAP
;#load-if-not-defined CRATER-LAKE-MAP
;#load-if-not-defined HIGHLAND-MAP
;#load-if-not-defined MEDITERRANEAN-MAP
;#load-if-not-defined RIVERS-MAP
;#load-if-not-defined SALT-MARSH-MAP
;#load-if-not-defined SCANDANAVIA-MAP
;#load-if-not-defined YUCATAN-MAP
(defrule
	(game-time g:>= map-treatment-switch-time)
	(up-timer-status embassy != timer-running)
(nor	(map-type islands)
	(map-type team-islands))
	(goal map water)
	(goal islands no)
	(wall-completed-percentage 2 >= 100)
	(building-type-count stone-wall-line < 4)
	(building-type-count palisade-wall < 4)
	(building-type-count gate < 2)
=>
	(set-goal islands yes)
	(set-goal enemy-boats yes)
	(set-strategic-number sn-garrison-rams 0)
;	(chat-to-player my-player-number "Islands.")
)
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if

#load-if-not-defined MIGRATION-MAP
(defrule
;(or	(up-compare-goal feinde <= 1)
;(or	(and	(up-compare-goal retargetenemy != yes)
;		(up-compare-goal retargetenemy != 6))
	(up-timer-status embassy == timer-running););); fivesec
=>
	(up-jump-rule 17))
(defrule
	(goal retargetenemy 6)
=>
	(set-goal retargetenemy yes)
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal remote-total 0)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0))

(defrule; end neg jump
	(stance-toward focus-player enemy)
	(player-in-game focus-player)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 off-mainland)
	(up-find-remote c: scout-cavalry-class c: 1)
	(up-find-remote c: villager-class c: 1)
	(up-find-remote c: building-class c: 1)
	(up-find-remote c: tower-class c: 1)
	(up-find-remote c: wall-class c: 1)
	(up-find-remote c: gate-class c: 1)
	(up-find-remote c: infantry-class c: 1)
	(up-find-remote c: archery-class c: 1))
(defrule
	(stance-toward focus-player enemy)
	(player-in-game focus-player)
=>
	(up-find-remote c: archery-cannon-class c: 1)
	(up-find-remote c: cavalry-class c: 1)
	(up-find-remote c: cavalry-archer-class c: 1)
	(up-find-remote c: cavalry-cannon-class c: 1)
	(up-find-remote c: monastery-class c: 1)
	(up-find-remote c: siege-weapon-class c: 1)
	(up-find-remote c: scorpion-class c: 1)
	(up-find-remote c: packed-trebuchet-class c: 1)
	(up-find-remote c: unpacked-trebuchet-class c: 1)
	(up-find-remote c: petard-class c: 1)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal3 g:+ remote-total))
(defrule
(or	(strategic-number sn-focus-player-number < 8)
	(player-valid focus-player))
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3))

(defrule
	(true)
=>
	(set-strategic-number sn-focus-player-number 1)
	(up-full-reset-search)
	(up-get-search-state local-total)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0))

(defrule; end neg jump
	(stance-toward focus-player enemy)
	(player-in-game focus-player)
=>
	(up-filter-include -1 -1 -1 on-mainland)
	(up-find-remote c: building-class c: 1)
	(up-find-remote c: tower-class c: 1)
	(up-find-remote c: wall-class c: 1)
	(up-find-remote c: gate-class c: 1)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal4 g:+ remote-total)
	(up-modify-goal temporary-goal4 g:- temporary-goal2)
	(up-find-remote c: scout-cavalry-class c: 1)
	(up-find-remote c: villager-class c: 1)
	(up-find-remote c: infantry-class c: 1)
	(up-find-remote c: archery-class c: 1)
	(up-find-remote c: archery-cannon-class c: 1))
(defrule
	(stance-toward focus-player enemy)
	(player-in-game focus-player);
	(goal temporary-goal7 0)
	(up-compare-goal temporary-goal4 >= 1)
=>
	(up-modify-goal temporary-goal7 s:= sn-focus-player-number))
(defrule
	(stance-toward focus-player enemy)
	(player-in-game focus-player)
	(up-compare-goal temporary-goal4 g:== temporary-goal5)
	(strategic-number sn-focus-player-number s:== sn-target-player-number)
=>
	(set-goal temporary-goal6 1))
(defrule
	(up-compare-goal temporary-goal4 >= 1)
	(goal temporary-goal6 1)
;	(goal islands no)
	(strategic-number sn-target-player-number g:!= temporary-goal7)
=>
	(up-modify-goal temporary-goal g:= temporary-goal7)
	(up-modify-sn sn-target-player-number g:= temporary-goal7)
	(set-goal temporary-goal6 0)
	(set-goal retargetenemy 6))
(defrule
	(stance-toward focus-player enemy)
	(player-in-game focus-player)
=>
	(up-find-remote c: cavalry-class c: 1)
	(up-find-remote c: cavalry-archer-class c: 1)
	(up-find-remote c: cavalry-cannon-class c: 1)
	(up-find-remote c: monastery-class c: 1)
	(up-find-remote c: siege-weapon-class c: 1)
	(up-find-remote c: scorpion-class c: 1)
	(up-find-remote c: packed-trebuchet-class c: 1)
	(up-find-remote c: unpacked-trebuchet-class c: 1)
	(up-find-remote c: petard-class c: 1)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal2 g:= remote-total)
	(up-modify-goal temporary-goal5 g:= temporary-goal4)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object point-x))
(defrule
(or	(strategic-number sn-focus-player-number < 8)
	(player-valid focus-player))
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -6))

(defrule
	(goal temporary-goal2 0)
	(up-compare-goal temporary-goal3 >= 1)
	(game-time g:>= map-treatment-switch-time)
	(up-compare-goal islands != yes)
=>
;	(chat-to-player my-player-number "Enemies found on different island.")
	(set-goal islands yes))
(defrule
	(up-compare-goal temporary-goal2 >= 1)
	(up-compare-goal islands != no)
=>
;	(chat-to-player my-player-number "Enemies found on same island.")
	(set-goal islands no)
	(up-get-fact game-time 0 map-treatment-switch-time)
	(up-modify-goal map-treatment-switch-time c:+ 120))

(defrule
	(up-compare-goal temporary-goal2 >= 1)
	(goal temporary-goal4 0)
	(goal attacking yes)
	(goal attackmethod TSA)
(or	(goal islands no)
	(players-building-count target-player <= 0))
=>
	(up-filter-include cmdid-military -1 -1 on-mainland)
	(up-filter-exclude -1 actionid-attack orderid-explore warship-class)
	(up-find-local c: all-units-class c: 1)
	(up-target-objects 0 action-default -1 -1))

(defrule
	(goal retargetenemy 6)
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)); end jump

(defrule
(or	(strategic-number sn-focus-player-number >= 9)
(or	(strategic-number sn-focus-player-number <= 0)
(or	(not	(player-in-game focus-player))
	(stance-toward focus-player ally))))
	(strategic-number sn-target-player-number != 0); none
=>
	(set-goal retargetenemy yes)
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
;	(chat-to-player my-player-number "Debugging focus/target-player. 5")
)
#end-if


#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-defined UP-PLAYER-1
(defrule
	(true)
=>
	(up-change-name "[Promi] INnoVation")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-2
(defrule
	(true)
=>
	(up-change-name "[Promi] ByuN")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-3
(defrule
	(true)
=>
	(up-change-name "[Promi] Dark")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-4
(defrule
	(true)
=>
	(up-change-name "[Promi] soO")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-5
(defrule
	(true)
=>
	(up-change-name "[Promi] Zest")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-6
(defrule
	(true)
=>
	(up-change-name "[Promi] BoxeR")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-7
(defrule
	(true)
=>
	(up-change-name "[Promi] MMA")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-8
(defrule
	(true)
=>
	(up-change-name "[Promi] Maru")
	(disable-self))
#end-if
#end-if
#end-if
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defrule
	(up-compare-goal landnomad >= 1)
	(building-type-count-total lumber-camp >= 1)
=>
	(cc-add-resource wood 40)
	(cc-add-resource food 40)
	(disable-self))
(defrule
	(current-age == dark-age)
=>
	(cc-add-resource wood -500)
	(cc-add-resource food -475)
	(cc-add-resource gold -500)
	(cc-add-resource stone -500)
	(disable-self))
(defrule
	(current-age == feudal-age)
=>
	(cc-add-resource wood -400)
	(cc-add-resource food -400)
	(cc-add-resource gold -450)
	(cc-add-resource stone -480)
	(disable-self))
(defrule
	(current-age == castle-age)
=>
	(cc-add-resource wood -380)
	(cc-add-resource food -350)
	(cc-add-resource gold -400)
	(cc-add-resource stone -400)
	(disable-self))
(defrule
	(current-age >= imperial-age)
=>
	(cc-add-resource wood -325)
	(cc-add-resource food -300)
	(cc-add-resource gold -300)
	(cc-add-resource stone -400)
	(disable-self))
(defrule
	(game-time >= 333)
=>
	(cc-add-resource wood 75)
	(cc-add-resource food 75); 100
	(disable-self))
(defrule
	(taunt-detected any-human 200)
	(game-time >= 444)
=>
	(cc-add-resource wood 20)
	(cc-add-resource food 40)
	(cc-add-resource gold 20)
	(cc-add-resource stone 5)
	(disable-self))
(defrule
	(game-time >= 120)
(not	(taunt-detected any-human 200))
	(timer-triggered MSuperiority)
(or	(game-time >= 540)
(or	(current-age >= feudal-age)
(or	(players-current-age any-enemy >= feudal-age)
	(players-current-age any-ally >= feudal-age))))
=>
	(cc-add-resource wood 24)
	(cc-add-resource food 24)
	(cc-add-resource gold 24)
	(cc-add-resource stone 1))
(defrule
	(game-time >= 120)
	(taunt-detected any-human 200)
	(timer-triggered twentysec)
(or	(game-time >= 510)
(or	(current-age >= feudal-age)
(or	(players-current-age any-enemy >= feudal-age)
	(players-current-age any-ally >= feudal-age))))
=>
	(cc-add-resource wood 24)
	(cc-add-resource food 24)
	(cc-add-resource gold 24)
	(cc-add-resource stone 1))
#load-if-defined UP-PLAYER-2
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "Promiskuitiv")
	(chat-to-all text-promiskuitiv); "Thanks for playing with my AI!"
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-3
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "Xhip_")
	(chat-to-all text-xhip); "I love co-op vs AI games. <3"
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-4
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "II2N")
	(chat-to-all text-II2N); "Well... Good luck!"
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-5
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "Scottish_Hero")
	(chat-to-all text-Scot); "Let's make this quick so i can grab a cuppa."
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-6
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "The_Offwo")
	(chat-to-all text-Offwo); "I hope you're ready for this."
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-7
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "John_the_Late")
	(chat-to-all text-John); "A-am i late?"
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-8
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "scripter16")
	(chat-to-all text-scripter); "My town is going to look so gorgeous!"
	(disable-self))
#end-if
#end-if


(defrule
(or	(up-compare-goal drushmicro == no)
	(strategic-number sn-current-age >= imperial))
	(strategic-number sn-percent-attack-soldiers < 100)
	(strategic-number sn-maximum-town-size <= 14)
	(not(enemy-buildings-in-town))
	(players-building-count any-enemy >= 1)
	(up-compare-goal attacking != no)
(nand	(current-age >= feudal-age)
	(players-current-age target-player <= dark-age))
=>
	(set-goal attacking no)
	(chat-to-player my-player-number "Debugging attack-goal => No."))
(defrule
(or	(up-compare-goal drushmicro == no)
	(strategic-number sn-current-age >= imperial))
(or	(strategic-number sn-percent-attack-soldiers >= 100)
	(strategic-number sn-maximum-town-size >= 70))
	(players-building-count any-enemy >= 1)
	(up-compare-goal attacking != yes)
=>
	(set-goal attacking yes)
	(chat-to-player my-player-number "Debugging attack-goal => Yes."))

#load-if-not-defined ISLANDS-MAP ; always 'yes' on islands
#load-if-not-defined TEAM-ISLANDS-MAP
(defrule 
	(goal islands no)
(or	(players-building-type-count any-enemy dock > 0)
(or	(players-unit-type-count any-enemy fishing-ship > 0)
	(up-compare-goal biggestenemynavy >= 1)))
	(goal enemy-boats no)
=>
	(set-goal enemy-boats yes)
	(set-goal map water)
	(set-strategic-number sn-minimum-water-body-size-for-dock 1300))

(defrule 
	(goal islands no)
	(players-building-type-count every-enemy dock <= 0)
	(players-unit-type-count every-enemy fishing-ship <= 0)
	(up-compare-goal biggestenemynavy <= 0)
	(goal enemy-boats yes)
=>
	(set-goal enemy-boats no)
	(set-strategic-number sn-minimum-water-body-size-for-dock 1600))
#end-if
#end-if

(defrule
	(goal fishing yes)
;	(cc-players-unit-type-count 0 shore-fish-class < shorefishreq)
;	(cc-players-unit-type-count 0 ocean-fish-class < deepfishreq)
;(or
	(cc-players-unit-type-count 0 shore-fish-class < shorefishreq2)
	(cc-players-unit-type-count 0 ocean-fish-class < deepfishreq2);)
=>
	(set-goal fishing no)
;	(disable-self)
)
(defrule
	(goal fishing no)
(or	(goal map water)
	(building-type-count-total dock >= 1))
(or	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq)
(or	(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq)
	(and	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq2)
		(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq2))))
=>
	(set-goal fishing yes)
;	(disable-self)
)
(defrule
	(goal fishing yes)
	(wood-amount >= 200)
	(building-type-count-total dock <= 0)
	(unit-type-count villager >= 15)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal fishing no))



(defrule
(or	(goal islands yes)
(or	(map-type islands)
	(map-type team-islands)))
(or	(goal enemy-boats no)
	(strategic-number sn-minimum-water-body-size-for-dock > 900))
=>
	(set-goal enemy-boats yes)
	(set-goal map water)
	(set-strategic-number sn-minimum-water-body-size-for-dock 900))

(defrule
(or	(strategic-number sn-minimum-attack-group-size != 1)
	(strategic-number sn-maximum-attack-group-size != 1))
(nor	(map-type islands)
(or	(map-type team-islands)
(or	(goal islands yes)
;(or
	(goal drushmicro yes);(goal strategy drush)
;	(unit-type-count-total transport-ship >= 1)
)));)
=>
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
	(chat-local-to-self "Attack-group-size: 1."))

(defrule
	(unit-type-count-total transport-ship >= 1)
(or	(strategic-number sn-minimum-attack-group-size < 5)
	(strategic-number sn-maximum-attack-group-size < 5))
(or	(goal islands yes)
(or	(map-type islands)
	(map-type team-islands)))
	(up-compare-goal drushmicro != yes);(up-compare-goal strategy != drush)
(not	(research-completed ri-careening))
=>
	(set-strategic-number sn-minimum-attack-group-size 5)
	(set-strategic-number sn-maximum-attack-group-size 5)
	(chat-local-to-self "Attack-group-size: 5."))

(defrule
	(unit-type-count-total transport-ship >= 1)
(or	(strategic-number sn-minimum-attack-group-size < 8)
	(strategic-number sn-maximum-attack-group-size < 10))
(or	(goal islands yes)
(or	(map-type islands)
	(map-type team-islands)))
	(research-completed ri-careening)
(not	(research-completed ri-dry-dock))
=>
	(set-strategic-number sn-minimum-attack-group-size 8)
	(set-strategic-number sn-maximum-attack-group-size 10)
	(chat-local-to-self "Attack-group-size: 8-10."))

(defrule
	(unit-type-count-total transport-ship >= 1)
(or	(strategic-number sn-minimum-attack-group-size < 8)
	(strategic-number sn-maximum-attack-group-size < 20))
(or	(goal islands yes)
(or	(map-type islands)
	(map-type team-islands)))
	(research-completed ri-dry-dock)
=>
	(set-strategic-number sn-minimum-attack-group-size 10)
	(set-strategic-number sn-maximum-attack-group-size 20)
	(chat-local-to-self "Attack-group-size: 10-20."))

(defrule
	(strategic-number sn-attack-group-gather-spacing > 5)
=>
	(set-strategic-number sn-attack-group-gather-spacing 5))
(defrule
	(timer-triggered TSA-timer)
	(goal drushmicro no)
	(strategic-number sn-percent-attack-soldiers >= 100)
	(strategic-number sn-attack-group-gather-spacing <= 5)
=>
	(set-strategic-number sn-attack-group-gather-spacing 255); 50
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
	(chat-local-to-self "Attack-group-size: 1."))

;#load-if-defined KING-OF-THE-HILL; KING_OT_HILL?
;(defrule
;	(game-time >= 2200)
;;	(hold-koh-ruin)
;	(strategic-number sn-gather-idle-soldiers-at-center != 1)
;=>
;	(set-strategic-number sn-gather-idle-soldiers-at-center 1))
;#end-if

(defrule
	(up-compare-goal armytech < feudal)
(or	(up-research-status c: ri-fletching >= research-complete)
(or	(up-research-status c: ri-scale-mail >= research-complete)
(or	(up-research-status c: ri-scale-barding >= research-complete)
(or	(up-research-status c: ri-forging >= research-complete)
	(and	(military-population >= 5)
		(current-age >= feudal-age))))))
=>
	(set-goal armytech feudal))
(defrule
	(up-compare-goal armytech < castlea)
(or	(up-research-status c: ri-bodkin-arrow >= research-complete)
(or	(up-research-status c: ri-chain-mail >= research-complete)
(or	(up-research-status c: ri-chain-barding >= research-complete)
(or	(up-research-status c: ri-forging >= research-complete)
	(unit-type-count knight-line >= 5)))))
=>
	(set-goal armytech castlea))
(defrule
	(up-compare-goal armytech < castlea)
(or	(up-research-status c: ri-crossbow >= research-complete)
(or	(up-research-status c: ri-elite-skirmisher >= research-complete)
(or	(up-research-status c: ri-pikeman >= research-complete)
(or	(up-research-status c: ri-long-swordsman >= research-complete)
	(up-research-status c: ri-light-cavalry >= research-complete)))))
=>
	(set-goal armytech castlea))
(defrule
	(up-compare-goal armytech < imperial)
(or	(up-research-status c: ri-bracer >= research-complete)
(or	(up-research-status c: ri-plate-mail >= research-complete)
(or	(up-research-status c: ri-plate-barding >= research-complete)
(or	(up-research-status c: my-unique-unit-upgrade >= research-complete)
(or	(up-research-status c: ri-galleon >= research-complete)
	(up-research-status c: ri-chemistry >= research-complete))))))
=>
	(set-goal armytech imperial))
(defrule
	(up-compare-goal armytech < imperial)
(or	(up-research-status c: ri-cavalier >= research-complete)
(or	(up-research-status c: ri-two-handed-swordsman >= research-complete)
(or	(up-research-status c: ri-heavy-scorpion >= research-complete)
(or	(up-research-status c: ri-onager >= research-complete)
(or	(up-research-status c: ri-elite-longboat >= research-complete)
	(up-research-status c: ri-hussar >= research-complete))))))
=>
	(set-goal armytech imperial))
(defrule
	(up-compare-goal armytech < imperial)
(or	(up-research-status c: ri-halberdier >= research-complete)
(or	(up-research-status c: ri-elite-eagle-warrior >= research-complete)
(or	(up-research-status c: ri-heavy-cavalry-archer >= research-complete)
(or	(up-research-status c: ri-heavy-camel >= research-complete)
(or	(up-research-status c: ri-elite-turtle-ship >= research-complete)
	(up-research-status c: ri-arbalest >= research-complete))))))
=>
	(set-goal armytech imperial))

(defrule
	(up-compare-goal enablesmith != yes)
	(current-age == feudal-age)
	(strategic-number sn-current-age == feudal)
(or	(building-type-count-total archery-range >= 1)
(or	(building-type-count-total stable >= 1)
	(building-type-count-total market >= 1)))
=>
	(set-goal enablesmith yes))
(defrule
	(up-compare-goal kloster != yes)
	(building-type-count-total monastery >= 1)
=>
	(set-goal kloster yes))
(defrule
	(up-compare-goal tc != yes)
	(building-type-count-total town-center >= 2)
=>
	(set-goal tc yes))

(defrule
	(up-compare-goal dreitc != no)
	(building-type-count-total town-center < 3)
	(population < max-civ-pop); hmm
	(civilian-population < up-max-civ); hmm
=>
	(set-goal dreitc no))
#load-if-not-defined UP-POCKET-POSITION
(defrule
(or	(building-type-count siege-workshop >= 1)
(or	(building-type-count stable >= 3)
(or	(building-type-count archery-range >= 3)
(or	(building-type-count barracks >= 3)
(or	(building-type-count castle >= 1)
(or	(goal enemy-goal 0)
(or	(civilian-population >= 39); test
	(strategic-number sn-military-superiority >= 0)))))))); 1
=>
	(up-jump-rule 1))
(defrule
	(goal dreitc no)
	(goal position-goal flank)
	(goal strategy usual)
	(strategic-number sn-current-age >= fcastlea)
	(strategic-number sn-military-superiority <= -1)
(or	(up-compare-goal enemy-goal != 0)
(or	(strategic-number sn-military-superiority <= -2)
	(goal underattack yes))); defend hm
	(building-type-count castle <= 0); test
=>
	(set-goal dreitc yes))
#end-if
(defrule
	(up-compare-goal dreitc != yes)
	(building-type-count-total town-center >= 1)
(or	(building-type-count-total town-center >= 3)
(or	(population >= max-civ-pop); hmm
	(civilian-population >= up-max-civ))); hmm
=>
	(set-goal dreitc yes))
(defrule
	(current-age == feudal-age)
	(strategic-number sn-current-age < feudal)
=>
	(chat-local-to-self "Resetting townsize.")
	(up-modify-sn sn-maximum-town-size c:max 10)
	(up-modify-sn sn-maximum-town-size c:min 14)
	(set-strategic-number sn-current-age feudal))
(defrule
	(current-age == castle-age)
	(strategic-number sn-current-age < castlea)
=>
	(chat-local-to-self "Resetting townsize.")
	(up-modify-sn sn-maximum-town-size c:max 10)
	(up-modify-sn sn-maximum-town-size c:min 16)
	(set-strategic-number sn-current-age castlea))
(defrule
	(current-age >= imperial-age)
	(strategic-number sn-current-age < imperial)
=>
	(chat-local-to-self "Resetting townsize.")
	(up-modify-sn sn-maximum-town-size c:max 10)
	(up-modify-sn sn-maximum-town-size c:min 18)
	(set-strategic-number sn-current-age imperial))

#load-if-defined DARK-AGE-END
(defrule
	(current-age >= dark-age)
	(strategic-number sn-current-age < imperial)
=>
	(set-goal tc yes)
	(set-goal dreitc yes)
	(set-goal researchplan yes)
	(set-goal milunits yes)
	(set-strategic-number sn-current-age imperial))
(defrule
	(up-compare-goal strategy-type >= feudal-war)
	(up-compare-goal strategy != usual)
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, age end."))
#else
(defrule
	(strategic-number sn-current-age >= dfeudal)
	(current-age == dark-age)
	(up-research-status c: feudal-age <= research-available)
=>
	(set-strategic-number sn-current-age dark)
	(chat-to-player my-player-number "Age advancement was disturbed."))
(defrule
	(strategic-number sn-current-age < dfeudal)
	(current-age == dark-age)
	(up-research-status c: feudal-age == research-pending)
=>
	(set-strategic-number sn-current-age dfeudal))
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
	(current-age >= feudal-age)
(or	(building-type-count blacksmith >= 1)
(or	(civilian-population >= up-max-civ)
	(population >= del-civ-pop))); test
	(strategic-number sn-current-age < imperial)
=>
	(set-goal tc yes)
	(set-goal dreitc yes)
	(set-goal researchplan yes)
	(set-goal milunits yes)
	(set-strategic-number sn-current-age imperial))
(defrule
	(goal attacking yes)
	(goal underattack no)
	(can-build watch-tower)
=>
	(build-forward watch-tower))
(defrule
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal strategy != usual)
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, age end."))
#else
(defrule
	(strategic-number sn-current-age >= fcastlea)
	(current-age == feudal-age)
	(up-research-status c: castle-age <= research-available)
=>
	(set-strategic-number sn-current-age feudal)
	(chat-to-player my-player-number "Age advancement was disturbed."))
(defrule
	(strategic-number sn-current-age < fcastlea)
	(current-age == feudal-age)
	(up-research-status c: castle-age == research-pending)
=>
	(set-strategic-number sn-current-age fcastlea))
#end-if
#load-if-defined CASTLE-AGE-END
(defrule
	(current-age >= castle-age)
(or	(building-type-count castle >= 1)
(or	(civilian-population >= up-max-civ)
	(population >= del-civ-pop))); test
	(strategic-number sn-current-age < imperial)
=>
	(set-goal researchplan yes)
	(set-goal milunits yes)
	(set-strategic-number sn-current-age imperial))
(defrule
	(up-compare-goal strategy-type >= imperial-war)
	(up-compare-goal strategy != usual)
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, age end."))
#else
(defrule
	(strategic-number sn-current-age >= imperial)
	(current-age == castle-age)
	(up-research-status c: imperial-age <= research-available)
=>
	(set-strategic-number sn-current-age castlea)
	(chat-to-player my-player-number "Age advancement was disturbed."))
(defrule
	(strategic-number sn-current-age < imperial)
	(current-age == castle-age)
	(up-research-status c: imperial-age >= research-pending); ==
=>
	(set-strategic-number sn-current-age imperial))
#end-if



(defrule
(or	(goal researchplan yes)
	(gold-amount >= 2500))
	(goal underattack no)
	(goal defend no); dead vils
	(building-type-count-total dock <= 0)
	(unit-type-count-total transport-ship <= 0)
	(wood-amount >= 200)
	(goal enemy-boats yes)
	(goal attacking yes)
	(strategic-number sn-minimum-water-body-size-for-dock > 333)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock 333))

(defrule
	(current-age >= castle-age)
	(population >= siege-pop); del-civ-pop
	(unit-type-count bombard-cannon < 7)
	(unit-type-count trebuchet-set < 3)
	(unit-type-count battering-ram-line < 5)
	(up-compare-goal siegereq != no)
=>
	(set-goal siegereq no))
(defrule
(or	(current-age <= feudal-age)
(or	(population < siege-pop); del-civ-pop
(or	(unit-type-count bombard-cannon >= 7)
(or	(unit-type-count trebuchet-set >= 3)
	(unit-type-count battering-ram-line >= 5)))))
	(up-compare-goal siegereq != yes)
=>
	(set-goal siegereq yes))

(defrule
(not	(up-pending-placement c: dock))
	(strategic-number sn-dock-placement-mode != 0)
=>
	(set-strategic-number sn-dock-placement-mode 0)); standard
(defrule
	(strategic-number sn-dock-placement-mode != 1)
	(goal underattack no)
(or	(and	(up-compare-goal strategy-type <= castle-war)
		(and	(up-compare-goal strategy-type2 == water)
			(nand	(up-compare-goal gr-var >= 2)
				(strategic-number sn-current-age <= feudal))))
;(or	(building-type-count dock >= 5)
	(and	(strategic-number sn-current-age >= imperial)
		(population >= max-civ-pop)));)
=>
	(set-strategic-number sn-dock-placement-mode 1))
(defrule
	(strategic-number sn-dock-placement-mode != -1)
	(building-type-count dock <= 4); hm
(or	(goal underattack yes)
	(and	(or	(up-compare-goal strategy-type >= imperial-war)
		(or	(up-compare-goal strategy-type2 != water)
			(and	(up-compare-goal biggestenemynavy >= 4); 11
				(up-compare-goal threat-time < 30000))))
		(building-type-count-total dock < 1)))
=>
	(set-strategic-number sn-dock-placement-mode -1))
(defrule
	(strategic-number sn-dock-placement-mode != -1)
	(building-type-count dock <= 4); hm
(or	(and	(up-compare-goal gr-var >= 2)
		(goal strategy grush))
	(and	(building-type-count dock <= 2)
		(and	(up-compare-goal threat-time < 30000)
			(up-compare-goal navycount g:< enemyfocusnavy))))
=>
	(set-strategic-number sn-dock-placement-mode -1))




#load-if-defined UP-ALLY-IN-GAME
(defrule
	(true)
=>
	(set-goal assistance no)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1))
(defrule
	(player-in-game focus-player); valid
	(stance-toward focus-player ally)
	(strategic-number sn-focus-player-number != my-player-number)
	(up-allied-sn focus-player sn-target-player-number s:== sn-target-player-number)
	(up-allied-goal focus-player attacknotifier == 1); attacking
	(strategic-number sn-target-player-number >= 1)
	(strategic-number sn-target-player-number <= 8)
=>
	(set-goal assistance yes))
(defrule
	(up-compare-goal assistance != yes)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
#end-if




#load-if-defined SPANISH-CIV
(defrule
	(research-completed my-unique-research)
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop))
	(unit-type-count-total villager > 10)
	(unit-type-count-total 211 < 7)
	(unit-type-count-total 224 < 7)
=>
	(up-modify-sn sn-allow-civilian-defense c:max 2))
(defrule
	(research-completed my-unique-research)
(or	(and	(civilian-population < up-max-civ)
		(population < max-civ-pop))
(or	(unit-type-count-total villager < 10)
(or	(unit-type-count-total 211 >= 7)
	(unit-type-count-total 224 >= 7))))
=>
	(up-modify-sn sn-allow-civilian-defense c:min 1))
#end-if

(defrule
(or	(game-time >= 1200)
(or	(strategic-number archers >= 3)
(or	(strategic-number infantry >= 3)
(or	(strategic-number cavalry >= 4)
(or	(strategic-number eagles >= 3)
	(strategic-number husks >= 3))))))
=>
	(up-jump-rule 2))
(defrule
	(game-time < 840)
(or	(players-military-population focus-player <= 4)
	(military-population >= 2))
	(up-enemy-units-in-town >= 1)
	(up-enemy-units-in-town <= 5); 6
	(players-military-population focus-player <= 6); 5
	(military-population <= 6); 5
	(up-compare-goal my-pop g:<= focus-mpop)
	(up-research-status c: ri-loom >= research-complete)
	(players-current-age focus-player <= dark-age)
	(players-military-population every-enemy <= 8); 9
	(players-current-age every-enemy <= feudal-age)
=>
	(up-modify-sn sn-allow-civilian-defense c:max 3))
(defrule
	(game-time < 960); 930
(or	(players-military-population focus-player <= 4)
	(military-population >= 2))
	(up-enemy-units-in-town >= 1)
	(up-enemy-units-in-town <= 5); 6
	(players-military-population focus-player <= 6); 5
	(military-population <= 6); 5
	(up-compare-goal my-pop g:<= focus-mpop)
	(up-research-status c: ri-loom >= research-complete)
	(players-current-age focus-player <= feudal-age)
	(players-military-population every-enemy <= 8); 12
	(players-current-age every-enemy <= castle-age)
=>
	(up-modify-sn sn-allow-civilian-defense c:max 2))

(defrule
;	(enemy-buildings-in-town)
	(up-building-type-in-town c: watch-tower >= 1)
;	(players-building-type-count target-player watch-tower >= 1)
	(players-building-type-count target-player watch-tower < 3)
	(up-building-type-in-town c: watch-tower < 3)
	(strategic-number sn-maximum-town-size < 28);
	(up-compare-goal targetdistance < 30)
	(goal attacking no)
	(goal defend no)
	(up-projectile-detected projectile-watch-tower c:< 4000)
	(players-building-type-count target-player castle <= 0)
	(players-building-type-count target-player palisade-wall <= 0)
	(players-building-type-count target-player stone-wall-line <= 0)
	(players-building-type-count target-player gate <= 0)
	(military-population < 8)
	(players-military-population target-player < 3)
=>
	(up-modify-sn sn-number-civilian-militia c:max 8)
	(up-modify-sn sn-allow-civilian-offense c:max 2))



#load-if-not-defined DEATH-MATCH
#load-if-not-defined DEFEND-WONDER
;#load-if-not-defined HIGH-RESOURCES-START
(defrule
	(true)
;	(strategic-number sn-target-player-number >= 1)
;	(strategic-number sn-target-player-number <= 8)
;	(player-in-game target-player)
;(not	(stance-toward target-player ally))
=>
	(up-modify-goal temporary-goal g:= scoreTarget)
	(up-modify-goal scoreTarget s:= sn-target-player-number))
(defrule
	(up-compare-goal scoreTarget g:!= temporary-goal)
=>
	(up-get-target-fact current-score 0 scoreTLast)
	(set-goal scoreTDiff 0)
	(up-jump-rule 1))
(defrule
	(up-compare-goal scoreTarget g:== temporary-goal)
=>
	(up-modify-goal scoreTDiff g:= scoreTLast)
	(up-get-target-fact current-score 0 scoreTLast)
	(up-modify-goal scoreTDiff g:- scoreTLast)
	(up-modify-goal scoreTDiff c:* -1))
;#end-if
#end-if
#end-if
(defrule
	(up-compare-goal enemyState <= imperial)
	(players-current-age target-player >= imperial-age)
=>
	(set-goal enemyState imperial))
(defrule
(or	(up-compare-goal enemyState <= castlea)
	(up-compare-goal enemyState >= imperial))
	(players-current-age target-player == castle-age)
=>
	(set-goal enemyState castlea))
(defrule
(or	(up-compare-goal enemyState <= feudal)
	(up-compare-goal enemyState >= castlea))
	(players-current-age target-player == feudal-age)
=>
	(set-goal enemyState feudal))
(defrule
(or	(up-compare-goal enemyState <= dark)
	(up-compare-goal enemyState >= feudal))
	(players-current-age target-player <= dark-age)
=>
	(set-goal enemyState dark))
(defrule
	(up-compare-goal enemyState < dfeudal)
	(up-compare-goal scoreTDiff <= -31)
	(players-current-age-time target-player >= 12)
	(players-current-age target-player <= dark-age)
=>
;	(chat-local-to-self "Enemy clicked up to feudal.")
	(set-goal enemyState dfeudal))
(defrule
	(up-compare-goal enemyState < fcastlea)
	(up-compare-goal scoreTDiff <= -66)
	(players-current-age-time target-player >= 12)
	(players-current-age target-player == feudal-age)
=>
;	(chat-local-to-self "Enemy clicked up to castle.")
	(set-goal enemyState fcastlea))
(defrule
	(up-compare-goal enemyState < cimperial)
	(up-compare-goal scoreTDiff <= -122)
	(players-current-age-time target-player >= 12)
	(players-current-age target-player == castle-age)
=>
;	(chat-local-to-self "Enemy clicked up to imp.")
	(set-goal enemyState cimperial))

#load-if-not-defined UP-POCKET-POSITION ; just for flanks
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined ARENA-MAP
#load-if-not-defined FORTRESS-MAP
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal islands yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 15)); stays the same with the #load-if
(defrule
;(or	(goal control-goal 7); test
(or	(players-building-count every-enemy <= 0)
(or	(up-compare-goal targetdistance >= 130); 100
;(or	(building-type-count town-center >= 2)
(or	(up-compare-goal strategy-type <= feudal-war)
;(or	(goal drushmicro yes); test
	(strategic-number sn-current-age >= castlea))));););)
=>
	(up-jump-rule 7)); stays the same with the #load-if

(defrule
	(game-time < 780); 13 minutes
	(current-age == dark-age)
	(players-current-age target-player == dark-age)
	(players-military-population target-player >= 4)
;nn	(strategic-number sn-military-superiority <= -1)
	(up-compare-goal enemy-goal != drush)
=>
	(set-goal enemy-goal drush))

(defrule
	(up-compare-goal my-cpop g:> target-cpop)
	(players-civilian-population target-player < 26)
	(strategic-number sn-current-age <= dark)
	(up-compare-goal enemyState >= dfeudal)
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal total-food-amount < 1000); test
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush))
#load-if-not-defined CHINESE-CIV
(defrule
	(current-age == dark-age)
	(players-building-count any-enemy > 0)
	(players-current-age target-player == dark-age)
	(unit-type-count villager >= 22)
(or	(players-civilian-population target-player < 19)
	(unit-type-count villager >= 23))
(or	(players-civilian-population target-player < 20)
	(unit-type-count villager >= 24))
(or	(players-civilian-population target-player < 21)
	(unit-type-count villager >= 25))
	(players-civilian-population target-player < 22)
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush))
(defrule
	(current-age == dark-age)
	(players-building-count any-enemy > 0)
	(players-current-age target-player == dark-age)
	(unit-type-count villager >= 26)
(or	(players-civilian-population target-player < 23)
	(unit-type-count villager >= 27))
(or	(players-civilian-population target-player < 24)
	(unit-type-count villager >= 28))
(or	(players-civilian-population target-player < 25)
	(unit-type-count villager >= 29))
	(players-civilian-population target-player < 26)
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush))
#else ; Chinese
(defrule
	(current-age == dark-age)
	(players-building-count any-enemy > 0)
	(players-current-age target-player == dark-age)
	(unit-type-count villager >= 23)
(or	(players-civilian-population target-player < 19)
	(unit-type-count villager >= 24))
(or	(players-civilian-population target-player < 20)
	(unit-type-count villager >= 25))
(or	(players-civilian-population target-player < 21)
	(unit-type-count villager >= 26))
	(players-civilian-population target-player < 22)
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush))
(defrule
	(current-age == dark-age)
	(players-building-count any-enemy > 0)
	(players-current-age target-player == dark-age)
	(unit-type-count villager >= 27)
(or	(players-civilian-population target-player < 23)
	(unit-type-count villager >= 28))
(or	(players-civilian-population target-player < 24)
	(unit-type-count villager >= 29))
(or	(players-civilian-population target-player < 25)
	(unit-type-count villager >= 30))
	(players-civilian-population target-player < 26)
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush))
#end-if

(defrule
	(game-time < 810); 13:30
(or	(up-compare-goal targetdistance < 90)
	(goal Multiplayer no))
	(current-age == dark-age)
	(strategic-number sn-military-superiority <= 0)
	(players-current-age target-player == feudal-age)
(or	(and	(players-current-age-time target-player >= 35)
		(players-military-population target-player >= 4))
		(players-military-population target-player >= 6))
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush))
(defrule
	(game-time < 1140); 20:00
(or	(strategic-number sn-military-superiority <= -2)
	(players-military-population target-player >= 12)); 16
	(players-military-population target-player g:> my-mpop)
	(players-current-age target-player == feudal-age)
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush))
(defrule
	(up-compare-goal position-goal != pocket)
(or	(players-military-population target-player >= 6)
	(up-enemy-units-in-town >= 3))
	(players-military-population target-player g:> my-mpop)
	(strategic-number sn-current-age <= dfeudal)
	(players-current-age target-player == feudal-age)
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush)
	(disable-self)); end jump 2

(defrule
	(goal enemy-goal drush)
=>
	(chat-to-player my-player-number "Possible enemy drush detected.")
	(disable-self))
(defrule
	(goal enemy-goal flush)
=>
	(chat-to-player my-player-number "Possible enemy flush detected.")
	(disable-self))

(defrule
(or	(game-time >= 1200)
(or	(up-compare-goal enemy-goal == rush)
(or	(up-compare-goal position-goal != flank)
(or	(building-type-count castle >= 1)
(or	(strategic-number sn-current-age >= imperial)
(or	(strategic-number sn-military-superiority >= 1)
	(and	(goal defend no)
		(strategic-number sn-military-superiority >= -2))))))))
=>
	(up-jump-rule 4))
(defrule
	(up-compare-goal my-cpop g:> target-cpop)
	(players-civilian-population target-player < 30)
	(strategic-number sn-current-age <= feudal)
	(up-compare-goal enemyState >= fcastlea)
	(up-compare-goal strategy-type != castle-war); hmm
	(up-compare-goal total-food-amount < 1300); test
=>
	(enable-timer scout 2)
	(set-goal enemy-goal rush)
	(chat-to-player my-player-number "The enemy might try to rush us."))
(defrule
	(game-time <= 960)
	(players-current-age target-player == feudal-age)
	(players-current-age-time target-player >= 120)
	(players-military-population target-player <= 3)
	(players-building-type-count target-player watch-tower < 2); hopefully no sling or trush
=>
	(enable-timer scout 2)
	(set-goal enemy-goal rush)
	(chat-to-player my-player-number "The enemy might try to rush us.2"))
(defrule
	(game-time <= 1060)
	(players-current-age target-player >= castle-age)
=>
	(enable-timer scout 2)
	(set-goal enemy-goal rush)
	(chat-to-player my-player-number "The enemy might try to rush us.3"))
(defrule
	(game-time <= 1110)
	(players-military-population target-player <= 3)
	(players-current-age target-player >= castle-age)
=>
	(enable-timer scout 2)
	(set-goal enemy-goal rush)
	(chat-to-player my-player-number "The enemy might try to rush us.4")); end jump 1; end jump 3

#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

(defrule
	(timer-triggered embassy); anti-spam
	(goal enemy-goal drush)
(or	(military-population >= 6)
(or	(strategic-number sn-military-superiority >= 1)
(or	(game-time >= 840)
	(and	(current-age >= feudal-age)
		(building-type-count archery-range >= 1)))))
	(goal underattack no)
	(strategic-number sn-military-superiority >= -1)
=>
	(set-goal enemy-goal 0))

(defrule
	(timer-triggered embassy); anti-spam
	(goal enemy-goal flush)
(or	(game-time >= 1150); 19:00
	(strategic-number sn-military-superiority >= 2))
(or	(game-time >= 1020); 17:00
	(strategic-number sn-military-superiority >= 1))
	(goal underattack no)
(or	(players-military-population target-player g:<= my-mpop)
	(strategic-number sn-military-superiority >= 0))
=>
	(set-goal enemy-goal 0))
(defrule
	(timer-triggered embassy); anti-spam
	(goal enemy-goal flush)
	(players-current-age target-player == dark-age)
	(players-civilian-population target-player >= 26)
=>
	(set-goal enemy-goal 0))

(defrule
	(timer-triggered embassy); anti-spam
	(goal enemy-goal rush)
(or	(game-time >= 1350); 22:30
	(strategic-number sn-military-superiority >= 2))
	(goal underattack no)
(or	(population >= del-civ-pop)
(or	(players-military-population target-player g:<= my-mpop)
	(strategic-number sn-military-superiority >= 0)))
=>
	(set-goal enemy-goal 0))

(defrule
(or	(up-compare-goal enemy-goal != 0)
	(up-compare-goal enemy-goal2 != 0))
	(game-time >= 1800)
(or	(strategic-number sn-military-superiority >= -2)
	(up-compare-goal target-cpop >= min-number-vills))
	(strategic-number sn-current-age >= imperial)
=>
	(set-goal enemy-goal 0)
	(set-goal enemy-goal2 0))

(defrule
(nor	(players-civ target-player mayan)
(or	(players-civ target-player aztec)
	(players-civ target-player incan)))
=>
	(up-jump-rule 3))
(defrule
(or	(up-compare-goal position-goal == pocket); test
(or	(players-building-type-count target-player archery-range >= 1)
(or	(strategic-number skirmsarchers >= 3)
	(up-compare-goal enemy-goal2 == klew))))
=>
	(up-jump-rule 2))
(defrule
	(game-time < 1350); 22:30
(or	(players-building-type-count target-player barracks >= 3)
(or	(and	(players-building-type-count target-player market >= 1)
		(players-building-type-count target-player barracks >= 2))
	(players-unit-type-count target-player eagle-warrior-line >= 6)))
(or	(goal enemy-goal rush); sometimes detects pre-castle
	(players-current-age target-player >= castle-age))
=>
	(set-goal enemy-goal rush)
	(set-goal enemy-goal2 klew))
(defrule
	(game-time < 1350); 22:30
	(strategic-number eagles >= 4); 5
	(up-compare-goal target-cpop <= 24)
	(strategic-number infantry <= 0)
	(strategic-number skirmsarchers <= 0)
	(strategic-number moenchesiege <= 0)
	(up-compare-goal my-cpop g:> target-cpop)
	(players-current-age target-player >= feudal-age)
=>
	(set-goal enemy-goal rush)
	(set-goal enemy-goal2 klew)); end mini-jump
(defrule
	(up-compare-goal enemy-goal2 == klew)
;	(players-current-age target-player < imperial-age)
=>
;	(set-goal dreitc yes); don't wait for TCs until farming
	(up-store-player-name target-player)
	(up-chat-data-to-player my-player-number "%s might rush with eagles." c: 7031232)
	(up-chat-data-to-player every-ally "%s might rush with eagles." c: 7031232)
	(disable-self))
(defrule
	(up-compare-goal enemy-goal2 == klew)
(or	(strategic-number archers >= 5)
(or	(strategic-number siege >= 5)
(or	(players-building-type-count target-player archery-range >= 5)
	(and	(players-military-population target-player <= 12)
		(strategic-number sn-military-superiority >= 3)))))
=>
	(set-goal enemy-goal2 0))
(defrule
	(up-compare-goal enemy-goal2 == klew)
(nor	(players-civ target-player mayan)
(or	(players-civ target-player aztec)
	(players-civ target-player incan)))
=>
	(set-goal enemy-goal2 0))

(defrule
	(game-time < 820); 14:00
(or	(players-building-type-count target-player dock >= 3)
	(players-unit-type-count target-player galley-line >= 3))
	(players-current-age target-player <= feudal-age)
(or	(up-compare-goal enemy-goal2 != grush)
	(up-compare-goal enemy-goal != 0))
=>
	(set-goal enemy-goal 0); flush
	(set-goal enemy-goal2 grush))
(defrule
	(up-compare-goal enemy-goal2 == grush)
=>
	(chat-to-player my-player-number "The enemy might try to perform a grush.")
	(up-chat-data-to-player every-ally "My target-enemy (P%d) seems to be going for" s: sn-target-player-number)
	(up-chat-data-to-player every-ally "galleys in the feudal-age." s: sn-target-player-number)
	(disable-self))
(defrule
	(up-compare-goal enemy-goal2 == grush)
(or	(game-time >= 1800)
;(or	(goal dreitc yes)
(or	(and	(players-unit-type-count target-player galley-line < 3)
		(players-building-type-count target-player dock < 3))
(or	(up-compare-goal navycount >= 10)
	(strategic-number sn-military-superiority >= 1))));)
=>
	(set-goal enemy-goal2 0))

(defrule
;cuscon	(resource-found wood)
	(strategic-number sn-current-age >= fcastlea)
(or	(strategic-number sn-current-age >= imperial)
(or	(unit-type-count-total villager >= 50)
(or	(unit-type-count villager-wood >= 24); 18
(or	(goal dreitc yes);
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop))))))
=>
	(enable-timer upwood 2)
	(disable-self))

(defrule
(or	(civilian-population >= up-max-civ)
(or	(population >= max-civ-pop)
	(and	(unit-type-count-total 213 < 3); Dead female builder
		(unit-type-count-total 225 < 3)))); Dead male builder
	(building-type-count town-center >= 1)
	(strategic-number sn-percent-building-cancellation > 15)
=>
	(set-strategic-number sn-percent-building-cancellation 15))

(defrule
	(civilian-population < up-max-civ)
	(population < max-civ-pop)
(or	(unit-type-count-total 213 >= 3); Dead female builder
	(unit-type-count-total 225 >= 3)); Dead male builder
	(building-type-count town-center >= 1)
	(strategic-number sn-percent-building-cancellation < 100)
=>
	(set-strategic-number sn-percent-building-cancellation 100)
;	(chat-local-to-self "Resetting townsize."); test
;	(set-strategic-number sn-maximum-town-size 12)
)
(defrule
(or	(and	(up-pending-objects c: town-center >= 1)
		(up-enemy-units-in-town >= 16))
	(and	(building-type-count town-center <= 0)
		(building-type-count-total town-center >= 1)))
	(strategic-number sn-percent-building-cancellation > 0)
=>
	(set-strategic-number sn-percent-building-cancellation 0))

(defrule
(or	(up-projectile-detected projectile-castle < 18000)
	(up-projectile-detected projectile-bombard-tower < 18000))
	(goal retargetenemy yes)
=>
	(set-strategic-number sn-free-siege-targeting 0))

(defrule
	(up-compare-const dm-building == stable)
	(goal allowdmstable no)
=>
	(set-goal allowdmstable yes))
(defrule
	(up-compare-const dm-building == archery-range)
	(goal allowdmarchery no)
=>
	(set-goal allowdmarchery yes))
(defrule
	(up-compare-const dm-building == barracks)
	(goal allowdmbarracks no)
=>
	(set-goal allowdmbarracks yes))
(defrule
(or	(and	(building-type-count-total stable >= number-stables)
		(building-type-count-total stable >= 1))
(or	(building-type-count-total archery-range >= number-archery-ranges)
	(building-type-count-total barracks >= number-barracks)))
(or	(goal allowdmstable no)
(or	(goal allowdmarchery no)
	(goal allowdmbarracks no)))
=>
	(set-goal allowdmstable yes)
	(set-goal allowdmarchery yes)
	(set-goal allowdmbarracks yes))

(defrule
(or	(and	(building-type-count town-center < 1)
		(building-available town-center))
	(and	(up-compare-goal relocating >= 1)
		(and	(population < up-max-civ)
			(population < 20)))); 33
=>
	(set-strategic-number sn-object-repair-level 0))
(defrule
(or	(unit-type-count 156 >= 6); 5
(or	(unit-type-count 222 >= 6); 5
;(or	(and	(unit-type-count 156 >= 3); 2
;		(unit-type-count 222 >= 3)); 3
;(or
	(and	(unit-type-count 156 >= 3); 3
		(unit-type-count 222 >= 3)); 2
;	(goal attacking yes)))
))
	(goal attacking yes); test
	(strategic-number sn-object-repair-level >= 20000)
=>
	(up-modify-sn sn-object-repair-level c:- 16384)); hmm

(defrule
(or	(up-pending-objects c: stone-wall-line >= 1)
;nn(or	(up-pending-objects c: 939 >= 1); gate
	(up-pending-objects c: palisade-wall >= 1));)
	(strategic-number sn-disable-builder-assistance != 0)
=>
	(set-strategic-number sn-disable-builder-assistance 0)
	(chat-local-to-self "Enabling builder assistance."))
(defrule
	(up-pending-objects c: stone-wall-line <= 0)
;nn	(up-pending-objects c: 939 <= 0); gate
	(up-pending-objects c: palisade-wall <= 0)
	(strategic-number sn-disable-builder-assistance != 1)
=>
	(set-strategic-number sn-disable-builder-assistance 1)
	(chat-local-to-self "Disabling builder assistance."))

(defrule
(nor	(up-pending-placement c: lumber-camp)
(or	(up-pending-placement c: town-center)
	(up-pending-placement c: town-center-foundation)))
	(strategic-number sn-allow-adjacent-dropsites != 0)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0))
(defrule
(or	(up-pending-placement c: lumber-camp)
(or	(up-pending-placement c: town-center)
	(up-pending-placement c: town-center-foundation)))
	(strategic-number sn-allow-adjacent-dropsites != 1)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1))

(defrule
	(building-type-count-total mining-camp < 15)
	(strategic-number sn-dropsite-separation-distance != 6)
=>
	(set-strategic-number sn-dropsite-separation-distance 6))
(defrule
	(building-type-count-total mining-camp >= 15)
	(strategic-number sn-dropsite-separation-distance != 10); 12
=>
	(set-strategic-number sn-dropsite-separation-distance 10)); 12
(defrule
	(game-time >= 3600)
	(dropsite-min-distance gold <= -1)
	(dropsite-min-distance stone <= -1)
	(dropsite-min-distance wood <= -1)
	(strategic-number sn-dropsite-separation-distance != 50)
=>
	(set-strategic-number sn-dropsite-separation-distance 50))

(defrule
	(strategic-number sn-filter-under-attack != 0)
=>
	(set-strategic-number sn-filter-under-attack 0))

(defrule
	(up-compare-goal relocating == yes)
=>
	(set-goal relocating 4))
(defrule
	(up-compare-goal relocating >= yes)
(or	(population >= max-civ-pop)
	(civilian-population >= up-max-civ))
;	(building-type-count town-center >= 1)
=>
	(set-goal relocating no))
(defrule
	(game-time > 300)
(or	(and	(goal nomad no)
		(goal landnomad no))
	(game-time > 600))
	(building-type-count town-center <= 0)
	(unit-type-count villager >= 1);
	(up-compare-goal relocating <= no)
=>
	(chat-local-to-self text-relocating); "Relocating."
	(set-goal relocating yes)
	(disable-self)); for now
(defrule
	(timer-triggered one-min)
	(goal nomad no)
	(goal landnomad no)
	(building-type-count town-center >= 1)
	(up-compare-goal relocating <= no)
=>
	(up-get-point position-self temporary-point-x)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal))
(defrule
	(timer-triggered one-min)
	(goal nomad no)
	(goal landnomad no)
	(up-compare-goal targetdistance >= 45); test
	(up-compare-goal temporary-goal >= 26); 21
	(building-type-count town-center >= 1)
	(up-compare-goal relocating <= no)
=>
	(chat-local-to-self text-relocating); "Relocating."
	(set-goal relocating yes)
	(disable-self)); for now ; end jump

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-military-superiority)
	(up-modify-goal temporary-goal c:* 8)
;	(up-modify-goal temporary-goal s:+ target-military-superiority)
	(up-modify-goal temporary-goal2 g:= my-mpop)
	(up-modify-goal temporary-goal2 g:+ navycount); y
	(up-modify-goal temporary-goal2 c:/ 5)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal temporary-goal3 g:= attackmethod); TSA = 0 - Groups = 1
	(up-modify-goal temporary-goal3 c:* 5)
	(up-modify-goal temporary-goal g:+ temporary-goal3)
	(up-modify-goal temporary-goal c:max 8); 0; 8
	(up-modify-goal temporary-goal c:min 24); 20; 32
	(up-modify-sn sn-enemy-sighted-response-distance g:= temporary-goal))
(defrule
	(goal attacking no)
	(up-projectile-detected projectile-fortification < 10000); 18000
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(up-jump-rule 3))
(defrule
(or	(up-timer-status unit-control-flare-timer2 == timer-running)
(or	(goal patrolhelp yes)
(or	(goal patroldefense yes)
(or	(up-compare-goal attacking != yes)
	(warboat-count >= 2)))))
=>
	(up-jump-rule 2))
(defrule
(or	(goal strategy r-flush)
(or	(goal strategy a-rush)
(or	(goal strategy ca-rush)
	(and	(goal strategy castledrop)
		(or	(up-compare-const uu-type == archer-uu)
			(up-compare-const uu-type == powder-uu))))))
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(up-jump-rule 1))
(defrule
(or	(unit-type-count-total scorpion-class >= 6)
(or	(unit-type-count-total archery-class >= 6)
(or	(unit-type-count-total cavalry-archer-class >= 6)
(or	(unit-type-count-total slinger >= 6)
(or	(unit-type-count-total elephant-archer >= 6)
(or	(unit-type-count-total genoese-crossbowman >= 6)
(or	(unit-type-count-total archery-cannon-class >= 6)
	(unit-type-count-total cavalry-cannon-class >= 6))))))))
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0))
;(defrule
;	(goal attacking yes)
;	(strategic-number sn-enemy-sighted-response-distance < 12); 20
;=>
;	(set-strategic-number sn-enemy-sighted-response-distance 12)); 20
;(defrule
;	(goal attacking no)
;	(strategic-number sn-enemy-sighted-response-distance > 8)
;=>
;	(set-strategic-number sn-enemy-sighted-response-distance 8))

(defrule
(or	(up-pending-placement c: market)
	(up-pending-objects c: market >= 1))
	(strategic-number sn-placement-fail-delta != 0)
=>
	(set-strategic-number sn-placement-fail-delta 0))
;(defrule
;(not	(up-pending-placement c: market))
;	(up-pending-objects c: market <= 0)
;	(strategic-number sn-placement-fail-delta != 1)
;=>
;	(set-strategic-number sn-placement-fail-delta 1))
(defrule
	(game-time >= 14)
	(goal increase-ts 0)
	(up-compare-flag escrow-flag2 != 524288); town-center
	(up-compare-flag escrow-flag2 != 1048576); market
	(up-compare-flag escrow-flag2 != 2097152); siege-workshop
	(up-compare-flag escrow-flag2 != 4194304); castle
	(strategic-number sn-placement-zone-size != 9)
=>
	(set-strategic-number sn-placement-zone-size 9)); 20

(defrule
	(game-time >= 1650)
(or	(game-time >= 2250)
(or	(building-type-count-total mining-camp >= 5)
	(and	(game-time >= 1950)
		(building-type-count-total town-center >= 3))))
	(strategic-number sn-defer-dropsite-update == 0)
=>
	(set-strategic-number sn-defer-dropsite-update 1))

(defrule
	(up-pending-objects c: mill == 0)
(not	(up-pending-placement c: mill))
;	(up-compare-goal forage-count <= 0)
;(or	(cc-players-unit-type-count 0 forage-bush <= 0)
	(up-gaia-type-count c: shore-fish-class >= 1);)
	(cc-players-unit-type-count 0 shore-fish-class >= 1)
	(strategic-number sn-preferred-mill-placement != 2)
=>
	(set-strategic-number sn-preferred-mill-placement 2))
(defrule
	(up-pending-objects c: mill == 0)
(not	(up-pending-placement c: mill))
;	(up-compare-goal forage-count <= 0)
;(or	(cc-players-unit-type-count 0 forage-bush <= 0)
	(dropsite-min-distance deer-hunting <= 26);)
	(strategic-number sn-preferred-mill-placement != 1)
=>
	(set-strategic-number sn-preferred-mill-placement 1))
(defrule
	(up-pending-objects c: mill == 0)
(not	(up-pending-placement c: mill))
(or	(and	(up-gaia-type-count c: shore-fish-class <= 0)
		(dropsite-min-distance deer-hunting > 26))
(or	(up-compare-goal forage-count >= 1)
	(cc-players-unit-type-count 0 forage-bush >= 1)))
	(strategic-number sn-preferred-mill-placement != 0)
=>
	(set-strategic-number sn-preferred-mill-placement 0))


;(defrule
;	(goal fishing yes)
;	(building-type-count-total dock < 1)
;	(wood-amount <= 250)
;(or	(game-time < 60)
;	(unit-type-count villager-food >= 5))
;(or	(up-compare-goal mysheep >= 1)
;	(dropsite-min-distance hunting c:<= 7))
;=>
;	(up-jump-rule 5))
(defrule
	(goal strategy drush)
	(game-time < 600)
	(unit-type-count villager-forager <= 0)
(or	(unit-type-count villager < 20)
	(strategic-number sn-current-age <= dark))
	(building-type-count-total barracks < 1)
	(wood-amount < 275)
(or	(game-time < 60)
(or	(up-compare-goal mysheep >= 2)
;(or
	(dropsite-min-distance hunting <= 6)
;	(unit-type-count villager-food >= 5))
))
=>
	(up-jump-rule 4))
(defrule
	(unit-type-count villager < 16)
	(unit-type-count villager-forager <= 0)
;(or	(and	(unit-type-count villager-food < 10)
;		(unit-type-count villager >= 10))
(or	(game-time < 25); 30
(or	(and	(dropsite-min-distance boar-hunting <= 34)
		(and	(up-compare-goal villagercount g:>= minBoar);	(unit-type-count villager >= 8); 10
			(strategic-number sn-enable-boar-hunting >= 1)))
(or	(and	(dropsite-min-distance deer-hunting <= 6)
		(up-compare-goal mysheep >= 2)); 1
	(up-compare-goal mysheep >= 4))));); 5
=>
	(up-jump-rule 2))
(defrule
	(goal map water)
(or	(strategic-number sn-current-age >= dfeudal)
(or	(and	(unit-type-count villager-food < 1)
		(game-time >= 25)); 30
(or	(building-type-count-total dock >= 1)
	(and	(and	(unit-type-count villager-food < 7)
			(unit-type-count villager >= 7))
		(food-amount < 100)))))
	(up-compare-goal buildmill != yes)
=>
;	(up-retask-gatherers wood c: 7)
;	(chat-local-to-self "Mill allowed.")
	(set-goal buildmill yes))
(defrule
	(goal map land)
(or	(strategic-number sn-current-age >= dfeudal)
(or	(and	(unit-type-count villager-food < 1)
		(game-time >= 25)); 30
(or	(building-type-count-total lumber-camp >= 1)
	(and	(and	(unit-type-count villager-food < 7)
			(unit-type-count villager >= 7))
		(food-amount < 100)))))
	(up-compare-goal buildmill != yes)
=>
;	(up-retask-gatherers wood c: 7)
;	(chat-local-to-self "Mill allowed.")
	(set-goal buildmill yes))
(defrule
(or	(game-time >= 25); 30
	(building-type-count-total farm >= 1))
(or	(and	(building-type-count-total lumber-camp >= 1)
		(wood-amount >= 190))
(or	(wood-amount >= 400); new
(or	(game-time >= 300);	(dropsite-min-distance food > 5)
(or	(unit-type-count villager-forager >= 1)
	(building-type-count-total farm >= 1)))))
	(up-compare-goal buildmill != yes)
=>
;	(up-retask-gatherers wood c: 7)
;	(chat-local-to-self "Mill allowed.")
	(set-goal buildmill yes))

(defrule
	(game-time >= 60)
	(dropsite-min-distance wood > 7)
	(wood-amount < 200)
	(strategic-number sn-wood-gatherer-percentage < 5)
	(building-type-count-total mill <= 0)
	(building-type-count-total lumber-camp <= 0)
	(building-type-count-total town-center >= 1)
	(goal buildmill yes)
=>
	(set-goal buildmill no))
(defrule
	(game-time < 120); 126
	(up-compare-goal mysheep >= 3); 1
;	(unit-type-count villager-forager <= 0)
	(unit-type-count villager <= 9)
	(building-type-count-total mill <= 0)
	(building-type-count-total lumber-camp <= 0)
	(building-type-count-total town-center >= 1)
	(goal buildmill yes)
=>
	(set-goal buildmill no))


(defrule
(or	(goal buildlumber yes)
(or	(game-time < 18)
	(and	(not	(resource-found wood))
		(game-time < 30)))); 20
=>
	(up-jump-rule 3))
(defrule; nfish
(or	(game-time >= 180); 90
(or	(wood-amount >= 230); 260
	(dropsite-min-distance wood >= 6))); 5
(or	(building-type-count-total mill >= 1)
(or	(goal strategy drush)
(or	(strategic-number sn-wood-gatherer-percentage >= 5)
(or	(unit-type-count villager >= 9)
	(unit-type-count villager-wood g:>= villagercount)))))
=>
	(set-goal buildlumber yes))
(defrule
	(game-time >= 30)
	(wood-amount >= 400)
	(food-amount >= 1200)
	(building-type-count-total lumber-camp <= 0)
	(building-type-count-total town-center >= 1)
=>
	(set-goal buildlumber yes))
(defrule
;(or
	(dropsite-min-distance boar-hunting < 8)
(or	(and	(dropsite-min-distance deer-hunting < 8)
		(strategic-number sn-enable-boar-hunting == 1))
	(up-compare-goal mysheep >= 2));); 3
	(building-type-count-total lumber-camp <= 0)
	(strategic-number sn-wood-gatherer-percentage >= 5)
	(building-type-count-total town-center >= 1)
=>
	(set-goal buildlumber yes)); end jump

(defrule
	(strategic-number sn-wood-gatherer-percentage <= 4)
	(building-type-count-total mill <= 0)
	(building-type-count-total lumber-camp <= 0)
	(unit-type-count villager < 9)
(or	(unit-type-count villager-wood g:< villagercount)
	(dropsite-min-distance wood < 5)); test
;	(unit-type-count villager-wood < 1)
	(wood-amount < 230); 260
	(up-compare-goal buildlumber != no)
=>
	(set-goal buildlumber no)
	(set-goal buildmill yes))
(defrule
	(building-type-count-total mill <= 0)
	(up-compare-goal buildmill == yes)
	(wood-amount < 230); 260
	(up-compare-goal buildlumber != no)
=>
	(set-goal buildlumber no))


(defrule
	(strategic-number sn-current-age >= imperial)
	(game-time < 360); 330
	(death-match-game)
	(unit-type-count-total villager < 32)
(nand	(unit-type-count villager >= 16)
	(unit-type-count villager-builder < 8))
=>
	(set-goal buildmill no)
	(set-goal buildlumber no))



(defrule
(nor	(civ-selected hun)
(or	(civ-selected mayan)
(or	(housing-headroom >= 2)
(or	(unit-type-count villager-builder >= 2)
	(building-type-count house >= 1)))))
	(wood-amount >= 30)
	(game-time < 30)
	(building-type-count-total town-center >= 1)
;	(food-amount >= 50)
=>
	(up-jump-rule 2))
(defrule
	(true)
=>
	(set-strategic-number sn-maximum-food-drop-distance 6)
	(set-strategic-number sn-maximum-wood-drop-distance 20)
	(set-strategic-number sn-maximum-gold-drop-distance 12)
	(set-strategic-number sn-maximum-stone-drop-distance 12)
	(set-strategic-number sn-maximum-hunt-drop-distance 4);
	(disable-self))
(defrule
(or	(dropsite-min-distance wood > 5); test
(or	(goal buildmill yes)
(or	(and	(unit-type-count villager >= 6)
		(unit-type-count villager-food < 6))
	(and	(unit-type-count villager >= 7)
		(unit-type-count villager-food < 7)))))
(or	(building-type-count-total mill < 1)
	(game-time >= 90))
	(strategic-number sn-maximum-food-drop-distance < 14)
=>
;	(chat-local-to-self "Maximum-food-drop-distance: 14.")
	(set-strategic-number sn-maximum-food-drop-distance 14))
(defrule
(or	(building-type-count-total mill >= 1)
	(up-compare-goal mysheep >= 3))
(or	(strategic-number sn-maximum-food-drop-distance < 8)
	(and	(game-time < 60)
		(strategic-number sn-maximum-food-drop-distance > 8)))
=>
;	(chat-local-to-self "Maximum-food-drop-distance: 8.")
	(set-strategic-number sn-maximum-food-drop-distance 8))

(defrule
	(strategic-number sn-dock-training-filter != 1)
	(current-age == feudal-age)
=>
	(set-strategic-number sn-dock-training-filter 1))
(defrule
	(strategic-number sn-dock-training-filter != 2)
	(current-age >= castle-age)
=>
	(set-strategic-number sn-dock-training-filter 2))
(defrule
	(strategic-number sn-dock-training-filter != 0)
	(goal islands yes)
	(up-compare-goal navycount <= minNavy)
	(up-compare-goal excessWood >= 200)
=>
	(set-strategic-number sn-dock-training-filter 0)); train ships everywhere
(defrule
	(strategic-number sn-dock-training-filter != 0)
(or	(goal islands yes)
	(and	(up-compare-goal strategy-type2 == water)
		(and	(up-compare-goal navycount <= 0)
			(players-building-type-count every-enemy dock <= 0)))); test
	(population >= del-civ-pop); max pop
	(unit-type-count-total transport-ship <= 0)
;	(up-compare-goal navycount <= 0)
	(wood-amount >= 125)
=>
	(set-strategic-number sn-dock-training-filter 0)); train ships everywhere

(defrule
(or	(unit-type-count-total 178 >= 3); Dead trade cart (empty)
	(unit-type-count-total 205 >= 3)); Dead trade cart (full)
	(strategic-number sn-preferred-trade-distance > 60)
;	(up-compare-const preftradedist > 60)
=>
	(set-strategic-number sn-preferred-trade-distance 60))

(defrule
	(unit-type-count-total 178 <= 0); Dead trade cart (empty)
	(unit-type-count-total 205 <= 0); Dead trade cart (full)
	(strategic-number sn-preferred-trade-distance < preftradedist)
=>
	(set-strategic-number sn-preferred-trade-distance preftradedist))


(defrule
	(goal escrowing no)
(or	(escrow-amount wood >= 1)
(or	(escrow-amount food >= 1)
(or	(escrow-amount gold >= 1)
	(escrow-amount stone >= 1))))
=>
	(chat-to-player my-player-number "Debugging escrow.")
	(set-goal temporary-goal 48353)
	(up-jump-rule 4))
(defrule
;	(goal escrowing no)
	(timer-triggered embassy); hmm
	(unit-type-count-total villager <= 0)
(or	(escrow-amount wood >= 1)
(or	(escrow-amount food >= 1)
(or	(escrow-amount gold >= 1)
	(escrow-amount stone >= 1))))
=>
	(chat-to-player my-player-number "Debugging escrow2.")
	(set-goal temporary-goal 48353)
	(up-jump-rule 3))
(defrule
;	(goal escrowing no)
	(timer-triggered embassy); hmm
	(building-type-count-total town-center >= 1)
	(unit-type-count-total villager >= 2)
	(escrow-amount wood >= 30)
	(up-pending-objects c: house == 0)
	(housing-headroom <= 0)
	(population-headroom > 0)
=>
	(chat-to-player my-player-number "Debugging escrow3.")
	(set-goal temporary-goal 48353)
	(up-jump-rule 2))
(defrule
;	(goal escrowing no)
	(timer-triggered embassy); hmm
	(building-type-count-total town-center >= 1)
	(unit-type-count-total villager >= 2)
	(escrow-amount wood > 100); maybe a lc in the future?
	(unit-type-count villager-food < 1)
	(building-type-count-total farm < 1)
	(food-amount < 50)
=>
	(chat-to-player my-player-number "Debugging escrow4.")
	(set-goal temporary-goal 48353)
	(up-jump-rule 1))
(defrule
;	(goal escrowing no)
(or	(escrow-amount wood >= 5000)
(or	(escrow-amount food >= 5000)
(or	(escrow-amount gold >= 5000)
	(escrow-amount stone >= 5000))))
=>
	(chat-to-player my-player-number "Debugging escrow5.")
	(set-goal temporary-goal 48353))
(defrule
	(goal temporary-goal 48353)
=>
	(up-reset-cost-data cost-food)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	(up-release-escrow)
	(set-goal escrow-flag 0)
	(set-goal escrow-flag2 0))

(defrule
(not	(town-under-attack))
	(goal escrowing no)
	(goal queue yes)
;test	(current-age >= castle-age)
	(strategic-number sn-enable-training-queue != 1)
=>
	(set-strategic-number sn-enable-training-queue 1))
;(defrule
;	(town-under-attack)
;	(current-age >= castle-age)
;	(strategic-number sn-enable-training-queue != 0)
;=>
;	(set-strategic-number sn-enable-training-queue 0))

;(defrule
;	(goal queue yes)
;	(strategic-number sn-current-age == dark)
;;(or
;	(up-compare-goal strategy-type == feudal-war)
;;	(goal enemy-goal flush))
;	(up-compare-goal total-food-amount >= 460); 440
;;(or	(up-compare-goal total-food-amount >= 500)
;(or	(unit-type-count-total villager >= 25)
;	(and	(up-compare-goal total-food-amount >= 480); 470
;		(unit-type-count-total villager >= 22)));)
;	(research-available feudal-age)
;	(strategic-number sn-enable-training-queue != 0)
;=>
;	(set-goal queue no)
;	(set-strategic-number sn-enable-training-queue 0))
;(defrule
;	(goal queue yes)
;	(strategic-number sn-current-age == dark)
;	(up-compare-goal strategy == s-flush)
;	(up-compare-goal total-food-amount >= 440); 420
;;(or	(up-compare-goal total-food-amount >= 500)
;(or	(unit-type-count-total villager >= 23)
;	(and	(up-compare-goal total-food-amount >= 470); 460
;		(unit-type-count-total villager >= 22)));)
;	(research-available feudal-age)
;	(strategic-number sn-enable-training-queue != 0)
;=>
;	(set-goal queue no)
;	(set-strategic-number sn-enable-training-queue 0))
;(defrule
;	(goal queue yes)
;	(strategic-number sn-current-age == dark)
;(or	(and	(up-compare-goal total-food-amount >= 1300);(food-amount >= 1000); 1100
;		(unit-type-count-total villager >= 10))
;	(and	(up-compare-goal total-food-amount >= 1035);(food-amount >= 800); 900
;		(unit-type-count-total villager >= 15)))
;	(research-available feudal-age)
;	(strategic-number sn-enable-training-queue != 0)
;=>
;	(set-goal queue no)
;	(set-strategic-number sn-enable-training-queue 0))
(defrule
	(goal queue no)
	(current-age == dark-age)
	(strategic-number sn-current-age > dark)
;	(strategic-number sn-enable-training-queue != 1)
=>
	(set-goal queue yes)
	(set-strategic-number sn-enable-training-queue 1)
	(disable-self))
(defrule
	(strategic-number sn-current-age == feudal)
	(goal queue no)
(or	(food-amount < castle-f2)
	(gold-amount < castle-g2))
	(strategic-number sn-enable-training-queue != 1)
=>
	(set-goal queue yes)
	(set-strategic-number sn-enable-training-queue 1))
(defrule
	(goal queue yes)
;	(current-age == feudal-age)
;	(strategic-number sn-current-age == feudal)
	(research-available castle-age)
	(up-compare-goal total-food-amount >= castle-food);(food-amount >= castle-food)
	(gold-amount >= castle-gold)
;	(building-type-count-total blacksmith >= 1)
	(strategic-number sn-enable-training-queue != 0)
=>
	(set-goal queue no)
	(set-strategic-number sn-enable-training-queue 0))
(defrule
	(goal queue no)
	(current-age == feudal-age)
	(strategic-number sn-current-age > feudal)
;	(strategic-number sn-enable-training-queue != 1)
=>
	(set-goal queue yes)
	(set-strategic-number sn-enable-training-queue 1)
	(disable-self))
(defrule
	(strategic-number sn-current-age == castlea)
	(goal queue no)
(or	(food-amount < imperial-f2)
	(gold-amount < imperial-g2))
	(strategic-number sn-enable-training-queue != 1)
=>
	(set-goal queue yes)
	(set-strategic-number sn-enable-training-queue 1))
(defrule
	(goal queue yes)
;	(strategic-number sn-current-age == castlea)
	(food-amount >= imperial-food)
	(gold-amount >= imperial-gold)
;(or	(building-type-count castle >= 1)
;(or	(building-type-count university >= 1)
;	(building-type-count siege-workshop >= 1)))
	(research-available imperial-age)
	(strategic-number sn-enable-training-queue != 0)
=>
	(set-goal queue no)
	(set-strategic-number sn-enable-training-queue 0))
(defrule
	(strategic-number sn-current-age >= imperial)
	(strategic-number sn-enable-training-queue != 1)
=>
	(set-goal queue yes)
	(set-strategic-number sn-enable-training-queue 1))


(defrule
(or	(up-compare-goal escrow-flag != 0)
	(up-compare-goal escrow-flag2 != 0))
	(up-compare-flag escrow-flag2 != 2097152); siege-workshop
	(up-compare-flag escrow-flag2 != 524288); town-center
	(up-compare-flag escrow-flag2 != 4194304); castle
	(up-compare-goal escrow-flag2 != 1); double-bit-axe
	(up-compare-goal escrow-flag2 != 2); bow-saw
	(up-compare-goal escrow-flag2 != 4); horse-collar
	(up-compare-goal escrow-flag2 != 8); heavy-plow
	(up-compare-goal escrow-flag2 != 1024); chemistry
	(up-compare-goal escrow-flag2 != 2048); ballistics
	(up-compare-goal escrow-flag2 != 1048576); market
	(up-compare-goal escrow-flag2 != 512); ri-bracer
	(up-compare-goal escrow-flag2 != 256); ri-bodkin-arrow
=>
	(set-goal temporary-goal 58885))
(defrule
	(goal temporary-goal 58885)
	(up-compare-goal escrow-flag2 != 8388608); mangonel-line
	(up-compare-goal escrow-flag2 != 128); ri-fletching
	(up-compare-goal escrow-flag2 != 4096); ri-scale-mail
	(up-compare-goal escrow-flag2 != 8192); ri-chain-mail
	(up-compare-goal escrow-flag2 != 16384); ri-plate-mail
	(up-compare-goal escrow-flag2 != 16); ri-scale-barding
	(up-compare-goal escrow-flag2 != 32); ri-chain-barding
	(up-compare-goal escrow-flag2 != 64); ri-plate-barding
	(strategic-number sn-enable-training-queue != 0)
=>
	(set-strategic-number sn-enable-training-queue 0))


(defrule
	(game-time < 900)
	(building-type-count archery-range == 1)
	(building-type-count-total archery-range >= 2)
(or	(gold-amount < 140)
	(and	(goal sk-var yes)
		(food-amount < 100)))
	(up-compare-goal strategy-type <= feudal-war)
	(strategic-number sn-current-age <= feudal)
	(strategic-number sn-enable-training-queue != 0)
=>
	(set-strategic-number sn-enable-training-queue 0))






(defrule
(or	(and	(population < max-pop)
		(population <= siege-pop))
(or	(gold-amount < 100)
(or	(goal researchplan no)
	(strategic-number sn-percent-attack-soldiers < 100))))
	(strategic-number sn-warship-targeting-mode != 1)
=>
	(set-strategic-number sn-warship-targeting-mode 1))
(defrule
	(population >= max-pop)
	(gold-amount >= 200)
	(goal researchplan yes)
	(strategic-number sn-percent-attack-soldiers == 100)
	(strategic-number sn-warship-targeting-mode != 0)
=>
	(set-strategic-number sn-warship-targeting-mode 0))

(defrule
(or	(not	(up-pending-placement c: town-center))
	(timer-triggered MSuperiority)); embassy
	(strategic-number sn-town-center-placement != 0)
=>
	(set-strategic-number sn-town-center-placement 0))


(defrule
	(goal researchplan no)
(or	(up-research-status c: ri-paladin >= research-pending)
(or	(up-research-status c: ri-champion >= research-pending)
	(up-research-status c: my-unique-research >= research-pending)))
=>
	(set-goal researchplan yes))





(defrule
;(or	(players-building-type-count every-ally market <= 0)
	(up-timer-status MSuperiority != timer-running); increase performance by avoiding constant checking
=>
	(up-jump-rule 6))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal remote-last 0))
(defrule
	(strategic-number sn-focus-player-number != my-player-number)
	(stance-toward focus-player ally)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 on-mainland)
	(up-find-remote c: market c: 1)
	(up-get-search-state local-total))
(defrule
	(goal remote-last 0)
	(strategic-number sn-focus-player-number < 8);	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
	(goal remote-last 1)
	(players-building-type-count any-ally market > 0)
	(goal tradecarts no)
=>
	(set-goal tradecarts yes))
(defrule
(or	(players-building-type-count every-ally market <= 0)
	(goal remote-last 0))
	(goal tradecarts yes)
=>
	(set-goal tradecarts no)); end jump






(defrule
	(goal retargetenemy 3)
(or	(up-compare-goal victory-time >= 2000); 3000
	(and	(players-building-type-count every-enemy wonder <= 0)
		(not	(enemy-captured-relics))))
=>
	(set-goal retargetenemy yes)
	(chat-local-to-self "Retargeting to closest enemy.")
	(set-strategic-number sn-special-attack-type1 0)
	(set-strategic-number sn-special-attack-influence1 1)
	(set-strategic-number sn-special-attack-type3 0)
	(set-strategic-number sn-special-attack-influence3 1))

#load-if-defined VICTORY-STANDARD
(defrule
	(players-building-count any-enemy > 0)
	(enemy-captured-relics)
	(up-compare-goal victory-time < 2000); 200 years ?
	(up-compare-goal victory-time >= 0)
	(up-compare-goal retargetenemy != 3)
=>
	(up-modify-sn sn-focus-player-number g:= winning-player)
	(up-modify-sn sn-target-player-number g:= winning-player)
	(set-strategic-number sn-special-attack-type1 1)
	(set-strategic-number sn-special-attack-influence1 100); 10000
	(chat-local-to-self "Retargeting to player with relics.")
	(set-goal retargetenemy 3)); blocks retargeting to closest player

(defrule
	(players-building-count any-enemy > 0)
	(players-building-type-count target-player wonder == 0)
	(players-building-type-count any-enemy wonder > 0)
	(up-compare-goal victory-time < 2000)
	(up-compare-goal victory-time >= 0)
	(up-compare-goal retargetenemy != 3)
=>
	(up-get-player-fact this-any-enemy player-number 0 temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-strategic-number sn-special-attack-type3 1)
	(set-strategic-number sn-special-attack-influence3 100); 10000
	(chat-local-to-self "Retargeting to player with wonder.")
	(set-goal retargetenemy 3)); blocks retargeting to closest player

(defrule
	(goal retargetenemy 3)
	(up-compare-goal victory-time >= 0)
	(up-compare-goal victory-time < 1500)
(or	(population >= max-pop)
	(up-compare-goal victory-time < 750))
	(goal underattack no)
(or	(and	(up-building-type-in-town c: wonder == 0)
		(players-building-type-count target-player wonder > 0))
	(and	(enemy-captured-relics)
		(up-building-type-in-town c: monastery == 0)))
	(goal attacking no)
=>
	(set-goal attacking yes);max-ts?
;	(up-reset-unit c: -1)
)

(defrule
	(goal attacking yes)
	(up-compare-goal victory-time >= 0)
	(up-compare-goal victory-time < 3000)
	(players-building-type-count any-enemy wonder > 0); focus-player
(not	(stance-toward focus-player ally))
	(unit-type-count battering-ram-line >= 1)
	(timer-triggered one-min);	(timer-triggered retask-timer); every 180 once c=>i
=>
	(up-full-reset-search)
	(up-find-local c: battering-ram-line c: 1); 4
;	(up-filter-include cmdid-military -1 -1 -1)
;	(up-find-local c: all-units-class c: 20)
;	(up-filter-include -1 -1 -1 -1)
	(up-find-remote c: wonder c: 1)
	(up-target-objects 0 action-patrol -1 stance-aggressive))
(defrule
	(goal attacking yes)
	(up-compare-goal victory-time >= 0)
	(up-compare-goal victory-time < 3000)
	(enemy-captured-relics)
	(players-building-type-count focus-player monastery > 0)
(not	(stance-toward focus-player ally))
	(unit-type-count battering-ram-line >= 1)
	(timer-triggered one-min);	(timer-triggered retask-timer); every 180 once c=>i
=>
	(up-full-reset-search)
	(up-find-local c: battering-ram-line c: 1)
;	(up-filter-include cmdid-military -1 -1 -1)
;	(up-find-local c: all-units-class c: 20)
;	(up-filter-include -1 -1 -1 -1)
	(up-find-remote c: monastery c: 1)
	(up-target-objects 0 action-patrol -1 stance-aggressive))
#end-if

(defrule
(or	(strategic-number sn-focus-player-number >= 9)
(or	(strategic-number sn-focus-player-number <= 0)
(or	(not	(player-in-game focus-player))
	(stance-toward focus-player ally))))
	(strategic-number sn-target-player-number != 0); none
=>
	(set-goal retargetenemy yes)
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
;	(chat-to-player my-player-number "Debugging focus/target-player. 0"); usually after an enemy resigned
)

#load-if-not-defined ARCHIPELAGO-MAP
#load-if-not-defined BALTIC-MAP
#load-if-not-defined CONTINENTAL-MAP
#load-if-not-defined CRATER-LAKE-MAP
#load-if-not-defined HIGHLAND-MAP
#load-if-not-defined MEDITERRANEAN-MAP
#load-if-not-defined MIGRATION-MAP
#load-if-not-defined NOMAD-MAP
#load-if-not-defined RIVERS-MAP
#load-if-not-defined SALT-MARSH-MAP
#load-if-not-defined SCANDANAVIA-MAP
#load-if-not-defined YUCATAN-MAP
#load-if-not-defined OASIS-MAP
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE
;#load-if-not-defined UP-NOMAD-STYLE
;#load-if-not-defined CUSTOM-MAP
(defrule
(nor	(up-compare-goal strategy == krush)
	(and	(up-compare-goal strategy == castledrop)
		(up-compare-const uu-type == cavalry-uu)))
=>
	(up-jump-rule 7))
(defrule
(or	(players-current-age every-enemy != feudal-age)
(or	(up-timer-status embassy == timer-running)
(or	(military-population < 4)
(or	(goal underattack yes)
(or	(up-compare-goal position-goal != pocket)
(or	(game-time < 900)
(or	(game-time >= 1800)
	(up-compare-goal feinde <= 1))))))))
=>
	(up-jump-rule 6))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1))
(defrule
(or	(up-compare-goal enemysling >= 9)
	(and	(up-compare-goal retargetenemy != 4)
		(up-compare-goal enemysling != 0)))
=>
	(set-goal enemysling 0))
(defrule
	(goal enemysling 0)
	(goal retargetenemy yes)
	(players-current-age focus-player == feudal-age)
	(players-military-population focus-player <= 2)
	(players-building-count focus-player > 0)
	(players-building-type-count focus-player castle < 1)
	(up-allied-sn every-ally sn-target-player-number s:!= sn-focus-player-number); one, not all
	(player-in-game focus-player)
(not	(stance-toward focus-player ally));	(stance-toward focus-player enemy)
=>
	(up-modify-goal enemysling s:= sn-focus-player-number))
(defrule
	(goal enemysling 0)
	(goal retargetenemy yes)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2))
(defrule
	(up-compare-goal enemysling >= 1)
	(up-compare-goal enemysling <= 8)
	(goal retargetenemy yes)
	(players-building-count focus-player > 0)
	(players-civilian-population focus-player >= 18)
;	(players-building-type-count focus-player town-center >= 1)
	(players-current-age focus-player == feudal-age)
	(players-military-population focus-player <= 2)
	(up-allied-sn every-ally sn-target-player-number s:!= sn-focus-player-number); one, not all
=>
	(up-modify-sn sn-target-player-number g:= enemysling)
	(up-modify-sn sn-focus-player-number g:= enemysling)
;	(chat-to-player my-player-number "Targeting possible enemy sling.")
;	(chat-to-player every-ally "Targeting possible enemy sling.")
	(set-goal retargetenemy 4)); blocks retargeting to closest player
(defrule
	(strategic-number sn-focus-player-number g:!= temporary-goal)
	(up-compare-goal retargetenemy != 4)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)); end jump

(defrule
	(goal retargetenemy 4)
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
;fornow	(chat-to-player my-player-number "Debugging enemysling focus-player.")
)
(defrule
	(goal retargetenemy 4)
(or	(nor	(up-compare-goal strategy == krush)
		(and	(up-compare-goal strategy == castledrop)
			(up-compare-const uu-type == cavalry-uu)))
(or	(game-time >= 1800)
(or	(not	(player-in-game target-player))
;	(and
	(players-civilian-population target-player <= 9); 12
;		(players-building-type-count target-player town-center <= 0))
)))
=>
	(set-goal retargetenemy yes)
;	(chat-to-player my-player-number "Targeting the closest enemy again. 1")
;	(chat-to-player every-ally "Targeting the closest enemy again.")
)
(defrule
(or	(goal underattack yes)
(or	(players-current-age focus-player >= castle-age)
(or	(players-military-population focus-player >= 5)
	(up-allied-sn any-ally sn-target-player-number s:== sn-target-player-number)))); focus ; one AI on the sling is enough
	(goal retargetenemy 4)
=>
	(set-goal retargetenemy yes)
;	(chat-to-player my-player-number "Targeting the closest enemy again. 2")
;	(chat-to-player every-ally "Targeting the closest enemy again.")
)
;#end-if
;#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if



#load-if-not-defined UP-TEAM-DISADVANTAGE; hmm
(defrule
(or	(game-time >= 30); no nomad for now
(or	(goal nomad yes)
(or	(strategic-number teambalance <= 0); for now
(or	(up-compare-goal position-goal != pocket)
(or	(building-type-count town-center <= 0)
(or	(up-compare-goal cozy != 0)
	(not	(player-in-game any-ally))))))))
=>
	(up-jump-rule 2)); 6
;(defrule
;	(goal cozy 0)
;=>
;	(up-modify-goal temporary-goal s:= sn-focus-player-number)
;	(set-strategic-number sn-focus-player-number 1))
;(defrule
;	(goal cozy 0)
;	(players-building-type-count focus-player town-center > 0)
;	(player-in-game focus-player)
;	(stance-toward focus-player ally)
;=>
;	(up-full-reset-search)
;	(up-get-point position-opposite temporary-point-x)
;	(up-find-remote c: town-center c: 1)
;	(up-set-target-object search-remote c: 0)
;	(up-get-point position-object point-x)
;	(up-get-point-distance temporary-point-x point-x targetdistance)); temporary-goal2
(defrule
	(up-compare-goal targetdistance >= 1); temporary-goal2
	(up-compare-goal targetdistance < 144); 150 ; temporary-goal2
=>
	(chat-local-to-self "Not cozy.")
	(set-goal cozy -1))
;(defrule
;	(goal cozy 0)
;	(strategic-number sn-focus-player-number < 8)
;=>
;	(up-modify-sn sn-focus-player-number c:+ 1)
;	(up-jump-rule -3))
(defrule
	(goal cozy 0)
;	(strategic-number sn-focus-player-number >= 8)
=>
	(chat-local-to-self "Cozy.")
	(chat-to-allies "I feel safe.")
	(set-goal cozy 1))
;(defrule
;	(strategic-number sn-focus-player-number g:!= temporary-goal)
;=>
;	(up-modify-sn sn-focus-player-number g:= temporary-goal))
#end-if



(defrule
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
	(goal retargetenemy 4)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(chat-to-player my-player-number "Debugging cozy focus-player."))






(defrule
(or	(and	(stance-toward target-player ally); just to be sure
		(or	(player-in-game any-enemy)
			(player-in-game any-neutral)))
(or	(player-resigned target-player)
(or	(not	(player-valid target-player))
	(not	(player-in-game target-player)))))
	(player-in-game any-enemy)
=>
	(set-goal retargetenemy yes))
(defrule
(or	(and	(or	(strategic-number sn-target-player-number <= 0)
			(strategic-number sn-target-player-number >= 9))
		(players-building-count any-enemy > 0))
	(and	(players-building-count target-player <= 0)
		(players-building-count any-enemy > 0)))
	(player-in-game any-enemy)
=>
	(set-goal retargetenemy yes))



(defrule
	(up-players-in-game enemy == 1)
	(strategic-number sn-target-player-number <= 0)
	(player-in-game any-enemy)
	(players-building-count any-enemy <= 0)
=>
	(up-get-player-fact this-any-enemy player-number 0 temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(disable-self)); score
(defrule
	(goal retargetenemy yes)
	(players-building-count any-enemy >= 1)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))



#load-if-defined UP-ALLY-IN-GAME
#load-if-defined UP-MULTIPLE-ENEMIES
(defrule
(or	(players-building-count any-enemy <= 0)
	(not	(player-in-game every-enemy)))
=>
	(set-goal skip-target no)
	(up-jump-rule 4))
(defrule
(or	(up-compare-goal armytech < castlea)
(or	(goal islands yes)
(or	(up-compare-goal retargetenemy != yes)
(or	(players-building-type-count target-player town-center >= 1)
(or	(players-building-type-count target-player castle >= 1)
(or	(players-building-type-count target-player bombard-tower >= 1)
	(players-building-type-count target-player watch-tower >= 1)))))))
=>
	(set-goal skip-target no)
	(up-jump-rule 3))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-find-player enemy find-closest temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-get-focus-fact population 0 temporary-goal3)
	(up-find-next-player enemy find-closest temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-get-focus-fact population 0 temporary-goal4)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
	(up-compare-goal temporary-goal3 < 15)
	(up-compare-goal temporary-goal4 >= 40)
	(up-compare-goal temporary-goal4 g:< my-pop)
	(population >= 50)
=>
	(set-goal skip-target yes))
(defrule
(or	(up-compare-goal temporary-goal3 >= 25)
(or	(up-compare-goal temporary-goal4 < 25)
(or	(up-compare-goal temporary-goal4 g:> my-pop)
	(population < 40))))
=>
	(set-goal skip-target no))
(defrule
	(up-compare-goal skip-target == yes)
=>
	(up-find-player enemy find-closest temporary-goal);
	(up-find-next-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
#end-if
#end-if


(defrule ; debug rule
(or	(not	(player-in-game target-player))
(or	(strategic-number sn-target-player-number >= 9)
(or	(strategic-number sn-target-player-number <= 0)
(or	(players-building-count target-player <= 0)
	(stance-toward target-player ally)))))
;	(strategic-number sn-target-player-number != 0); none
=>
;	(up-chat-data-to-player my-player-number "sn-focus-player-number: %d" s: sn-focus-player-number)
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal); should be an enemy
	(up-modify-sn sn-focus-player-number g:= temporary-goal); should be an enemy
;	(chat-to-player my-player-number "Debugging init focus&target player.")
)












(defrule
(or	(goal attackprioritychange yes)
	(up-compare-goal attackStart != yes)); test
=>
	(up-modify-goal attackpriorities g:= strategy))
(defrule
	(up-compare-goal attackpriorities != drush)
	(up-compare-goal attackpriorities != grush)
	(up-compare-goal attackpriorities != s-flush)
	(up-compare-goal attackpriorities != r-flush)
	(up-compare-goal attackpriorities != a-rush)
	(up-compare-goal attackpriorities != ca-rush)
	(up-compare-goal attackpriorities != krush)
	(up-compare-goal attackpriorities != stonewall)
	(up-compare-goal attackpriorities != usual)
=>
	(set-goal attackpriorities usual)
	(set-goal attackprioritychange yes))
(defrule
(or	(and	(current-age >= imperial-age)
		(population >= max-civ-pop))
(or	(unit-type-count battering-ram-line >= 3)
(or	(unit-type-count trebuchet-set >= 2)
(or	(unit-type-count bombard-cannon >= 4)
	(up-compare-goal mangonel-set >= 16)))))
	(up-compare-goal attackpriorities != usual)
=>
	(set-goal attackpriorities usual)
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal attackStart == yes); tbs
=>
	(set-goal attackprioritychange yes))
(defrule
(or	(and	(up-compare-goal attackpriorities != drush)
		(and	(up-compare-goal attackpriorities != s-flush)
			(up-compare-goal attackpriorities != r-flush)))
	(goal attackprioritychange no))
=>
	(up-jump-rule 2))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-defense-priority c: castle c: 1000)
	(up-set-defense-priority c: bombard-tower c: 1000)
	(up-set-defense-priority c: town-center c: 6000)
	(up-set-defense-priority c: watch-tower c: 4000); market 3000
	(up-set-defense-priority c: monastery c: 9000)
	(up-set-defense-priority c: barracks c: 9000)
	(up-set-defense-priority c: stable c: 9000)
	(up-set-defense-priority c: archery-range c: 9000)
	(up-set-defense-priority c: siege-workshop c: 9000)
	(up-set-defense-priority c: lumber-camp c: 32767)
	(up-set-defense-priority c: mining-camp c: 32767)
	(up-set-defense-priority c: mill c: 10000)
	(up-set-defense-priority c: dock c: 1500))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-offense-priority c: castle c: 1)
	(up-set-offense-priority c: bombard-tower c: 1)
	(up-set-offense-priority c: town-center c: 8)
	(up-set-offense-priority c: watch-tower c: 7); market 6
	(up-set-offense-priority c: monastery c: 9)
	(up-set-offense-priority c: barracks c: 9)
	(up-set-offense-priority c: stable c: 9)
	(up-set-offense-priority c: archery-range c: 9)
	(up-set-offense-priority c: siege-workshop c: 9)
	(up-set-offense-priority c: lumber-camp c: 11)
	(up-set-offense-priority c: mining-camp c: 11)
	(up-set-offense-priority c: mill c: 10)
	(up-set-offense-priority c: dock c: 2)
	(set-goal attackprioritychange no))
(defrule
(or	(up-compare-goal attackpriorities != grush)
	(goal attackprioritychange no))
=>
	(up-jump-rule 2))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-defense-priority c: castle c: 1000)
	(up-set-defense-priority c: bombard-tower c: 1000)
	(up-set-defense-priority c: town-center c: 10000)
	(up-set-defense-priority c: watch-tower c: 20000); 10000
	(up-set-defense-priority c: monastery c: 8750)
	(up-set-defense-priority c: barracks c: 6250)
	(up-set-defense-priority c: stable c: 6250)
	(up-set-defense-priority c: archery-range c: 6250)
	(up-set-defense-priority c: siege-workshop c: 7500)
	(up-set-defense-priority c: lumber-camp c: 15000)
	(up-set-defense-priority c: mining-camp c: 15000)
	(up-set-defense-priority c: mill c: 15000)
	(up-set-defense-priority c: dock c: 25000))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-offense-priority c: castle c: 1)
	(up-set-offense-priority c: bombard-tower c: 1)
	(up-set-offense-priority c: town-center c: 7)
	(up-set-offense-priority c: watch-tower c: 9); 7
	(up-set-offense-priority c: monastery c: 6)
	(up-set-offense-priority c: barracks c: 4)
	(up-set-offense-priority c: stable c: 4)
	(up-set-offense-priority c: archery-range c: 4)
	(up-set-offense-priority c: siege-workshop c: 5)
	(up-set-offense-priority c: lumber-camp c: 8)
	(up-set-offense-priority c: mining-camp c: 8)
	(up-set-offense-priority c: mill c: 10)
	(up-set-offense-priority c: dock c: 10)
	(set-goal attackprioritychange no))
(defrule
(or	(and	(up-compare-goal attackpriorities != a-rush)
		(up-compare-goal attackpriorities != ca-rush))
	(goal attackprioritychange no))
=>
	(up-jump-rule 2))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-defense-priority c: castle c: 1000)
	(up-set-defense-priority c: bombard-tower c: 1000)
	(up-set-defense-priority c: town-center c: 8000)
	(up-set-defense-priority c: watch-tower c: 6000)
	(up-set-defense-priority c: monastery c: 2500)
	(up-set-defense-priority c: barracks c: 2500)
	(up-set-defense-priority c: stable c: 2500)
	(up-set-defense-priority c: archery-range c: 2500)
	(up-set-defense-priority c: siege-workshop c: 2500)
	(up-set-defense-priority c: lumber-camp c: 10000)
	(up-set-defense-priority c: mining-camp c: 10000)
	(up-set-defense-priority c: mill c: 7000)
	(up-set-defense-priority c: dock c: 1500))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-offense-priority c: castle c: 1)
	(up-set-offense-priority c: bombard-tower c: 1)
	(up-set-offense-priority c: town-center c: 8)
	(up-set-offense-priority c: watch-tower c: 7)
	(up-set-offense-priority c: monastery c: 5)
	(up-set-offense-priority c: barracks c: 5)
	(up-set-offense-priority c: stable c: 5)
	(up-set-offense-priority c: archery-range c: 5)
	(up-set-offense-priority c: siege-workshop c: 5)
	(up-set-offense-priority c: lumber-camp c: 10)
	(up-set-offense-priority c: mining-camp c: 10)
	(up-set-offense-priority c: mill c: 7)
	(up-set-offense-priority c: dock c: 2)
	(set-goal attackprioritychange no))
(defrule
(or	(up-compare-goal attackpriorities != krush)
	(goal attackprioritychange no))
=>
	(up-jump-rule 2))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-defense-priority c: castle c: 1000)
	(up-set-defense-priority c: bombard-tower c: 1000)
	(up-set-defense-priority c: town-center c: 10000); 7000
	(up-set-defense-priority c: watch-tower c: 22000); 3000; 1200
	(up-set-defense-priority c: monastery c: 2500)
	(up-set-defense-priority c: barracks c: 2500)
	(up-set-defense-priority c: stable c: 2500)
	(up-set-defense-priority c: archery-range c: 2500)
	(up-set-defense-priority c: siege-workshop c: 3500)
	(up-set-defense-priority c: lumber-camp c: 20000)
	(up-set-defense-priority c: mining-camp c: 18000)
	(up-set-defense-priority c: mill c: 10000)
	(up-set-defense-priority c: dock c: 1500))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-offense-priority c: castle c: 1)
	(up-set-offense-priority c: bombard-tower c: 1)
	(up-set-offense-priority c: town-center c: 8)
	(up-set-offense-priority c: watch-tower c: 11); 3
	(up-set-offense-priority c: monastery c: 5)
	(up-set-offense-priority c: barracks c: 5)
	(up-set-offense-priority c: stable c: 5)
	(up-set-offense-priority c: archery-range c: 5)
	(up-set-offense-priority c: siege-workshop c: 7)
	(up-set-offense-priority c: lumber-camp c: 10)
	(up-set-offense-priority c: mining-camp c: 9)
	(up-set-offense-priority c: mill c: 9)
	(up-set-offense-priority c: dock c: 2)
	(set-goal attackprioritychange no))
(defrule
(or	(up-compare-goal attackpriorities != stonewall)
	(goal attackprioritychange no))
=>
	(up-jump-rule 2))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-defense-priority c: castle c: 2500)
	(up-set-defense-priority c: bombard-tower c: 2000)
	(up-set-defense-priority c: town-center c: 12000)
	(up-set-defense-priority c: watch-tower c: 5000); 3000
	(up-set-defense-priority c: monastery c: 3500)
	(up-set-defense-priority c: barracks c: 1500)
	(up-set-defense-priority c: stable c: 1500)
	(up-set-defense-priority c: archery-range c: 1500)
	(up-set-defense-priority c: siege-workshop c: 1750)
	(up-set-defense-priority c: lumber-camp c: 7000)
	(up-set-defense-priority c: mining-camp c: 6000)
	(up-set-defense-priority c: mill c: 7000)
	(up-set-defense-priority c: dock c: 1000))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-offense-priority c: castle c: 5)
	(up-set-offense-priority c: bombard-tower c: 4)
	(up-set-offense-priority c: town-center c: 11)
	(up-set-offense-priority c: watch-tower c: 5)
	(up-set-offense-priority c: monastery c: 7)
	(up-set-offense-priority c: barracks c: 2)
	(up-set-offense-priority c: stable c: 2)
	(up-set-offense-priority c: archery-range c: 2)
	(up-set-offense-priority c: siege-workshop c: 3)
	(up-set-offense-priority c: lumber-camp c: 9)
	(up-set-offense-priority c: mining-camp c: 8)
	(up-set-offense-priority c: mill c: 9)
	(up-set-offense-priority c: dock c: 1)
	(set-goal attackprioritychange no))
(defrule
(or	(up-compare-goal attackpriorities != usual)
	(goal attackprioritychange no))
=>
	(up-jump-rule 2))
(defrule
;	(goal attackpriorities usual)
	(goal attackprioritychange yes)
=>
	(up-set-defense-priority c: castle c: 10000)
	(up-set-defense-priority c: bombard-tower c: 10000)
	(up-set-defense-priority c: town-center c: 8000)
	(up-set-defense-priority c: watch-tower c: 5000); 3000
	(up-set-defense-priority c: monastery c: 2500)
	(up-set-defense-priority c: barracks c: 2500)
	(up-set-defense-priority c: stable c: 2500)
	(up-set-defense-priority c: archery-range c: 2500)
	(up-set-defense-priority c: siege-workshop c: 2500)
	(up-set-defense-priority c: lumber-camp c: 2000)
	(up-set-defense-priority c: mining-camp c: 1750)
	(up-set-defense-priority c: mill c: 1500)
	(up-set-defense-priority c: dock c: 1000))
(defrule
;	(goal attackpriorities usual)
	(goal attackprioritychange yes)
=>
	(up-set-offense-priority c: castle c: 11)
	(up-set-offense-priority c: bombard-tower c: 11)
	(up-set-offense-priority c: town-center c: 10)
	(up-set-offense-priority c: watch-tower c: 7)
	(up-set-offense-priority c: monastery c: 5)
	(up-set-offense-priority c: barracks c: 5)
	(up-set-offense-priority c: stable c: 5)
	(up-set-offense-priority c: archery-range c: 5)
	(up-set-offense-priority c: siege-workshop c: 5)
	(up-set-offense-priority c: lumber-camp c: 4)
	(up-set-offense-priority c: mining-camp c: 4)
	(up-set-offense-priority c: mill c: 3)
	(up-set-offense-priority c: dock c: 2)
	(set-goal attackprioritychange no))





















#load-if-defined UP-ALLY-IN-GAME
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined WONDER-RACE
#load-if-not-defined DEFEND-WONDER
#load-if-not-defined DEATH-MATCH
#load-if-defined UP-POCKET-POSITION
(defrule
	(current-age <= feudal-age)
	(game-time >= 2)
	(game-time < 175); 180
	(up-compare-goal gl-random-number > sling-number)
	(up-allied-goal any-ally control-goal == 6); strat which works (well) with sling
=>
	(chat-to-player this-any-ally "137Do you want me to sling you?")
	(chat-local-to-self "Offering sling.")
	(disable-self))
(defrule
	(up-compare-goal verbuendete <= 3)
(or	(and	(up-allied-goal any-computer-ally identity == Promi)
		(up-allied-goal any-computer-ally strategy == sling))
(or	(and	(up-allied-goal any-computer-ally identity == Barbarian)
		(up-allied-goal any-computer-ally 19 >= 4))
	(and	(up-allied-goal any-computer-ally identity == Unknown)
		(up-allied-goal any-computer-ally 394 >= 2197))))
=>
	(up-jump-rule 1))
(defrule
	(up-compare-goal strategy != sling)
	(current-age <= feudal-age)
	(game-time >= 2)
	(game-time < 180)
	(up-compare-goal gl-random-number > sling-number)
(or	(taunt-detected any-ally 38)
	(taunt-detected any-ally 124))
=>
	(set-goal strategy sling)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number text-attempt-sling)
	(chat-to-allies text-understood)
	(chat-to-allies text-attempt-sling))
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
(or	(taunt-detected any-ally 137)
	(taunt-detected any-ally 48))
=>
	(chat-to-player this-any-ally "38"); every-
	(chat-to-player every-ally "1I will be relying on your help.")
	(acknowledge-taunt every-ally 137)
	(acknowledge-taunt every-ally 48)
	(chat-local-to-self "I am shot.")
	(set-goal control-goal 7))
#end-if; ally only
(defrule
(or	(taunt-detected any-ally 38)
	(taunt-detected any-ally 124))
=>
	(chat-to-player my-player-number text-decline-ask-next-game); "2I decline, ask me next game."
	(chat-to-allies text-decline-ask-next-game); "2I decline, ask me next game."
	(acknowledge-taunt every-ally 38)
	(acknowledge-taunt every-ally 124))
(defrule
	(goal strategy sling)
	(up-research-status c: ri-coinage <= research-unavailable)
	(building-type-count market >= 1)
	(current-age >= feudal-age)
	(up-resource-percent amount-tribute-inefficiency >= 16)
=>
	(set-goal strategy usual)
	(set-goal milunits no); yes
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number text-stop-slinging)
	(chat-to-allies text-stop-slinging))
(defrule
	(goal strategy sling)
(or	(game-time >= 2400); 2700
(or	(players-tribute-memory any-ally wood >= 1001)
(or	(players-tribute-memory any-ally food >= 1001)
(or	(players-tribute-memory any-ally gold >= 1001)
	(players-tribute-memory any-ally stone >= 501)))))
=>
	(set-goal strategy usual)
	(set-goal milunits no); yes
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number text-stop-slinging)
	(chat-to-allies text-stop-slinging))
(defrule
	(goal strategy sling)
(or	(players-population any-ally >= max-civ-pop); del ; every
(or	(up-allied-resource-amount any-ally wood >= 2000)
(or	(up-allied-resource-amount any-ally food >= 2000)
(or	(up-allied-resource-amount any-ally gold >= 2000)
	(up-allied-resource-amount any-ally stone >= 775)))))
=>
	(set-goal strategy usual)
	(set-goal milunits no); yes
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number text-stop-slinging)
	(chat-to-allies text-stop-slinging))
(defrule
	(goal strategy sling)
(or	(population >= max-civ-pop)
(or	(civilian-population >= up-max-civ)
(or	(civilian-population >= 64); 75
(or	(strategic-number sn-current-age >= imperial)
	(taunt-detected any-ally 97)))))
=>
	(set-goal strategy usual)
	(set-goal milunits no); yes
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number text-stop-slinging)
	(chat-to-allies text-stop-slinging))
(defrule
	(goal strategy sling)
(or	(goal underattack yes); hm
	(not	(player-in-game every-ally))); for now; at least any-ally
=>
	(set-goal strategy usual)
	(set-goal milunits no); yes
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number text-stop-slinging)
	(chat-to-allies text-stop-slinging))
(defrule
	(goal control-goal 7)
(or	(up-timer-status resign-timer != timer-disabled)
(or	(and	(population < 24)
		(game-time >= 900))
	(and	(strategic-number sn-current-age >= imperial)
		(population >= max-civ-pop)))); del
=>
	(set-goal control-goal 0)
	(chat-to-allies "97Stop slinging me now."))











#load-if-not-defined WONDER-RACE
#load-if-not-defined DEATH-MATCH

#load-if-not-defined SCANDANAVIA-MAP; A
#load-if-not-defined HIGHLAND-MAP; hm
(defrule
(or	(up-compare-const grush-affinity <= 0)
(or	(up-compare-goal map != water);
(or	(up-compare-goal strategy-type2 == water);
(or	(up-compare-goal fishing != yes);
(or	(strategic-number sn-current-age >= imperial)
(or	(and	(up-compare-goal targetdistance < 45); testing
		(goal islands no))
	(goal strategylocked yes)))))))
=>
	(up-jump-rule 1))
(defrule
(or	(goal position-goal flank); for now
	(goal islands yes))
(or	(and	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq)
		(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq))
(or	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq3)
	(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq3)))
	(game-time > 2)
=>
	(set-goal strategy grush)
	(set-goal milunits grush)
	(set-goal attackprioritychange yes)
	(disable-self)); end jump
#end-if
#end-if

(defrule
	(up-compare-goal strategy-type2 != water)
=>
	(up-jump-rule 5))
(defrule
	(goal islands no)
	(goal strategylocked no)
	(building-type-count dock >= 1)
=>
	(up-full-reset-search)
	(up-find-local c: dock c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object temporary-point-x)
	(up-get-point-distance temporary-point-x position-self-x temporary-goal)
	(set-goal temporary-goal2 65517)
	(disable-self))
(defrule
	(goal temporary-goal2 65517)
	(goal islands no)
	(goal strategylocked no)
	(building-type-count dock >= 1)
	(up-compare-goal temporary-goal >= 55); 55
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Dock too far: Resetting strategy.")
	(chat-to-player every-ally "Cancelling my current strategy, i messed up.")
	(disable-self))
(defrule
(not	(map-type salt-marsh))
(and	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq3);
	(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq3));
;(or	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq3)
;(or	(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq3)
;	(and	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq)
;		(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq))))
=>
	(set-goal gr-var 2)
	(chat-to-player my-player-number "gr-var: 2.")
	(disable-self))
(defrule
	(goal islands no)
	(goal strategylocked no)
	(up-compare-goal gr-var != 1)
	(building-type-count dock >= 1)
	(players-building-count any-enemy >= 1)
	(goal position-goal flank); for now
=>
	(up-full-reset-search)
	(up-find-local c: dock c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object temporary-point-x)
	(up-get-point position-enemy point-x)
	(up-get-point-distance temporary-point-x point-x temporary-goal)
	(set-goal temporary-goal3 65432)
	(disable-self))
(defrule
	(goal temporary-goal3 65432)
	(goal islands no)
	(goal strategylocked no)
	(up-compare-goal gr-var != 1)
	(building-type-count dock >= 1)
	(players-building-count any-enemy >= 1)
	(up-compare-goal temporary-goal g:< targetdistance)
	(goal position-goal flank); for now
=>
	(set-goal gr-var 1)
	(chat-to-player my-player-number "gr-var: 1.")
	(disable-self)); end jump
#load-if-not-defined REGICIDE
#load-if-not-defined ARENA-MAP
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE
;#load-if-not-defined BLACK-FOREST-MAP


;#load-if-not-defined OASIS-MAP


#load-if-not-defined GOLD-RUSH-MAP; nooope
#load-if-not-defined UP-GROUPED-BY-TEAM; hmm
#load-if-not-defined HIGH-RESOURCES-START
#load-if-not-defined MEDIUM-RESOURCES-START

(defrule
(or	(up-compare-const drush-affinity <= 0)
(or	(up-compare-const drush-affinity <= 1);
(or	(and	(up-compare-const drush-affinity <= 2); 1
		(up-compare-const drush-affinity g:< strategy-affinity))
(or	(cc-players-unit-type-count 0 wolf >= maxcartssize)
	(cc-players-unit-type-count 0 jaguar >= maxcartssize)))))
=>
	(up-jump-rule 8))
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal islands yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 7)); expect it to be walled for enemies too
(defrule
(or	(up-compare-goal nomad != no)
	(up-compare-goal landnomad != no))
(or	(players-building-count every-enemy <= 0)
	(building-type-count town-center <= 0))
=>
	(up-jump-rule 6))
(defrule
(or	(and	(up-compare-const grouped-by-team == 1)
		(goal Multiplayer yes))
(or	(up-compare-goal targetdistance >= 95); test; 100
(or	(game-time <= 2)
(or	(military-population <= 0)
(or	(building-type-count-total town-center >= 2)
	(strategic-number sn-current-age >= dfeudal))))))
=>
	(up-jump-rule 5))
(defrule
	(and	(goal position-goal pocket)
		(or	(and	(not	(civ-selected celtic))
				(up-compare-const drush-affinity < 3))
			(up-compare-const drush-affinity < 2)))
=>
	(up-jump-rule 4))
(defrule
	(goal strategy usual)
	(goal islands no)
	(goal milunits yes)
	(goal strategylocked no)
(or	(up-compare-goal mysheep >= 6)
	(and	(up-compare-goal mysheep >= 4)
		(up-compare-goal gl-random-number < 80)))
	(game-time < 20)
	(goal map land)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(up-modify-sn sn-home-exploration-time c:max 300);	(set-strategic-number sn-home-exploration-time 300)
	(set-goal strategy drush)
;	(set-goal milunits yes)
; nn	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal strategy usual)
	(goal islands no)
	(goal milunits yes)
	(goal strategylocked no)
(or	(up-compare-goal totalsheep >= 9)
(or	(up-compare-goal totalboars >= 3)
	(up-compare-goal forage-count >= 12)))
	(game-time < 20)
	(goal map land)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(up-modify-sn sn-home-exploration-time c:max 300);	(set-strategic-number sn-home-exploration-time 300)
	(set-goal strategy drush)
;	(set-goal milunits yes)
; nn	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 10)
	(goal strategy usual)
	(goal islands no)
	(goal milunits yes)
	(goal strategylocked no)
(or	(up-compare-goal mysheep >= 6)
	(and	(up-compare-goal mysheep >= 4)
		(up-compare-goal strategy-type >= castle-war)))
	(game-time < 20)
	(goal map land)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(up-modify-sn sn-home-exploration-time c:max 300);	(set-strategic-number sn-home-exploration-time 300)
	(set-goal strategy drush)
;	(set-goal milunits yes)
; nn	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
;	(game-time > 2)
	(game-time > 57); test
	(game-time < 66)
; jump	(goal position-goal flank)
	(up-compare-goal strategy-type >= castle-war)
	(goal islands no)
	(goal strategylocked no)
	(goal aggressivestrat 1)
	(building-type-count-total town-center <= 1)
	(goal map land)
	(strategic-number sn-current-age <= feudal)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(up-modify-sn sn-home-exploration-time c:max 300);	(set-strategic-number sn-home-exploration-time 300)
	(set-goal strategy drush)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))

#end-if
#end-if
#end-if
#end-if


(defrule
(or	(and	(up-compare-const r-flush-affinity <= 0)
		(up-compare-const sk-var-affinity <= 0))
	(and	(and	(up-compare-const r-flush-affinity <= 1)
			(up-compare-const sk-var-affinity <= 1))
		(and	(up-compare-const r-flush-affinity g:< strategy-affinity)
			(up-compare-const sk-var-affinity g:< strategy-affinity))))
=>
	(up-jump-rule 4))
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal islands yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 3)); expect it to be walled for enemies too
(defrule
	(game-time > 2)
	(goal position-goal flank)
	(goal strategy usual)
;	(goal nomad no)
;	(goal landnomad no)
	(goal map land)
	(goal milunits yes)
	(military-population >= 1)
	(goal strategylocked no)
	(building-type-count-total town-center <= 1)
	(game-time < 60); 20
	(strategic-number sn-current-age <= feudal)
=>
;	(up-modify-sn sn-home-exploration-time c:- 60)
	(set-goal strategy r-flush)
	(set-goal milunits r-flush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 2)
	(game-time < 66)
	(goal position-goal flank)
	(up-compare-goal strategy-type >= castle-war)
	(goal islands no)
	(military-population >= 1); for now
	(goal strategylocked no)
	(goal aggressivestrat 1)
	(building-type-count-total town-center <= 1)
	(goal map land)
	(strategic-number sn-current-age <= feudal)
=>
	(set-goal strategy r-flush)
	(set-goal milunits r-flush)
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))
(defrule
	(game-time > 54)
	(goal position-goal flank)
(or	(and	(goal strategy s-flush)
		(building-type-count-total stable >= 1))
;(or	(and	(goal strategy s-flush)
;		(and	(strategic-number sn-current-age >= fcastlea)
;			(building-type-count-total archery-range >= 1)))
	(and	(goal strategy drush); drushmicro still on
		(unit-type-count-total militiaman-line >= drush-militias)))
=>
	(set-goal strategy r-flush)
	(set-goal milunits r-flush)
	(set-goal attackprioritychange yes)
;	(disable-self)
)


;(defrule
;(or	(up-compare-const s-flush-affinity <= 0)
;(or	(up-compare-const s-flush-affinity <= 1)
;	(and	(up-compare-const s-flush-affinity <= 2)
;		(up-compare-const s-flush-affinity g:<= strategy-affinity))))
;=>
;	(up-jump-rule 5))
;(defrule
;(or	(wall-completed-percentage 2 >= 100)
;	(wall-completed-percentage 1 >= 100))
;(or	(goal islands yes)
;(or	(building-type-count stone-wall-line >= 4)
;(or	(building-type-count palisade-wall >= 40)
;	(building-type-count gate >= 2))))
;=>
;	(up-jump-rule 4)); expect it to be walled for enemies too
;(defrule
;(or	(game-time <= 2)
;(or	(game-time >= 60); 20
;(or	(up-compare-goal mysheep < 6); 4
;(or	(military-population <= 0)
;	(strategic-number sn-current-age >= dfeudal)))))))
;=>
;	(up-jump-rule 2))
;(defrule
;	(game-time > 2)
;	(goal position-goal flank)
;(or	(goal strategy usual)
;	(map-type yucatan))
;;	(goal nomad no)
;;	(goal landnomad no)
;	(goal map land)
;	(goal milunits yes)
;	(unit-type-count scout-cavalry >= 1); (military-population >= 1)
;	(goal strategylocked no)
;	(building-type-count-total town-center <= 1)
;	(game-time < 60); 20
;	(strategic-number sn-current-age <= feudal)
;=>
;;	(up-modify-sn sn-home-exploration-time c:- 60)
;	(set-goal strategy s-flush)
;	(set-goal milunits s-flush)
;	(set-goal attackprioritychange yes)
;	(disable-self))
;(defrule
;	(game-time > 2)
;	(goal position-goal pocket)
;	(goal strategy usual)
;;	(goal nomad no)
;;	(goal landnomad no)
;	(goal map land)
;	(goal milunits yes)
;	(unit-type-count scout-cavalry >= 1); (military-population >= 1)
;	(goal strategylocked no)
;	(building-type-count-total town-center <= 1)
;	(game-time < 60); 20
;	(strategic-number sn-current-age <= feudal)
;=>
;;	(up-modify-sn sn-home-exploration-time c:- 60)
;	(set-goal strategy s-flush)
;	(set-goal milunits s-flush)
;	(set-goal attackprioritychange yes)
;	(disable-self))
;(defrule
;	(game-time > 2)
;	(game-time < 66)
;	(goal position-goal flank)
;	(up-compare-goal strategy-type >= castle-war)
;	(goal islands no)
;	(unit-type-count scout-cavalry >= 1); (military-population >= 1)
;	(goal strategylocked no)
;	(goal aggressivestrat 1)
;	(building-type-count-total town-center <= 1)
;	(goal map land)
;	(strategic-number sn-current-age <= feudal)
;=>
;	(set-goal strategy s-flush)
;	(set-goal milunits s-flush)
;	(set-goal attackprioritychange yes)
;	(set-goal aggressivestrat 24))


;#end-if ; was not Oasis


(defrule
(or	(up-compare-const a-rush-affinity <= 0)
(or	(up-compare-const a-rush-affinity <= 1)
	(and	(up-compare-const a-rush-affinity <= 2)
		(up-compare-const a-rush-affinity g:<= strategy-affinity))))
=>
	(up-jump-rule 8))
(defrule
(or	(up-compare-goal gl-random-number < 20); usually not the best strategy so don't
(or	(up-compare-goal gl-random-number >= 30); use it too often (some diversity should be nice though)
(or	(players-civ any-enemy persian)
	(and	(up-compare-const number-stables >= 1)
		(players-civ any-ally persian)))))
=>
	(up-jump-rule 4))
(defrule
(nor	(map-type arena)
(or	(map-type fortress)
;(or	(map-type oasis)
	(map-type black-forest)));)
=>
	(up-jump-rule 1))
(defrule
	(game-time > 4); 2
;	(goal position-goal pocket)
	(goal islands no)
	(goal strategy usual)
	(goal milunits yes); for now
	(goal strategylocked no)
	(goal map land); hmm
	(game-time < 180)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 4); 2
	(goal position-goal pocket)
	(goal strategy usual)
	(goal map land)
	(goal milunits yes)
; test	(military-population >= 1)
	(goal strategylocked no)
	(game-time < 60); 20
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 4); 2
	(game-time < 66)
;	(goal position-goal pocket)
	(up-compare-goal strategy-type >= imperial-war)
	(goal map land); hmm
	(goal islands no)
	(goal aggressivestrat 1)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))
(defrule
(or	(players-civ any-enemy persian)
	(up-compare-goal map != land)); hmm
=>
	(up-jump-rule 2))
(defrule
	(game-time > 52)
(or	(and	(goal strategy s-flush)
		(and	(strategic-number sn-current-age >= fcastlea)
			(building-type-count-total archery-range >= 1)))
	(and	(up-compare-goal targetdistance >= 60); 45
		(and	(goal strategy drush); drushmicro still on
			(unit-type-count-total militiaman-line >= drush-militias))))
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
	(game-time > 14); 15
	(up-compare-goal strategy-type <= feudal-war)
	(strategic-number sn-current-age <= dark)
(or	(players-building-count every-enemy >= 1)
	(up-compare-const grouped-by-team == 1))
(or	(game-time < 180)
	(players-building-count every-enemy >= 1)); target-player
	(up-compare-goal targetdistance >= 126)
	(strategic-number teambalance >= 0)
	(unit-type-count-total militiaman-line <= 0)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
	(disable-self))


(defrule
(or	(up-compare-const krush-affinity <= 0)
	(and	(up-compare-const krush-affinity <= 1)
		(up-compare-const krush-affinity g:< strategy-affinity)))
=>
	(up-jump-rule 6))
(defrule
	(game-time > 2)
	(game-time < 60); 20
	(goal position-goal pocket)
	(goal strategy usual)
;	(goal nomad no)
;	(goal landnomad no)
	(goal map land)
	(goal milunits yes)
; test	(military-population >= 1)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
;	(up-modify-sn sn-home-exploration-time c:- 60)
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 10); 2
	(game-time < 60); 20
;	(goal position-goal flank)
	(goal strategy usual)
;	(goal nomad no)
;	(goal landnomad no)
(or	(goal map water)
	(military-population < 1)); test
	(goal islands no)
	(goal milunits yes)
; test	(military-population >= 1)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
;	(up-modify-sn sn-home-exploration-time c:- 60)
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 2)
	(game-time < 66)
;	(goal position-goal pocket)
	(up-compare-goal strategy-type >= imperial-war)
	(goal islands no)
	(goal aggressivestrat 1)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))
(defrule
	(game-time > 50)
(or	(and	(goal strategy s-flush)
		(strategic-number sn-current-age >= fcastlea))
	(and	(up-compare-goal targetdistance >= 60); 45
		(and	(goal strategy drush); drushmicro still on
			(unit-type-count-total militiaman-line >= drush-militias))))
=>
;	(up-modify-sn sn-home-exploration-time c:- 60)
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
	(goal enemy-goal2 klew)
(or	(strategic-number sn-current-age >= fcastlea); hmm
	(goal position-goal pocket))
	(up-compare-goal strategy-type >= castle-war); keep flushing if it was originally planned
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 15)
;(or
	(up-compare-goal strategy-type <= feudal-war)
;	(up-compare-goal strategy == a-rush))
(or	(game-time < 180)
	(players-building-count every-enemy >= 1)); target-player
	(strategic-number sn-current-age <= dark)
(or	(players-building-count every-enemy >= 1)
	(up-compare-const grouped-by-team == 1))
	(up-compare-goal targetdistance >= 126)
	(strategic-number teambalance >= 0)
	(unit-type-count-total militiaman-line <= 0)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
	(disable-self)); end jump


;#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if


#load-if-not-defined WONDER-RACE
#load-if-not-defined REGICIDE
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE


(defrule
(or	(up-compare-const castledrop-affinity <= 0)
	(and	(up-compare-const castledrop-affinity <= 1)
		(up-compare-const castledrop-affinity g:< strategy-affinity)))
=>
	(up-jump-rule 3))
(defrule
(nor	(map-type arena)
(or	(map-type fortress)
(or	(map-type oasis)
	(map-type black-forest))))
=>
	(up-jump-rule 1))
(defrule
	(game-time > 2)
;	(goal position-goal pocket)
	(goal islands no)
	(goal strategylocked no)
	(goal strategy usual)
;(or
	(goal milunits yes)
;	(goal position-goal flank))
	(game-time < 180)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes))
(defrule
	(game-time > 50)
(or	(and	(goal strategy s-flush)
		(strategic-number sn-current-age >= fcastlea))
	(and	(up-compare-goal targetdistance >= 60); 45
		(and	(goal strategy drush); drushmicro still on
			(unit-type-count-total militiaman-line >= drush-militias))))
=>
;	(up-modify-sn sn-home-exploration-time c:- 60)
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
;	(disable-self)
)


(defrule
(or	(up-compare-const castledrop-affinity <= 0)
(or	(up-compare-const castledrop-affinity <= 1)
	(and	(up-compare-const castledrop-affinity <= 2)
		(up-compare-const castledrop-affinity g:< strategy-affinity))))
=>
	(up-jump-rule 5))
(defrule
	(game-time > 2)
	(goal position-goal pocket)
	(goal islands no)
	(goal strategy usual)
(or	(goal milunits yes); for now
;	(and
	(goal milunits no)
;		(up-compare-goal cozy != yes)
);); test
	(goal strategylocked no)
	(game-time < 180)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal cozy yes)
	(strategic-number teambalance >= 0)
	(game-time > 2)
	(game-time < 180)
	(goal position-goal pocket); For now.
	(goal islands no)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 2)
	(game-time < 60); 20
	(goal strategy usual)
	(goal milunits yes)
	(building-type-count-total castle >= 1); -total
(or	(goal islands no)
	(civ-selected gothic))
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 2)
	(goal position-goal flank)
(or	(goal map water)
	(military-population < 1)); test
	(goal islands no)
	(goal milunits yes)
; test	(military-population >= 1)
	(goal strategylocked no)
	(game-time < 60); 20
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 13); 15
;(or
	(up-compare-goal strategy-type <= feudal-war)
;	(up-compare-goal strategy == a-rush))
	(strategic-number sn-current-age <= dark)
(or	(players-building-count every-enemy >= 1)
	(up-compare-const grouped-by-team == 1))
(or	(game-time < 180)
	(players-building-count every-enemy >= 1)); target-player
	(up-compare-goal targetdistance >= 126)
	(strategic-number teambalance >= 0)
	(unit-type-count-total militiaman-line <= 0)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))


#end-if
#end-if
#end-if
#end-if
#end-if; DM
#end-if; wonder race and regicide


#load-if-not-defined WONDER-RACE
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE

;#load-if-not-defined UP-AZTEC-CIV-ENEMY
;#load-if-not-defined UP-BRITON-CIV-ENEMY
;#load-if-not-defined UP-BYZANTINE-CIV-ENEMY
;#load-if-not-defined UP-CELTIC-CIV-ENEMY
;#load-if-not-defined UP-CHINESE-CIV-ENEMY
;#load-if-not-defined UP-FRANKISH-CIV-ENEMY
;#load-if-not-defined UP-GOTHIC-CIV-ENEMY
;#load-if-not-defined UP-HUN-CIV-ENEMY
;#load-if-not-defined UP-INCAN-CIV-ENEMY
;#load-if-not-defined UP-INDIAN-CIV-ENEMY
;#load-if-not-defined UP-ITALIAN-CIV-ENEMY
;#load-if-not-defined UP-JAPANESE-CIV-ENEMY
;#load-if-not-defined UP-KOREAN-CIV-ENEMY
;#load-if-not-defined UP-MAYAN-CIV-ENEMY
;#load-if-not-defined UP-MAGYAR-CIV-ENEMY
;#load-if-not-defined UP-MONGOL-CIV-ENEMY
;#load-if-not-defined UP-PERSIAN-CIV-ENEMY
;#load-if-not-defined UP-SARACEN-CIV-ENEMY
;#load-if-not-defined UP-SLAVIC-CIV-ENEMY
;#load-if-not-defined UP-SPANISH-CIV-ENEMY
;#load-if-not-defined UP-TURKISH-CIV-ENEMY
;#load-if-not-defined UP-TEUTONIC-CIV-ENEMY
;#load-if-not-defined UP-VIKING-CIV-ENEMY ;; goths - viks+japs too?


(defrule
(or	(up-compare-const stonewall-affinity <= 0)
	(and	(up-compare-const stonewall-affinity <= 1)
		(up-compare-const stonewall-affinity g:< strategy-affinity)))
=>
	(up-jump-rule 3))
(defrule
;(or	(military-population <= 0)
(or	(up-compare-goal islands != no);	(up-compare-goal map != land)
(or	(up-compare-goal position-goal != pocket)
(or	(game-time >= 60)
(or	(goal strategylocked yes)
(or	(players-civ every-enemy gothic)
(or	(players-civ every-enemy japanese)
	(players-civ every-enemy viking)))))));)
=>
	(up-jump-rule 1))
(defrule
	(game-time > 2)
(or	(goal strategy usual)
	(and	(up-compare-goal strategy-type >= imperial-war)
		(or	(up-compare-goal gl-random-number < 17); 20
			(up-compare-goal mysheep >= 6)))); 4
	(goal nomad no)
	(goal landnomad no)
;	(goal milunits yes)
=>
	(up-modify-sn sn-home-exploration-time c:+ 60); test - find more minezzz
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 15)
;(or
	(up-compare-goal strategy-type <= castle-war);feudal-war)
;	(up-compare-goal strategy == a-rush))
	(strategic-number sn-current-age <= dark)
(or	(players-building-count every-enemy >= 1)
	(up-compare-const grouped-by-team == 1))
(or	(game-time < 180)
	(players-building-count every-enemy >= 1)); target-player
	(up-compare-goal targetdistance >= 126)
;	(strategic-number teambalance >= 0)
	(goal strategylocked no)
	(goal position-goal pocket);	(unit-type-count-total militiaman-line <= 0)
=>
; tl	(up-modify-sn sn-home-exploration-time c:+ 60)
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(disable-self))


;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if


#end-if
#end-if
#end-if
#end-if










#load-if-not-defined WONDER-RACE; back-up strats
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined DEATH-MATCH
#load-if-not-defined REGICIDE
#load-if-not-defined ARENA-MAP
#load-if-not-defined FORTRESS-MAP
;test#load-if-not-defined BLACK-FOREST-MAP
;test#load-if-not-defined OASIS-MAP

(defrule
	(up-compare-const r-flush-affinity <= 0)
	(up-compare-const sk-var-affinity <= 0)
=>
	(up-jump-rule 2))
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal islands yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 1)); expect it to be walled for enemies too
(defrule
	(up-compare-goal strategy-type > feudal-war); !=
	(goal strategylocked no)
	(up-compare-goal total-food-amount < 1100)
(or	(up-compare-goal total-food-amount < 800)
	(strategic-number sn-current-age <= dark))
	(players-building-count target-player >= 1)
	(up-compare-goal targetdistance < 45)
(or	(building-type-count town-center >= 1)
	(game-time >= 480))
	(strategic-number sn-current-age <= dfeudal)
	(goal map land)
=>
	(set-goal strategy r-flush)
	(set-goal milunits r-flush)
	(set-goal attackprioritychange yes))


(defrule
(or	(up-compare-const a-rush-affinity <= 0)
	(and	(up-compare-const a-rush-affinity <= 1)
		(up-compare-const a-rush-affinity g:< strategy-affinity)))
=>
	(up-jump-rule 7))
(defrule
	(game-time >= 20); 16 - low priority
	(game-time < 60); 30
	(goal islands no)
;	(goal position-goal pocket)
	(goal strategy usual)
	(goal milunits yes)
	(wall-completed-percentage 2 < 100); test
	(wall-completed-percentage 1 < 100); test
; test	(military-population >= 1)
	(goal map land); hmm
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
;	(up-modify-sn sn-home-exploration-time c:- 60)
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 10); 2 - low priority
	(game-time < 66)
;	(goal position-goal pocket)
	(up-compare-goal strategy-type >= imperial-war)
	(goal strategy usual); test
	(goal islands no)
	(goal strategylocked no)
	(goal map land); hmm
	(goal aggressivestrat 1)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))
(defrule
	(goal position-goal flank)
	(up-compare-goal strategy-type == feudal-war); <=
	(up-compare-goal strategy-type2 == land)
	(goal islands no)
	(goal map land); hmm
(or	(military-population >= 1)
	(players-building-count any-enemy >= 1))
	(goal strategylocked no)
	(unit-type-count-total villager >= 27)
	(strategic-number sn-current-age <= dfeudal)
=>
	(chat-local-to-self text-switch-FC)
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(up-compare-goal map != land); hmm
=>
	(up-jump-rule 3))
(defrule
	(goal control-goal 7)
	(goal strategylocked no)
(or	(and	(goal strategy usual)
		(goal milunits yes))
	(up-compare-goal strategy-type == feudal-war))
	(up-compare-goal islands <= no);
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits no)
	(goal strategy usual)
	(goal strategylocked no)
	(strategic-number teamsuperiority <= -1); 0; test
	(up-compare-goal cozy <= no)
	(up-compare-goal islands <= no);
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits yes)
	(goal strategy usual)
	(goal strategylocked no)
	(up-research-status c: castle-age == research-pending)
(or	(military-population < 5)
	(building-type-count-total archery-range >= 1))
	(civilian-population < 60)
	(building-type-count-total stable <= 0);	(up-research-status c: ri-bloodlines <= research-available)
;	(strategic-number sn-current-age >= fcastlea)
;	(strategic-number sn-current-age <= castlea)
	(unit-available archer-line)
	(up-compare-goal cozy <= no)
	(up-compare-goal islands <= no);
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes)
	(disable-self)); end jump


(defrule
(or	(up-compare-const krush-affinity <= 0)
	(and	(up-compare-const krush-affinity <= 1)
		(up-compare-const krush-affinity g:< strategy-affinity)))
=>
	(up-jump-rule 6))
(defrule
	(game-time >= 16)
	(game-time < 60); 30
	(goal islands no)
;	(goal position-goal pocket)
	(goal strategy usual)
	(goal milunits yes)
	(wall-completed-percentage 2 < 100); test
	(wall-completed-percentage 1 < 100); test
; test	(military-population >= 1)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
;	(up-modify-sn sn-home-exploration-time c:- 60)
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
	(game-time > 2)
	(game-time < 66)
;	(goal position-goal pocket)
	(up-compare-goal strategy-type >= imperial-war)
	(goal islands no)
	(goal strategylocked no)
	(goal aggressivestrat 1)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))
(defrule
	(goal position-goal flank)
	(up-compare-goal strategy-type == feudal-war); <=
	(up-compare-goal strategy-type2 == land)
	(goal islands no)
	(goal map land); hmm
(or	(military-population >= 1)
	(players-building-count any-enemy >= 1))
	(goal strategylocked no)
	(unit-type-count-total villager >= 27)
	(strategic-number sn-current-age <= dfeudal)
=>
	(chat-local-to-self text-switch-FC)
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal control-goal 7)
	(goal strategylocked no)
(or	(and	(goal strategy usual)
		(goal milunits yes))
	(up-compare-goal strategy-type == feudal-war))
;	(up-compare-goal islands <= no);
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits no)
	(goal strategy usual)
	(goal strategylocked no)
	(strategic-number teamsuperiority <= -1); 0; test
	(up-compare-goal cozy <= no)
;	(up-compare-goal islands <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits yes)
	(goal strategy usual)
	(goal strategylocked no)
	(military-population < 5)
	(civilian-population < 90)
;(or	(unit-available knight-line)
	(up-research-status c: castle-age == research-pending);)
	(unit-available scout-cavalry-line)
;	(strategic-number sn-current-age >= fcastlea)
;	(strategic-number sn-current-age <= castlea)
;	(unit-available knight-line)
	(up-compare-goal cozy <= no)
;	(up-compare-goal islands <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(set-goal attackprioritychange yes)
	(disable-self))


;test#end-if
;test#end-if
#end-if
#end-if
#end-if


(defrule
(or	(up-compare-const castledrop-affinity <= 0)
(or	(up-compare-const castledrop-affinity <= 1)
	(and	(up-compare-const castledrop-affinity <= 2)
		(up-compare-const castledrop-affinity g:< strategy-affinity))))
=>
	(up-jump-rule 10))
(defrule
	(game-time >= 16)
	(game-time < 60); 30
	(goal islands no)
	(goal strategy usual)
;	(up-compare-goal cozy != yes); no?
(or
	(goal milunits yes)
	(goal aggressivestrat 1))
; test	(military-population >= 1)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal position-goal flank)
	(up-compare-goal strategy-type == feudal-war); <=
	(up-compare-goal strategy-type2 == land)
	(goal islands no)
	(goal map land); hmm
(or	(military-population >= 1)
	(players-building-count any-enemy >= 1))
	(goal strategylocked no)
	(unit-type-count-total villager >= 27)
	(strategic-number sn-current-age <= dfeudal)
=>
	(chat-local-to-self text-switch-FC)
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(up-compare-goal strategy-type <= castle-war)
	(up-compare-goal strategy-type2 != water)
	(goal strategylocked no)
(or	(building-type-count-total gate-class >= 2)
	(building-type-count-total stone-wall-line >= 4))
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100)); test
(or	(strategic-number sn-current-age <= dfeudal)
	(up-compare-goal strategy-type <= feudal-war))
;	(players-building-count any-enemy <= 4)
	(game-time < 66)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal strategy-type <= feudal-war); castle?
	(up-compare-goal strategy-type2 != water); create extra rule (wg-/fs-r?) for that
	(goal strategylocked no)
	(up-compare-const ffa-game == yes)
;	(strategic-number sn-current-age <= dfeudal)
;	(players-building-count any-enemy <= 4)
	(game-time < 66)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes))
(defrule
	(goal milunits no)
	(goal strategy usual)
	(goal strategylocked no)
	(strategic-number teamsuperiority <= -1); 0; test
	(up-compare-goal cozy <= no)
;	(up-compare-goal islands <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal control-goal 7)
	(goal strategylocked no)
(or	(and	(goal strategy usual)
		(goal milunits yes))
	(up-compare-goal strategy-type == feudal-war))
;	(up-compare-goal islands <= no);
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
(or	(population < up-max-civ)
	(strategic-number sn-current-age <= castlea))
	(goal strategy usual)
	(goal strategylocked no)
	(building-type-count castle >= 1)
(or	(up-compare-goal cozy <= no)
	(up-compare-goal milunits != no))
;	(up-compare-goal islands <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits yes)
	(goal strategy usual)
	(goal strategylocked no)
;	(military-population < 5)
	(civilian-population < 90)
	(up-research-status c: castle-age == research-pending)
	(building-type-count-total stable <= 0);	(building-type-count-total barracks <= 0)
;	(strategic-number sn-current-age >= fcastlea)
;	(strategic-number sn-current-age <= castlea)
;	(unit-available my-unique-unit-line)
	(up-compare-goal cozy <= no)
;	(up-compare-goal islands <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits r-flush)
	(goal strategy r-flush)
	(goal sk-var yes)
	(goal strategylocked no)
;	(military-population < 5)
	(civilian-population < 90)
	(up-research-status c: castle-age == research-pending)
	(building-type-count-total archery-range <= 3); 2
	(strategic-number sn-military-superiority >= -1)
	(goal underattack no)
;	(strategic-number sn-current-age >= fcastlea)
;	(strategic-number sn-current-age <= castlea)
;	(unit-available my-unique-unit-line)
	(up-compare-goal cozy <= no)
;	(up-compare-goal islands <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal aggressivestrat krush)
	(goal strategylocked no)
	(goal strategy krush)
	(goal position-goal pocket)
(or	(cc-players-unit-type-count 0 stone-mine >= 1)
	(stone-amount >= castle-stone))
;(or	(goal islands no)
;	(civ-selected gothic))
; test	(military-population >= 1)
	(building-type-count-total stable <= 0);
	(strategic-number sn-current-age <= fcastlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 0)
	(disable-self)); end jump


#end-if; DM


;#load-if-not-defined UP-AZTEC-CIV-ENEMY
;#load-if-not-defined UP-BRITON-CIV-ENEMY
;#load-if-not-defined UP-BYZANTINE-CIV-ENEMY
;#load-if-not-defined UP-CELTIC-CIV-ENEMY
;#load-if-not-defined UP-CHINESE-CIV-ENEMY
;#load-if-not-defined UP-FRANKISH-CIV-ENEMY
;#load-if-not-defined UP-GOTHIC-CIV-ENEMY
;#load-if-not-defined UP-HUN-CIV-ENEMY
;#load-if-not-defined UP-INCAN-CIV-ENEMY
;#load-if-not-defined UP-INDIAN-CIV-ENEMY
;#load-if-not-defined UP-ITALIAN-CIV-ENEMY
;#load-if-not-defined UP-JAPANESE-CIV-ENEMY
;#load-if-not-defined UP-KOREAN-CIV-ENEMY
;#load-if-not-defined UP-MAYAN-CIV-ENEMY
;#load-if-not-defined UP-MAGYAR-CIV-ENEMY
;#load-if-not-defined UP-MONGOL-CIV-ENEMY
;#load-if-not-defined UP-PERSIAN-CIV-ENEMY
;#load-if-not-defined UP-SARACEN-CIV-ENEMY
;#load-if-not-defined UP-SLAVIC-CIV-ENEMY
;#load-if-not-defined UP-SPANISH-CIV-ENEMY
;#load-if-not-defined UP-TURKISH-CIV-ENEMY
;#load-if-not-defined UP-TEUTONIC-CIV-ENEMY
;#load-if-not-defined UP-VIKING-CIV-ENEMY ;; goths - viks+japs too?
(defrule
(or	(up-compare-const stonewall-affinity <= 0)
	(and	(up-compare-const stonewall-affinity <= 1)
		(up-compare-const stonewall-affinity g:< strategy-affinity)))
=>
	(up-jump-rule 5))
(defrule
	(up-compare-goal strategy-type <= castle-war)
	(up-compare-goal strategy-type2 != water)
	(goal strategylocked no)
(or	(building-type-count-total gate-class >= 2)
	(building-type-count-total stone-wall-line >= 4))
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100)); test
(or	(strategic-number sn-current-age <= dfeudal)
	(up-compare-goal strategy-type <= feudal-war))
;	(players-building-count any-enemy <= 4)
	(game-time < 66)
=>
;	(up-modify-sn sn-home-exploration-time c:+ 60)
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal strategy-type <= feudal-war); castle?
	(up-compare-goal strategy-type2 != water); create extra rule (wg-/fs-r?) for that
	(goal strategylocked no)
	(up-compare-const ffa-game == yes)
;	(strategic-number sn-current-age <= dfeudal)
;	(players-building-count any-enemy <= 4)
	(game-time < 66)
=>
;	(up-modify-sn sn-home-exploration-time c:+ 60)
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(set-goal attackprioritychange yes))
(defrule
	(goal control-goal 7)
	(goal strategylocked no)
(or	(and	(goal strategy usual)
		(goal milunits yes))
	(up-compare-goal strategy-type == feudal-war))
;	(up-compare-goal islands <= no);
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
;	(goal milunits yes)
	(goal strategy usual)
	(goal strategylocked no)
	(up-research-status c: imperial-age == research-pending)
	(goal position-goal pocket)
	(goal champgoal no)
	(military-population < 20); for now
	(civilian-population < 90)
	(game-time < 2100)
	(up-research-status c: ri-man-at-arms <= research-available)
(nand	(goal uugoal yes)
	(building-type-count-total castle >= 1))
;	(up-compare-goal cozy <= no)
;	(up-compare-goal islands <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(disable-self))
;#load-if-not-defined UP-AZTEC-CIV-ENEMY
;#load-if-not-defined UP-BYZANTINE-CIV-ENEMY
;#load-if-not-defined UP-CELTIC-CIV-ENEMY
;#load-if-not-defined UP-GOTHIC-CIV-ENEMY
;#load-if-not-defined UP-JAPANESE-CIV-ENEMY
;#load-if-not-defined UP-VIKING-CIV-ENEMY
(defrule
	(goal strategy usual)
	(goal strategylocked no)
	(up-research-status c: imperial-age == research-pending)
	(goal champgoal no)
	(game-time < 2100)
	(up-gaia-type-count c: gold >= 6)
	(military-population < 20); for now
	(players-unit-type-count every-enemy militiaman-line <= 5)
	(up-research-status c: ri-man-at-arms <= research-available)
(nand	(goal uugoal yes)
	(building-type-count-total castle >= 1))
=>
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(disable-self))
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if

;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if


#end-if
#end-if
#end-if
#end-if


(defrule
	(goal strategy r-flush)
	(civ-selected turkish)
;	(up-compare-const a-rush-affinity >= 1)
	(up-research-status c: castle-age >= research-pending)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(set-goal attackprioritychange yes))

(defrule
	(goal strategy krush)
	(goal milunits krush)
	(up-compare-goal kr-var != 1)
	(up-compare-goal targetdistance >= 126);	(goal cozy yes)
	(strategic-number teambalance >= 0)
(or	(population-headroom >= 50)
	(civilian-population < min-number-vills))
	(goal position-goal pocket); For now.
	(game-time > 2)
	(game-time < 180)
; kran	(goal islands no)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal kr-var 1)
	(set-goal attackprioritychange yes)
	(disable-self))


(defrule
	(goal strategylocked no)
	(goal strategy a-rush)
	(unit-type-count-total archer-line < 3)
	(military-population < 4)
	(up-research-status c: ri-crossbow <= research-available)
	(up-compare-const ca-rush-affinity >= 3)
	(up-compare-goal islands <= no);
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy ca-rush)
	(set-goal milunits ca-rush)
	(set-goal attackprioritychange yes);
	(disable-self))

(defrule
	(game-time > 65); 180; 2
	(goal position-goal pocket)
	(goal milunits yes)
	(goal strategy usual)
	(up-compare-goal targetdistance >= 45)
	(goal underattack no)
	(goal defend no);
;	(game-time < 30); Krush follow-up?
	(strategic-number sn-current-age <= castlea)
	(building-type-count town-center >= 1)
=>
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Follow-up prov.")
	(disable-self))


(defrule
(not	(player-in-game any-human-enemy))
=>
	(up-jump-rule 6))
(defrule
(nor	(up-compare-const maa-var-affinity >= 3)
	(civilian-population < 24))
	(unit-type-count-total militiaman-line <= 0)
	(up-compare-goal strategy != drush)
=>
	(up-jump-rule 5))
(defrule
(or	(goal maa-var yes)
(or	(game-time >= 840)
(or	(up-compare-const maa-var-affinity <= 1); 0
(or	(up-compare-const drush-affinity <= 0);
(or	(up-compare-goal strategy != r-flush)
(or	(up-compare-const maa-var-affinity < r-flush-affinity)
(or	(up-compare-const maa-var-affinity g:< strategy-affinity)
	(up-compare-goal strategylocked == yes))))))))
=>
	(up-jump-rule 4))
(defrule
(or	(strategic-number sn-current-age >= fcastlea)
(or	(up-compare-goal sk-var != no);
(or	(up-compare-goal strategy-type != feudal-war)
(or	(goal position-goal pocket)
(or	(players-building-count focus-player <= 0)
	(up-compare-goal targetdistance >= 75)))))); 60
=>
	(up-jump-rule 3))
(defrule
;(or	(building-type-count-total barracks <= 0)
(or	(strategic-number sn-current-age >= feudal)
(or	(players-building-type-count focus-player mining-camp >= 1)
(or	(players-unit-type-count focus-player archer-line >= 1)
(or	(up-compare-sn sn-current-age g:< enemyState); <=
	(civilian-population >= 25)))));)
	(unit-type-count-total militiaman-line <= 0)
	(up-compare-goal strategy != drush)
=>
	(up-jump-rule 2))
(defrule
	(and	(strategic-number sn-current-age <= dark)
		(or	(unit-type-count-total villager < 21)
			(up-compare-goal total-food-amount < 500)))
	(unit-type-count-total militiaman-line <= 0)
	(up-compare-goal strategy != drush)
=>
	(up-jump-rule 1))
(defrule
	(true)
=>
;	(chat-to-player my-player-number "Strtl")
	(set-goal maa-var yes)); end jump
(defrule
(or	(game-time >= 1080)
(or	(strategic-number archers >= 15)
(or	(strategic-number cavalry >= 15)
(or	(up-research-status c: castle-age >= research-pending)
	(and	(up-research-status c: ri-man-at-arms >= research-pending)
		(unit-type-count-total militiaman-line >= 8))))))
	(up-compare-goal maa-var != no)
=>
	(chat-to-player my-player-number "Bmbr")
	(set-goal maa-var no))
(defrule
	(up-research-status c: castle-age >= research-available)
	(up-compare-goal strategy != r-flush)
	(up-compare-goal strategy-type != feudal-war)
(or	(up-compare-goal milunits != yes)
(or	(civilian-population >= 30)
	(game-time >= 840)))
	(up-compare-goal maa-var != no)
=>
	(chat-to-player my-player-number "Bmbr2")
	(set-goal maa-var no))
(defrule
	(strategic-number sn-current-age == dfeudal)
	(up-compare-goal strategy-type >= castle-war)
	(up-research-status c: ri-man-at-arms < research-pending)
	(unit-type-count-total militiaman-line <= drush-militias)
	(up-compare-goal maa-var != no)
=>
	(chat-to-player my-player-number "Bmbr3")
	(set-goal maa-var no))

(defrule
(or	(goal strategy drush)
	(and	(goal maa-var yes)
		(and	(up-compare-goal strategy-type == feudal-war)
			(players-military-population focus-player <= 1))))
	(up-compare-goal drushmicro <= no)
=>
	(set-goal drushmicro yes)
	(disable-self);
)
(defrule
	(up-compare-goal strategy != drush); not drushing anymore = attack over or strategy switch
(nand	(goal maa-var yes)
	(up-compare-goal strategy-type <= feudal-war))
(or	(unit-type-count militiaman-line < 1)
(or	(military-population >= 11)
	(and	(military-population >= 9)
		(up-compare-goal armytech >= castlea))))
	(up-compare-goal drushmicro != no)
=>
	(set-goal drushmicro no))


(defrule
(or	(up-compare-const sk-var-affinity <= 0)
(or	(up-compare-const sk-var-affinity < r-flush-affinity)
(or	(and	(up-compare-const sk-var-affinity <= r-flush-affinity)
		(up-compare-goal gl-random-number > 5))
(or	(civ-selected turkish); test
(or	(up-compare-goal strategy != r-flush)
(or	(up-compare-goal sk-var == yes)
;(or	(game-time >= 180)
	(up-compare-goal strategylocked == yes)))))));)
=>
	(up-jump-rule 2))
(defrule
(or	(and	(up-compare-sn sn-current-age g:< enemyState)
		(and	(players-civilian-population focus-player <= 25)
			(building-type-count-total mining-camp <= 0)))
(or	(up-compare-const a-rush-affinity <= 0)
	(and	(players-civ every-enemy mayan)
		(not	(civ-selected mayan)))))
=>
	(set-goal sk-var yes))
(defrule
	(up-compare-goal gl-random-number < 33); 33
(or	(and	(up-compare-const sk-var-affinity >= 1)
		(up-compare-goal gl-random-number < 7)); 8
(or	(and	(up-compare-const sk-var-affinity >= 2)
		(up-compare-goal gl-random-number < 17)); 17
	(up-compare-const sk-var-affinity >= 3)))
=>
	(set-goal sk-var yes)); end jump
(defrule
(or	(up-compare-goal strategy != r-flush)
	(civ-selected turkish))
	(goal sk-var yes)
	(up-compare-goal sk-var != no)
=>
	(set-goal sk-var no))
(defrule
	(up-compare-goal sk-var != yes)
	(civ-selected spanish)
	(up-research-status c: castle-age >= research-pending)
=>
	(set-goal sk-var yes))


(defrule
	(game-time > 53)
	(goal position-goal flank)
	(up-compare-goal targetdistance < 95)
	(up-compare-goal relocating <= no)
	(up-compare-goal milunits <= no); 0
	(up-compare-goal strategy-type >= imperial-war)
	(goal islands no); test
	(wall-completed-percentage 2 < 100)
	(wall-completed-percentage 1 < 100); test
	(strategic-number sn-current-age <= castlea);	(current-age <= feudal-age); test
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Messed up strategy selection, resetting.")
	(chat-to-player every-ally "Messed up strategy selection, resetting.")
;	(disable-self)
)
(defrule
	(goal strategy drush)
(or	(goal milunits no)
;(or	(strategic-number sn-current-age > feudal); doing that in General already
	(and	(strategic-number sn-current-age > dark)
		(building-type-count-total barracks <= 0)))
;)
=>
	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Still no barracks: Resetting strategy.")
	(chat-to-player every-ally "Cancelling my current strategy, i messed up."))
(defrule ; after drushing
	(up-compare-goal drushmicro != yes)
(or	(strategic-number sn-current-age >= feudal)
	(building-type-count-total barracks >= 1))
	(strategic-number sn-gather-defense-units == 0)
=>
	(up-full-reset-search)
;	(up-set-offense-priority c: villager-class c: 3) ; 7
	(up-set-offense-priority c: lumber-camp c: 3)
	(up-set-offense-priority c: mining-camp c: 3)
	(set-strategic-number sn-gather-defense-units 1)
	(up-set-attack-stance militiaman-line c: stance-aggressive)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1))
(defrule
	(up-compare-goal strategy-type2 != water);	(game-time > 54)
(or	(and	(goal strategy drush); drushmicro still on
		(unit-type-count-total militiaman-line >= drush-militias))
	(and	(current-age >= feudal-age)
		(and	(up-compare-goal strategy-type <= feudal-war)
			(and	(players-building-count every-enemy <= 0)
				(building-type-count market >= 1))))); blacksmith
=>
;	(up-modify-sn sn-home-exploration-time c:- 60)
	(set-goal strategy usual); no other strats got selected
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Hmm.")
;	(disable-self)
)
(defrule
	(and	(goal strategy s-flush)
		(strategic-number sn-current-age >= fcastlea))
=>
;	(up-modify-sn sn-home-exploration-time c:- 60)
	(set-goal strategy usual); no other strats got selected
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Hmm.")
;	(disable-self)
)
(defrule
	(up-compare-goal strategylocked != no)
(or	(and	(goal drushmicro yes)
		(up-compare-goal strategy != drush))
(or	(and	(up-compare-goal strategy-type <= feudal-war)
		(strategic-number sn-current-age >= fcastlea))
	(and	(goal strategy usual)
		(strategic-number sn-current-age >= imperial))))
=>
	(set-goal strategylocked no)
	(chat-local-to-self "Unlock strategy selection."))

(defrule
	(up-compare-goal strategy != usual)
	(up-compare-goal strategy-type >= castle-war)
	(strategic-number sn-current-age == feudal)
	(up-compare-goal total-food-amount < 369)
	(up-compare-goal position-goal != pocket); test
	(game-time > 180); test
	(wall-completed-percentage 2 < 100); test
	(wall-completed-percentage 1 < 100); test
	(current-age == feudal-age)
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "No food for FC: Resetting strategy.")
	(chat-to-player every-ally "Cancelling my current strategy, i messed up."))
(defrule
(or	(game-time <= 12)
(or	(players-building-count target-player <= 0); every-enemy
(or	(unit-type-count-total siege-weapon-class >= 1)
(or	(unit-type-count-total trebuchet-set >= 1)
(or	(up-compare-goal strategy == usual)
(or	(up-compare-goal strategy-type >= imperial-war)
	(and	(players-building-type-count target-player stone-wall-line <= 0)
		(players-building-type-count target-player gate <= 0))))))))
=>
	(up-jump-rule 3))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-find-local c: villager-class g: villagercount)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-remove-objects search-local object-data-index >= 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-target point-x)
	(up-get-path-distance point-x 0 temporary-goal)
	(up-modify-goal temporary-goal2 g:= targetdistance)
	(up-modify-goal temporary-goal2 c:* 2)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
	(up-compare-goal temporary-goal g:> temporary-goal2)
(or	(goal position-goal pocket);	(goal strategy krush)
	(and	(up-compare-goal temporary-goal >= 65535)
		(or	(strategic-number sn-military-superiority >= 0); s ; and
			(players-building-type-count every-enemy gate <= 0)))); for now
(or	(strategic-number sn-current-age >= fcastlea); test
	(players-building-count every-enemy >= 1))
=>
	(set-goal strategy usual)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Walled: Resetting strategy.")
;	(chat-to-player every-ally "Cancelling my current strategy, enemy walled."); end jump
)
(defrule
	(up-compare-goal local-total >= 1)
	(up-compare-goal temporary-goal g:> temporary-goal2)
	(goal position-goal flank);	(goal strategy krush)
(or	(strategic-number sn-current-age >= dfeudal); test
	(players-building-count every-enemy >= 1))
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Walled: Resetting strategy.2")
;	(chat-to-player every-ally "Cancelling my current strategy, enemy walled."); end jump
)

#load-if-defined UP-MULTIPLE-ENEMIES
(defrule
	(goal strategy r-flush)
(or	(players-building-type-count target-player town-center <= 0)
	(strategic-number target-civilian-superiority >= 18)); 18
	(strategic-number teamsuperiority >= 0); 1
	(strategic-number sn-military-superiority >= 3)
	(strategic-number target-civilian-superiority >= 6); 3
; 0	(goal attacking yes)
	(strategic-number sn-current-age >= fcastlea)
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, enemy almost dead.")
;	(chat-to-player every-ally "Cancelling my current strategy.")
;	(set-goal retreatnow yes); test
;	(enable-timer resetnow 22); test
)
(defrule
	(goal strategy r-flush)
	(goal sk-var yes)
(or	(gold-amount >= 400)
(or	(building-type-count-total town-center >= 5)
(or	(up-compare-goal tradeunits >= 10)
	(civilian-population >= 60))))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, don't overdo it.")
;	(chat-to-player every-ally "Cancelling my current strategy.")
;	(set-goal retreatnow yes); test
;	(enable-timer resetnow 22); test
)
#end-if

(defrule
	(up-compare-goal strategy-type2 != water)
=>
	(up-jump-rule 8))
(defrule
	(goal islands no)
	(strategic-number sn-current-age >= fcastlea)
	(building-type-count-total town-center >= 1); 3
	(up-compare-goal navycount >= 10)
(or	(up-compare-goal navycount >= 15)
	(up-compare-goal enemyfocusnavy < 4))
(or	(up-compare-goal navycount >= 20)
	(up-compare-goal enemyfocusnavy < 8))
	(up-compare-goal biggestenemynavy < 14); enemyfocusnavy
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, water control is ours.")
;	(chat-to-player every-ally "Cancelling my current strategy.")
)
(defrule
;	(strategic-number sn-current-age >= fcastlea)
(or	(up-compare-goal navycount g:> maxnavy); test
(or	(building-type-count-total town-center >= 3)
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop))))
	(up-compare-goal navycount g:>= maxnavy)
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, water control is ours.")
;	(chat-to-player every-ally "Cancelling my current strategy.")
)
(defrule
	(up-compare-goal enemyfocusnavy >= 8); biggestenemynavy
(or	(up-compare-goal biggestenemynavy >= 13)
	(up-compare-goal navycount < 4))
(or	(up-compare-goal biggestenemynavy >= 18)
	(up-compare-goal navycount < 8))
(or	(up-compare-goal biggestenemynavy >= 23)
	(up-compare-goal navycount < 12))
	(up-compare-goal navycount < 16)
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, water control is lost.")
;	(chat-to-player every-ally "Cancelling my current strategy.")
)
(defrule
(or	(game-time < 33)
	(and	(goal islands yes)
		(game-time < 333)))
=>
	(up-jump-rule 2))
(defrule
;(or
	(building-type-count-total town-center >= 1)
;	(game-time >= 330)); test
	(up-compare-goal strategy-type <= castle-war)
(or	(strategic-number sn-current-age >= feudal)
	(wood-amount >= 445)); 600
(or	(up-compare-goal strategy-type <= feudal-war)
	(strategic-number sn-current-age >= castlea))
(or	(building-type-count-total dock <= 0)
	(wood-amount >= 600)); 600; 475
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, no dock.1")
;	(chat-to-player every-ally "Cancelling my current strategy.")
)
(defrule
(or	(building-type-count-total town-center >= 1)
	(game-time >= 330)); test
	(up-compare-goal strategy-type <= feudal-war)
;	(goal strategy grush)
	(building-type-count-total dock <= 0)
(or	(strategic-number sn-current-age >= dfeudal)
	(game-time >= 490))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, no dock.2"); end mini jump
;	(chat-to-player every-ally "Cancelling my current strategy.")
)
(defrule
(or	(up-compare-goal targetdistance <= 22)
(or	(up-enemy-units-in-town >= 5); might be boats?
	(and	(goal strategy grush)
		(and	(strategic-number sn-current-age >= fcastlea)
			(up-compare-goal biggestenemynavy <= 0)))))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, grush stuff.")
;	(chat-to-player every-ally "Cancelling my current strategy.")
)
(defrule
	(goal position-goal flank)
(or	(building-type-count-total castle <= 0)
	(goal underattack yes))
(or	(strategic-number moenchesiege >= 7)
(or	(strategic-number cavalry >= 7)
(or	(strategic-number archers >= 7)
	(strategic-number infantry >= 7))))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, water strategy def.")
;	(chat-to-player every-ally "Cancelling my current strategy.") ; end jump of water strategies
)

(defrule
	(goal strategy s-flush)
(or	(strategic-number sn-current-age >= fcastlea)
	(and	(strategic-number sn-current-age <= dark)
		(unit-type-count-total villager >= 25)))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, s-flush expired.")
;	(chat-to-player every-ally "Cancelling my current strategy.")
)
(defrule
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal strategy != usual)
	(wall-completed-percentage 2 < 100)
	(wall-completed-percentage 1 < 100)
	(goal enemy-goal drush)
	(players-military-population target-player >= 5); test
	(goal defend yes); test
	(goal position-goal flank)
(or	(strategic-number sn-current-age <= feudal);	(current-age <= feudal-age)
	(players-unit-type-count target-player spearman-line >= 2))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, enemy drush hurt us too much.")
	(chat-to-player every-ally "Cancelling my current strategy, enemy drush hurt a lot."))
(defrule
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal strategy != usual)
	(wall-completed-percentage 2 < 100)
	(wall-completed-percentage 1 < 100)
	(goal enemy-goal flush)
	(goal position-goal flank)
(or	(strategic-number sn-current-age <= feudal);	(current-age <= feudal-age)
	(players-unit-type-count target-player spearman-line >= 2))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, enemy flushing.")
	(chat-to-player every-ally "Cancelling my current strategy, enemy flushing."))

(defrule
	(up-compare-goal strategy != castledrop)
=>
	(up-jump-rule 8))
(defrule
	(strategic-number sn-military-superiority <= -3)
(or	(players-current-age focus-player >= castle-age)
	(building-type-count castle <= 0))
(or	(goal defend yes)
	(goal position-goal flank))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, under heavy pressure.")
	(chat-to-player every-ally "Cancelling my current strategy, under pressure."))
(defrule
(or	(strategic-number sn-current-age <= feudal)
	(goal dreitc no))
	(goal position-goal pocket)
	(goal underattack no)
=>
	(up-jump-rule 2))
(defrule
(or	(up-compare-goal threat-source == dangerous-animal-class)
(or	(up-compare-goal threat-time >= 4000)
(or	(players-military-population every-enemy <= 1)
	(up-compare-goal milunits == yes))))
=>
	(up-jump-rule 1))
(defrule
	(goal attacking no);
(or	(up-compare-goal threat-target != scout-unit)
	(unit-type-count-total scout-unit >= 2))
(or	(strategic-number sn-military-superiority <= -1);	(goal position-goal flank)
(or	(and	(building-type-count castle <= 0)
		(and	(unit-type-count villager-stone <= 0)
			(strategic-number sn-military-superiority <= 0)))
	(building-type-count-total barracks >= 1)))
=>
	(set-goal milunits yes)
;	(set-goal dreitc yes) ; test
;	(set-goal attacking no)
;	(set-goal strategy usual)
;	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Milunits: Yes.")
;	(chat-to-player every-ally "Milunits: Yes.")
)
(defrule
	(up-compare-goal milunits != yes)
(or	(goal underattack yes)
(or	(goal defend yes)
;(or	(and	(up-enemy-units-in-town >= 8)
; test		(military-population < 16))
	(building-type-count-total town-center >= 5)));)
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, under heavy pressure.")
	(chat-to-player every-ally "Cancelling my current strategy, under pressure."))
(defrule
	(building-type-count-total castle <= 0)
	(stone-amount < castle-stone)
	(unit-type-count villager-stone <= 0)
(or	(and	(stone-amount <= 200)
		(strategic-number sn-current-age >= castlea));	(strategic-number sn-current-age >= fcastlea)
	(cc-players-unit-type-count 0 stone-mine <= 0))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, no stone.")
	(chat-to-player every-ally "Cancelling my current strategy, no stone."))
(defrule
	(building-type-count-total castle <= 0)
	(stone-amount < castle-stone)
	(unit-type-count villager-stone <= 0)
(or	(and	(dropsite-min-distance stone s:> sn-camp-max-distance)
		(strategic-number sn-current-age >= fcastlea)); dfeudal))
	(and	(building-type-count mining-camp >= 4)
		(dropsite-min-distance stone s:> sn-maximum-stone-drop-distance)))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, no stone.")
	(chat-to-player every-ally "Cancelling my current strategy, no stone."))
(defrule
	(game-time >= 180)
	(goal position-goal flank)
	(up-compare-goal threat-time < 3000)
(or	(current-age >= castle-age)
	(goal defend yes))
	(building-type-count-total castle <= 0)
	(stone-amount < castle-stone)
	(unit-type-count villager-stone <= 0)
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, under pressure.")
	(chat-to-player every-ally "Cancelling my current strategy, under pressure.")); end jump

(defrule
(or	(strategic-number sn-current-age < imperial)
	(up-compare-goal strategy != stonewall))
=>
	(up-jump-rule 5))
(defrule
	(strategic-number sn-military-superiority <= 2); 1
(or	(players-unit-type-count focus-player militiaman-line >= 10)
(or	(players-unit-type-count focus-player samurai-line >= 10)
(or	(players-unit-type-count focus-player teutonic-knight-line >= 8)
(or	(players-unit-type-count focus-player throwing-axeman-line >= 12)
	(players-unit-type-count focus-player berserk-line >= 10)))))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, we are being hard-countered.")
	(chat-to-player every-ally "Cancelling my current strategy."))
(defrule
	(strategic-number sn-military-superiority <= 2); 1
(or	(players-unit-type-count focus-player jaguar-man-line >= 8)
(or	(players-unit-type-count focus-player huskarl-line >= 12)
(or	(players-unit-type-count focus-player b-husk-line >= 12)
;(or	(players-unit-type-count focus-player knight-line >= 24)
	(players-unit-type-count focus-player cataphract-line >= 10))));)
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, we are being hard-countered.")
	(chat-to-player every-ally "Cancelling my current strategy."))
(defrule
	(strategic-number sn-military-superiority <= 2); 1
(or	(players-unit-type-count focus-player hand-cannoneer >= 16)
(or	(players-unit-type-count focus-player war-elephant-line >= 8)
	(players-unit-type-count focus-player mameluke-line >= 10)))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, we are being hard-countered.")
	(chat-to-player every-ally "Cancelling my current strategy."))
(defrule
	(current-age >= imperial-age)
(or	(and	(current-age-time >= 300)
		(up-research-status c: ri-elite-eagle-warrior < research-pending))
	(and	(current-age-time >= 600)
		(gold-amount < 50)))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, no EEW or gold.")
	(chat-to-player every-ally "Cancelling my current strategy."))
(defrule
	(gold-amount < 2000)
	(up-compare-goal relic-count < 17)
(or	(and	(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance);	sn-camp-max-distance)
		(strategic-number sn-current-age >= imperial))
	(and	(building-type-count mining-camp >= 6)
		(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance)))
=>
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting strategy, no gold available.")
	(chat-to-player every-ally "Cancelling my current strategy.")); end jump



(defrule
	(goal cozy yes)
	(strategic-number teambalance >= 0)
	(game-time > 2)
	(game-time < 300)
	(goal position-goal pocket); For now.
	(goal strategylocked no)
	(goal underattack no)
	(goal defend no)
	(strategic-number sn-current-age < imperial)
	(up-compare-goal milunits != no)
	(up-compare-goal milunits != castledrop)
	(up-compare-goal kr-var != 1)
=>
	(set-goal strategy usual)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
;	(chat-to-player my-player-number "Feeling cozy.1")
;	(disable-self)
)
(defrule
	(goal milunits yes)
	(goal strategy usual)
	(goal strategylocked no)
	(building-type-count castle >= 1)
	(goal position-goal pocket); For now.
	(goal underattack no)
	(goal defend no)
	(strategic-number sn-current-age < imperial);
;(or	(up-compare-goal cozy <= no)
;	(up-compare-goal milunits != no))
;	(up-compare-goal islands <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy usual)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Feeling cozy.2")
	(disable-self))
(defrule
	(up-compare-goal strategy-type <= feudal-war); castle?
	(up-compare-goal strategy-type2 != water); create extra rule (wg-/fs-r?) for that
	(goal strategylocked no)
	(up-compare-const ffa-game == yes)
	(up-compare-goal targetdistance >= 45)
;	(strategic-number sn-current-age <= dfeudal)
;	(players-building-count any-enemy <= 4)
	(game-time < 66)
=>
	(chat-to-player my-player-number "FFA.")
	(set-goal strategy usual)
	(set-goal milunits yes); no
	(set-goal attackprioritychange yes))
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal islands yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 1)); expect it to be walled for enemies too
(defrule
	(up-compare-goal strategy-type >= imperial-war)
	(up-compare-goal milunits != yes); cdrop?
	(goal strategylocked no)
	(up-compare-goal total-food-amount < 1100)
(or	(up-compare-goal total-food-amount < 800)
	(strategic-number sn-current-age <= dark))
	(players-building-count target-player >= 1)
	(up-compare-goal targetdistance < 45)
;(or
	(building-type-count town-center >= 1)
;	(game-time >= 480))
	(strategic-number sn-current-age <= dfeudal)
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
;	(chat-to-player my-player-number "Too close.1")
)
(defrule
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal milunits != yes); cdrop?
	(goal strategylocked no)
	(players-building-count target-player >= 1)
(or	(goal underattack yes)
	(and	(up-compare-goal targetdistance < 25)
		(up-compare-goal total-food-amount < 800)))
;(or
	(building-type-count town-center >= 1)
;	(game-time >= 480))
	(strategic-number sn-current-age <= dfeudal)
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
;	(chat-to-player my-player-number "Too close.2")
)



(defrule
(or	(goal strategy usual)
	(goal strategy stonewall))
=>
	(up-jump-rule 1))
(defrule
(or	(civilian-population >= up-max-civ)
(or	(population >= del-civ-pop)
(or	(military-population >= 90); 100
(or	(and	(goal milunits no)
		(up-compare-goal strategy != sling))
	(strategic-number sn-current-age >= imperial)))))
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal attackprioritychange yes)
	(chat-local-to-self "End.")
;	(chat-to-player my-player-number "Resetting strategy for lategame.")
;	(chat-to-player every-ally "Cancelling my current strategy.")
)


(defrule
	(building-type-count town-center >= 1)
	(up-compare-goal targetdistance < 45)
=>
	(up-jump-rule 1))
(defrule
(or	(goal relocating yes)
	(goal underattack no))
	(up-compare-goal relocating >= 1)
	(player-in-game any-ally)
;testrl	(building-type-count-total town-center >= 1)
;(or	(up-compare-goal threat-time >= 30000); unreliable in this case
;	(goal attacking yes))
	(population < max-civ-pop)
(or	(population < up-max-civ)
	(population < 20))
	(up-compare-goal milunits != no)
=>
	(set-goal strategy usual)
	(set-goal milunits no)
;	(chat-local-to-self "End reloc.")
)

(defrule
;(or	(up-compare-goal position-goal != pocket); was only fort
;(or	(nor	(map-type arena)
;		(map-type fortress))
;(or	(and	(building-type-count-total gate-class < 2)
;		(building-type-count-total stone-wall-line < 4))
(or	(up-compare-goal strategylocked != no)
(or	(strategic-number sn-current-age >= imperial)
(or	(and	(building-type-count-total gate-class < 2)
		(building-type-count-total stone-wall-line < 4))
	(and	(wall-completed-percentage 2 < 100)
		(wall-completed-percentage 1 < 100))))); test
;)))
=>
	(up-jump-rule 1))
(defrule
	(game-time > 22)
	(game-time < 66)
(or	(up-compare-goal strategy-type <= castle-war)
	(and	(goal strategy usual)
		(up-compare-goal milunits != no)))
	(up-compare-goal strategy-type2 != water)
(or	(strategic-number sn-current-age <= dfeudal)
	(up-compare-goal strategy-type <= feudal-war))
;	(players-building-count any-enemy <= 4)
=>
	(set-goal strategy usual)
	(set-goal milunits no); yes
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Walled?")); end jump - end strat non-michi

(defrule
	(strategic-number sn-current-age < imperial)
	(goal underattack no)
	(up-compare-goal milunits != no)
	(building-type-count town-center >= 1)
	(goal position-goal pocket);
	(goal islands yes)
=>
	(set-goal strategy usual)
	(set-goal milunits no)
	(chat-local-to-self "Islands prov.")
	(disable-self))

#load-if-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-current-age < imperial)
	(goal underattack no)
(or	(up-compare-goal milunits != no)
	(up-compare-goal strategy != usual))
=>
	(set-goal strategy usual)
	(set-goal milunits no)
	(chat-local-to-self "Michi.")
	(disable-self))
(defrule
	(goal milunits no)
	(goal strategy usual)
(or	(up-enemy-units-in-town > 0)
	(strategic-number sn-current-age >= imperial))
	(up-compare-goal relocating <= no); test
=>
;	(chat-local-to-self "I'll stop booming now.")
	(set-goal milunits yes))
#else

(defrule
	(goal milunits yes)
;	(goal strategy usual)
(or	(building-type-count-total archery-range >= 1)
(or	(building-type-count-total stable >= 1)
	(building-type-count-total barracks >= 2)))
	(strategic-number sn-current-age <= feudal)
	(up-compare-goal enemy-goal == 0)
	(players-building-count any-enemy >= 1)
	(goal islands no)
	(goal position-goal flank)
	(players-military-population every-enemy < 2)
=>
	(set-goal milunits 101)
;	(chat-local-to-self "Waiting for the enemy to make the first move.")
	(disable-self))
(defrule
	(goal milunits 101)
;	(strategic-number sn-current-age >= feudal)
;	(goal islands no)
;	(goal position-goal flank)
(or	(up-compare-goal enemy-goal != 0)
(or	(players-military-population any-enemy >= 2)
	(strategic-number sn-current-age >= imperial)))
=>
	(set-goal milunits yes)
;	(chat-local-to-self "Milunits enabled, scouting the current target player.")
	(up-send-scout group-type-land-explore scout-enemy))
#end-if; was no michi

(defrule
(or	(up-compare-goal milunits != no)
	(up-compare-goal strategy != usual))
=>
	(up-jump-rule 6))
(defrule
(or	(goal islands yes)
	(and	(or	(wall-completed-percentage 2 >= 100)
			(wall-completed-percentage 1 >= 100)); test
		(or	(building-type-count-total gate-class >= 2)
			(building-type-count-total stone-wall-line >= 4))))
(or	(and	(up-enemy-units-in-town > 4); change for sling
		(strategic-number sn-military-superiority <= 0))
	(strategic-number sn-current-age >= imperial))
=>
;	(chat-local-to-self "I'll stop booming now.")
	(set-goal milunits yes))
(defrule
	(up-compare-goal position-goal == flank)
(or	(and	(or	(strategic-number sn-military-superiority <= -1)
		(or	(players-military-population any-enemy >= 2); test
			(goal defend yes)))
		(up-compare-goal relocating <= no)); test
(or	(up-enemy-units-in-town > 4)
;nn (or	(goal underattack yes)
	(building-type-count-total town-center >= 3)));)
=>
;	(chat-local-to-self "I'll stop booming now.")
	(set-goal milunits yes))
(defrule
(or	(and	(goal defend yes)
		(up-compare-goal relocating <= no)); test
	(goal underattack yes))
;(or	(gold-amount >= 1200)
;(or	(strategic-number teamsuperiority <= -3)
;(or	(strategic-number sn-military-superiority <= -3)
;(or	(goal researchplan yes)
;	(goal defend yes)))))
=>
;	(chat-local-to-self "I'll stop booming now.")
;	(chat-to-player every-computer-ally "I'll stop booming now.")
	(set-goal milunits yes))
(defrule
	(up-compare-goal relocating <= no)
(or	(and	(and	(strategic-number teamsuperiority <= -1); 0; test
			(or	(strategic-number teamsuperiority <= -2)
				(strategic-number sn-military-superiority <= -1)))
		(up-compare-goal cozy <= no))
(or	(population >= max-civ-pop)
(or	(civilian-population >= up-max-civ)
	(strategic-number sn-current-age >= imperial))))
=>
;	(chat-local-to-self "I'll stop booming now.")
;	(chat-to-player every-computer-ally "I'll stop booming now.")
	(set-goal milunits yes))
(defrule
	(building-type-count town-center >= 1);	(up-compare-goal relocating <= no)
	(strategic-number sn-maximum-town-size <= 36)
	(enemy-buildings-in-town)
(or	(players-building-type-count focus-player watch-tower >= 2)
(or	(players-building-type-count focus-player bombard-tower >= 2)
	(players-building-type-count focus-player castle >= 2)))
	(strategic-number sn-military-superiority <= 1)
; tl	(military-population < 15)
=>
;	(chat-local-to-self "I'll stop booming now.")
;	(chat-to-player every-computer-ally "I'll stop booming now.")
	(set-goal milunits yes))
(defrule
	(up-compare-goal relocating <= no)
	(town-under-attack)
	(military-population < 9)
(or	(goal underattack yes)
(or	(goal defend yes)
	(and	(up-enemy-units-in-town > 4)
		(up-enemy-units-in-town g:> my-mpop))))
=>
;	(chat-local-to-self "I'll stop booming now.")
;	(chat-to-player every-computer-ally "I'll stop booming now.")
	(set-goal milunits yes)); end jump

;(defrule
;	(goal position-goal flank)
;	(strategic-number sn-current-age == fcastlea)
;(not	(goal enemy-goal 0))
;(or	(strategic-number sn-military-superiority <= -1)
;	(goal defend yes))
;	(goal Multiplayer yes)
;=>
;	(set-goal enemy-goal rush)
;	(disable-self))

(defrule
	(goal strategy usual)
(nor	(goal milunits yes)
(or	(goal milunits no)
	(goal milunits 101)))
=>
	(chat-to-player my-player-number "Debugging milunits goal.")
	(set-goal milunits yes)
	(up-jump-rule 4))
(defrule
	(goal strategy castledrop)
(nor	(goal milunits castledrop)
	(goal milunits yes))
=>
	(chat-to-player my-player-number "Debugging milunits goal.2")
	(set-goal milunits yes)
	(up-jump-rule 3))
(defrule
	(goal strategy sling)
(nor	(goal milunits no)
	(goal milunits yes))
=>
	(chat-to-player my-player-number "Debugging milunits goal.3")
	(set-goal milunits yes)
	(up-jump-rule 2))
(defrule
	(goal strategy stonewall)
(nor	(goal milunits stonewall)
	(goal milunits no))
=>
	(chat-to-player my-player-number "Debugging milunits goal.4")
	(set-goal strategy usual)
	(set-goal milunits yes)
	(up-jump-rule 1))
(defrule
	(up-compare-goal strategy != usual)
	(up-compare-goal strategy != castledrop)
	(up-compare-goal strategy != sling)
	(up-compare-goal strategy != stonewall)
	(up-compare-goal milunits g:!= strategy)
=>
	(chat-to-player my-player-number "Debugging milunits goal.5")
	(up-modify-goal milunits g:= strategy))
;	(set-goal milunits yes)
;;	(set-goal attacking no)
;	(set-goal strategy usual)
;	(set-goal attackprioritychange yes))



#load-if-not-defined WONDER-RACE
#load-if-not-defined REGICIDE
#load-if-not-defined ARENA-MAP
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined BLACK-FOREST-MAP
#load-if-not-defined OASIS-MAP
(defrule; hm
(or	(game-time >= 67)
(or	(goal nomad yes); test
(or	(and	(up-compare-goal position-goal == flank)
		(and	(up-compare-goal targetdistance >= 126); test
			(strategic-number teambalance >= 0)))
(or	(and	(up-compare-goal targetdistance >= 144); 150 ; test
		(strategic-number teambalance >= 0))
	(goal cozy yes)))))
=>
	(up-jump-rule 7))
(defrule
(or	(not	(player-in-game any-ally))
(or	(game-time <= 55)
(or	(or	(building-type-count-total gate-class >= 2)
		(building-type-count-total stone-wall-line >= 4))
	(or	(wall-completed-percentage 2 >= 100)
		(wall-completed-percentage 1 >= 100))))); test
=>
	(up-jump-rule 6))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number))
(defrule
	(up-compare-goal aggressivestrat != 24)
	(up-compare-goal aggressivestrat != 1)
	(goal map land)
	(up-allied-goal any-computer-ally comsystem == 3453)
=>
	(up-find-player ally find-closest alliedplayer)
	(up-modify-sn sn-focus-player-number g:= alliedplayer)
	(disable-self))
(defrule
	(up-compare-goal aggressivestrat != 24)
	(up-compare-goal aggressivestrat != 1)
	(goal map land)
(or	(not	(up-allied-goal focus-player comsystem == 3453))
	(and	(goal position-goal pocket)
		(not	(up-allied-goal focus-player position-goal == flank))))
	(up-compare-goal alliedplayer >= 1)
=>
	(up-find-player ally find-closest alliedplayer)
	(up-find-next-player ally find-closest alliedplayer)
	(up-modify-sn sn-focus-player-number g:= alliedplayer)
	(disable-self))
(defrule
	(up-compare-goal aggressivestrat != 24)
	(up-compare-goal aggressivestrat != 1)
	(goal strategylocked no)
	(up-allied-goal focus-player comsystem == 3453)
	(up-allied-goal focus-player aggressivestrat == 24)
	(up-compare-goal alliedplayer >= 1)
=>
	(set-goal aggressivestrat 1)
	(up-modify-sn sn-focus-player-number g:= target-player)
	(set-goal alliedplayer 0)
	(chat-local-to-self "Next ally aggressive, searching for aggressive strategy.")
;	(chat-to-allies "Adjusting strategy to ally => Going aggressive.")
)
(defrule
	(up-compare-goal aggressivestrat != 24)
	(up-compare-goal aggressivestrat != 1)
	(goal strategylocked no)
	(goal position-goal pocket)
	(up-allied-goal focus-player comsystem == 3453)
	(up-allied-goal focus-player aggressivestrat != 24)
	(up-allied-goal focus-player aggressivestrat != 1)
	(up-allied-goal focus-player identity == Promi)
	(up-allied-goal focus-player strategy == krush)
	(up-compare-goal alliedplayer >= 1)
=>
	(set-goal aggressivestrat krush); 3
	(up-modify-sn sn-focus-player-number g:= target-player)
	(set-goal alliedplayer 0)
	(chat-local-to-self "Next ally krushing too.")
;	(chat-to-allies "I see you are krushing too.")
)
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if


(defrule; update affinities
	(up-compare-goal jump-rule-goal <= 0)
	(up-compare-goal current-rule-id >= 0)
	(up-compare-goal current-rule-id <= 9999)
=>
	(set-goal jump-rule-goal 1)
	(up-get-rule-id next-rule-id)
;	(up-chat-data-to-player my-player-number "jt2: %d" g: next-rule-id)
	(up-jump-direct g: current-rule-id)
;	(up-chat-data-to-player my-player-number "jt: %d" g: current-rule-id)
)
(defrule
	(up-compare-goal strategy != usual)
	(up-compare-goal strategy-affinity <= 0)
=>
	(chat-to-player my-player-number "Fixing affinity.")
	(chat-to-player every-ally "Fixing affinity.")
	(set-goal strategy usual)
	(set-goal milunits no); yes
	(set-goal attackprioritychange yes)
	(set-goal strategy-affinity 0))

(defrule
	(game-time > 2)
	(goal strategy drush)
	(up-compare-goal strategy-type != dark-war)
=>
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Preparing to fight in the dark-age.")
	(set-goal strategy-type dark-war))
(defrule
	(game-time > 2)
(or	(goal strategy sling);
(or	(goal strategy grush)
(or	(goal strategy r-flush)
(or	(goal strategy s-flush)
	(and	(goal strategy usual)
		(up-compare-goal enemy-goal == flush))))));
	(up-compare-goal strategy-type != feudal-war)
=>
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Preparing to fight in the feudal-age.")
	(set-goal strategy-type feudal-war))
(defrule
	(game-time > 2)
(or	(goal strategy krush)
(or	(goal strategy ca-rush)
	(goal strategy a-rush)))
	(up-compare-goal strategy-type != castle-war)
=>
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Preparing to fight in the castle-age.")
	(set-goal strategy-type castle-war))
(defrule
	(game-time > 2)
;(or	(goal strategy sling)
(or	(goal strategy stonewall)
(or	(and	(goal strategy usual)
		(up-compare-goal enemy-goal != flush))
	(goal strategy castledrop)));)
	(up-compare-goal strategy-type != imperial-war)
=>
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Preparing to fight in the imperial-age.")
	(set-goal strategy-type imperial-war))
(defrule
	(game-time > 2)
(or	(up-compare-goal strategy-type <= castle-war)
	(goal strategy stonewall))
	(up-compare-goal aggressivestrat != 24)
=>
	(set-goal aggressivestrat 24))
(defrule
	(game-time > 2)
(nor	(up-compare-goal strategy-type <= castle-war)
	(goal strategy stonewall))
	(up-compare-goal aggressivestrat == 24)
=>
	(set-goal aggressivestrat 0))
(defrule
	(game-time > 2)
	(up-compare-goal strategy != grush)
	(up-compare-goal strategy-type2 != land)
=>
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Land-strategy.")
	(set-goal strategy-type2 land))
(defrule
	(game-time > 2)
	(up-compare-goal strategy == grush)
	(up-compare-goal strategy-type2 != water)
=>
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Water-strategy.")
	(set-goal strategy-type2 water))