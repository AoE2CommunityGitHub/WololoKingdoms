
; TO-DO: Detect victory wins
; TO-DO: Turks to consider making stable
; TO-DO: Consider battering rams earlier instead of mangonels if detected towers near base
; TO-DO: Add costs data for AOF/AK/ROR civs.
; TO-DO: Switch to water when overwhlemed by naval vessels
; TO-DO: Galley train forever (no blacksmith or market...)
; TO-DO: Does not attack with ships
; TO-DO: No imperial navy

(defconst sea-fish 905)
(defconst shore-fish 933)
(defconst temporary-goal1 100)
(defconst gl-pause-tsa 391)
(defconst gl-new-town-size 450)
(defconst gl-enable-tsa 392)
(defconst sn-military-level 190)
(defconst gl-data-enemy-military-population 104)
(defconst gl-data-military-population 105)
(defconst gl-map-style 214)
(defconst gl-player 106)
(defconst sn-castle-age-strategy 182)
(defconst gl-enemy-strategy 107)
(defconst temporary-goal2 108)
(defconst temporary-goal3 109)
(defconst gl-data-enemy-score 110)
(defconst sn-enemy-current-age 183)
(defconst gl-enemy-score-current 111)
(defconst gl-enemy-score-diff 112)
(defconst gl-enemy-score-prev 113)
(defconst relic 285)
(defconst monk-with-relic 286)
(defconst genitour-placeholder 1079)
(defconst rax-huskarl 759)
(defconst rax-elite-huskarl 761)
(defconst ri-anarchy 16)
(defconst condottiero-placeholder 184)
;(defconst ri-obsidian-arrows 485)
(defconst temporary-goal4 114)
(defconst siege-tower 885)
(defconst ri-elite-cannon-galleon ri-deck-guns)
(defconst sn-ttkfactor-scalar 291)
(defconst temporary-goal 121)
(defconst gl-fast-castle 124)
(defconst gl-position-enemy-x 305)
(defconst gl-position-enemy-y 306)
(defconst gl-position-self-x 478)
(defconst gl-position-self-y 479)
(defconst gl-retreat-reset 126)
(defconst villager-m-lumberjack 123)
(defconst villager-f-lumberjack 218)
(defconst dead-m-lumberjack 228)
(defconst dead-f-lumberjack 219)
(defconst dead-f-miner 221)
(defconst dead-m-miner 229)
(defconst dead-m-builder 225)
(defconst dead-f-builder 213)
(defconst villager-m-forager 120)
(defconst villager-f-forager 354)
(defconst gl-deer-left 409)
(defconst deer 65)
(defconst gl-my-boars 198)
(defconst gl-boars-total 199)
(defconst gl-boar-count 291)
(defconst gl-boar-diff 292)
(defconst wild-boar 48)
(defconst javelina 822)
(defconst gl-object-point-x 202)
(defconst gl-object-point-y 203)
(defconst forage-bush 59)
(defconst gl-berries-left 298)
(defconst gl-boar-lurer-search 299)
(defconst gl-sheep-diff 238)
(defconst gl-sheep-count 239)
(defconst gl-sheep-sum 241)
(defconst gl-deer-lure-hunters 242)
(defconst gl-forward-tower 243)
(defconst gl-flare-target-unit 244)
(defconst gl-help-phase 256)
(defconst gl-under-attack 11) ; used by Barbarian, Horde, Promi, Juggernaut and other AI's.
(defconst gl-threat-time 500)
(defconst gl-threat-player 501)
(defconst gl-threat-source 502)
(defconst gl-threat-target 503)
(defconst unpacked-trebuchet 42)
(defconst packed-trebuchet 331)
(defconst gl-scary-object-x 204)
(defconst gl-scary-object-y 205)
(defconst gl-market-control 260)
(defconst gl-data-civilian-population 433)
(defconst gl-data-enemy-civilian-population 434)
(defconst villager-forager-m 120)
(defconst villager-forager-f 354)
(defconst gl-sheep-diff 238)
(defconst gl-sheep-count 239)
(defconst gl-sheep-sum 241)
(defconst gl-half-exploration-time 293)
(defconst gl-identity 420)
(defconst position-goal 46)
(defconst flank 1)
(defconst pocket 2)
(defconst mill-style 1)
(defconst gl-can-boom 294)
(defconst jaguar-warrior-line jaguar-man-line)
(defconst gl-tsa-duc 295)
(defconst gl-position-target-x 296)
(defconst gl-position-target-y 297)
(defconst scout-class 947)
(defconst gl-retreating-phase 301)
(defconst sn-escrow-level 208)
(defconst gl-old-deer 302)
(defconst saving-wood 2000)
(defconst saving-gold 2001)
(defconst saving-food 2002)
(defconst temporary-goal14 303)
(defconst flank-wheel-barrow 2003)
(defconst save-mangonel-2 2004)
(defconst gl-ally-player 304)
(defconst sn-allow-direct-unit-control 181)
(defconst sn-hide-in-buildings 183)
(defconst scout-cavalry-class 947)
(defconst gl-split-goal 209)
(defconst temporary-goal5 210)
(defconst gl-previous-strategy 211)
(defconst temporary-goal6 212)
(defconst gl-new-target-player 215)
(defconst gl-my-player-number 217)
(defconst wolf-class 910)
(defconst cliff-class 934)
(defconst tree-class 915)
(defconst gold-class 932)
(defconst stone-class 908)
(defconst forage-bush-class 907)
(defconst gl-castle-civ 223)
(defconst gl-unique-unit-type 224)
(defconst gl-anti-sling-player 226)
(defconst gl-starting-army 227)
(defconst sn-enemy-sling-target-player 85)
(defconst anti-sling-workshop 2004)
(defconst anti-sling-feudal-escrow 2005)
(defconst gl-projectile-threat-player 230)
(defconst gl-waypoint-x 231)
(defconst gl-waypoint-y 232)
(defconst gl-position-object-x 233)
(defconst gl-position-object-y 234)
(defconst gl-villager-training-control 235)
(defconst gl-flush-type 236)
(defconst gl-enemy-flush-type 237)
(defconst flushing 1234)
(defconst gl-previous-building-count 257)
(defconst sn-garrison-units-in-buildings 147)
(defconst gl-victory-player 263)
(defconst gl-victory-type 264)
(defconst gl-victory-time 265)
(defconst gl-slain-deer 266)
(defconst relic-class 942)
(defconst temporary-goal7 270)
(defconst temporary-goal9 271)
(defconst gl-game-time-mod 272)
(defconst wheel-barrow-2 3075)
(defconst temporary-goal10 280)
(defconst gl-send-help-x 281)
(defconst gl-send-help-y 282)
(defconst temporary-goal11 283)
(defconst temporary-goal12 284)
(defconst sn-allow-drush-defense 55)
(defconst gl-closest-ally 287)
(defconst gl-closest-flank-to-pocket 311)
(defconst temporary-goal13 289)
(defconst gl-super-pocket 290)
(defconst tc-run-escrow 3590) 
(defconst gl-running-phase 310)
(defconst save-for-market 5225)

(defconst gl-food-amount 460)
(defconst gl-wood-amount 461)
(defconst gl-gold-amount 462)
(defconst gl-stone-amount 463)
(defconst gl-food-adjust 464)
(defconst gl-wood-adjust 465)
(defconst gl-gold-adjust 466)
(defconst gl-stone-adjust 467)
(defconst gl-villager-count 468)
(defconst gl-resource-dist 469)

(defconst gl-cost-food 451)
(defconst gl-cost-wood 452)
(defconst gl-cost-stone 453)
(defconst gl-cost-gold 454)

(defconst sn-archer-threat 171)
(defconst sn-cavalry-threat 172)
(defconst sn-infantry-threat 173)



(defconst gl-position-center-x 192)
(defconst gl-position-center-y 193)

(defconst gl-scout-last-x 402)
(defconst gl-scout-last-y 403)

(defconst gl-scout-new-x 190)
(defconst gl-scout-new-y 191)

(defconst gl-map-size-x 394)
(defconst gl-map-size-y 395)

(defconst gl-scouting-phase 396)
(defconst gl-direction-scout 397)

(defconst gl-x-correction 267)
(defconst gl-y-correction 268)

; Define circle expansion size...

#load-if-defined TINY-MAP
(defconst map-circle-size 22)
(defconst min-exploration-percentage 5)
(defconst scout-radius-increase-time 50)
(defconst increase-value 2)
(defconst start-value 10)
#end-if
#load-if-defined SMALL-MAP
(defconst map-circle-size 44)
(defconst min-exploration-percentage 4)
(defconst scout-radius-increase-time 40)
(defconst increase-value 3)
(defconst start-value 14)
#end-if
#load-if-defined MEDIUM-MAP
(defconst map-circle-size 59)
(defconst min-exploration-percentage 3)
(defconst scout-radius-increase-time 20)
(defconst increase-value 4)
(defconst start-value 16)
#end-if
#load-if-defined NORMAL-MAP
(defconst map-circle-size 63)
(defconst min-exploration-percentage 2)
(defconst scout-radius-increase-time 3)
(defconst increase-value 5)
(defconst start-value 18)
#end-if
#load-if-defined LARGE-MAP
(defconst map-circle-size 80)
(defconst min-exploration-percentage 2)
(defconst scout-radius-increase-time 2)
(defconst increase-value 6)
(defconst start-value 20)
#end-if
#load-if-defined GIANT-MAP
(defconst map-circle-size 90)
(defconst min-exploration-percentage 2)
(defconst scout-radius-increase-time 1)
(defconst increase-value 7)
(defconst start-value 22)
#end-if


; gl-scouting-phase

(defconst ES-SCOUTING -2)
(defconst NEW-POINT 1)
(defconst MOVE-NEW-POINT 2)
(defconst ACKNOWNLEDGE-POINT 3)
(defconst HOME-EXPLORE 4)



; gl-flush-type

(defconst skirms 1)
(defconst archers 2)
(defconst scrush 3)
(defconst maa 4)
(defconst trashf 5)
(defconst feudal-navy-agro 6)
(defconst megaflush 7)

; gl-unqiue-unit-type

(defconst infantry-type 1)
(defconst archery-type 2)
(defconst cavalry-type 3)
(defconst gunpowder-type 4)
(defconst siege-type 5)

#load-if-defined AZTEC-CIV
(defconst blot-size 0)
#end-if
#load-if-defined MAYAN-CIV
(defconst blot-size 0)
#end-if
#load-if-defined INCAN-CIV
(defconst blot-size 0)
#end-if
#load-if-defined MONGOL-CIV
(defconst blot-size 0)
#end-if
#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MONGOL-CIV
(defconst blot-size 1)
#end-if
#end-if
#end-if
#end-if

#load-if-defined UP-POCKET-POSITION
(defconst min-army-size 6)
#else
(defconst min-army-size 20)
#end-if




; gl-identity

(defconst Unknown 69)
(defconst Illuminati 123)
(defconst Promi 420)
(defconst Barbarian 4651)
(defconst BruteForce 1001)
(defconst Horde 666)
(defconst CoT 999) ; for debug
(defconst TRiBaL 1234)
(defconst Doomsday 42)
(defconst Meleon 2197)

; AI names

(defconst illu "Illuminati") ; i like teasing Aleph :D


#load-if-defined AZTEC-CIV
(defconst scout-unit eagle-warrior-line)
(defconst big-boy-armor ri-chain-mail)
#end-if
#load-if-defined MAYAN-CIV
(defconst scout-unit eagle-warrior-line)
(defconst big-boy-armor ri-chain-mail)
#end-if
#load-if-defined INCAN-CIV
(defconst scout-unit eagle-warrior-line)
(defconst big-boy-armor ri-chain-mail)
#end-if
#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined INCAN-CIV
(defconst scout-unit scout-cavalry-line)
(defconst big-boy-armor ri-chain-barding)
#end-if
#end-if
#end-if
; search-state

(defconst gl-local-total 100)
(defconst gl-local-last 101)
(defconst gl-remote-total 102)
(defconst gl-remote-last 103)
(defconst italian 19)
(defconst indian 20)
(defconst incan 21)
(defconst magyar 22)
(defconst slavic 23)
(defconst portuguese 24)
(defconst ethiopian 25)
(defconst malian 26)
(defconst berbers 27)
(defconst khmer 28)
(defconst malay 29)
(defconst burmese 30)
(defconst vietnamese 31)
(defconst stable-tarkan 886)
(defconst stable-elite-tarkan 887)
(defconst boyar 876)
(defconst elite-boyar 878)
(defconst kamayuk 879)
(defconst elite-kamayuk 881)
(defconst slinger 185)
(defconst ri-elite-magyar-huszar 472)
(defconst magyar-huszar 869)
(defconst elite-magyar-huszar 871)
(defconst ri-elite-elephant-archer 481)
(defconst elephant-archer 873)
(defconst elite-elephant-archer 875)
(defconst imperial-camel 897)
(defconst ri-elite-genoese-crossbow 468)
(defconst genoese-crossbowman 866)
(defconst elite-genoese-crossbowman 868)
(defconst heavy-eagle-warrior 753)
(defconst condottiero 184)
(defconst ri-chivalry 493)
(defconst ri-inquisition 492)
(defconst ri-sipahi 491)
(defconst ri-madrasah 490)
(defconst ri-ironclad 489)
(defconst ri-boiling-oil 488)
(defconst ri-nomads 487)
(defconst ri-panokseon 486)
(defconst ri-yasama 484)
(defconst ri-marauders 483)
(defconst ri-atlatl 460)
(defconst ri-war-wolf 461)
(defconst ri-greek-fire 464)
(defconst ri-chieftains 463)
(defconst ri-stronghold 482)
(defconst ri-great-wall 462)
(defconst ri-orthodoxy 512)
(defconst ri-druzhina 513)
(defconst ri-elite-boyar 504)
(defconst ri-andean-sling 516)
(defconst ri-couriers 517)
(defconst ri-elite-kamayuk 509)
(defconst ri-sultans 506)
(defconst ri-shatagni 507)
(defconst ri-imperial-camel 521)
(defconst ri-mercenaries 514)
(defconst ri-recurve-bow 515)
(defconst ri-silk-road 499)
(defconst ri-pavise 494)
(defconst ri-revetments 525)
(defconst ri-eagle-warrior 384)
(defconst ri-gillnets 65)
(defconst ri-hunting-dogs 526)
(defconst ri-obsidian-arrows 485)
;(defconst siege-tower 885)
(defconst upgraded-palisade-wall 119)
(defconst sea-tower 785)
(defconst sea-wall 788)
(defconst kamayuk-line -258)
(defconst elephant-archer-line -261)
(defconst genoese-crossbowman-line -262)
(defconst magyar-huszar-line -259)
(defconst boyar-line -260)

(defconst organ-gun 106)
(defconst elite-organ-gun 114)
(defconst feitoria 895)
(defconst caravel 162)
(defconst elite-caravel 183)
(defconst camel-archer 203)
(defconst elite-camel-archer 208)
(defconst genitour 223); 1079
(defconst elite-genitour 230)
(defconst gbeto 260)
(defconst elite-gbeto 418)
(defconst shotel-warrior 453)
(defconst elite-shotel-warrior 459)
(defconst camel-archer-line -285)
(defconst genitour-line -250)
(defconst shotel-line -251)
(defconst gbeto-line -252)
(defconst caravel-line -254)
(defconst organ-gun-line -253)
(defconst fire-galley 529)
(defconst demo-raft 527)
;(defconst siege-tower 1105)
(defconst ri-elite-camel-archer 565)
(defconst ri-elite-organ-gun 563)
(defconst ri-elite-gbeto 567)
(defconst ri-shotel 569)
(defconst ri-carrack 572)
(defconst ri-arquebus 573)
(defconst ri-royal-heirs 574)
(defconst ri-torsion 575)
(defconst ri-tigui 576)
(defconst ri-mandekalu 577)
(defconst ri-expeditions 578)
(defconst ri-camel-corps 579)
(defconst ri-elite-caravel 597)
(defconst ri-elite-genitour 599)
(defconst ri-arson 602)
(defconst ri-arrowslits 608)

; unit ids
(defconst ballista-elephant 760)
(defconst elite-ballista-elephant 891)
(defconst rattan-archer 784)
(defconst elite-rattan-archer 782)
(defconst arambai 823)
(defconst elite-arambai 811)
(defconst battle-elephant 774)
(defconst elite-battle-elephant 766)
(defconst karambit-warrior 836)
(defconst elite-karambit-warrior 830)
(defconst imperial-skirmisher 762)
; research ids
(defconst ri-elite-ballista-elephant 615)
(defconst ri-elite-karambit-warrior 617)
(defconst ri-elite-arambai 619)
(defconst ri-elite-rattan-archer 621)
(defconst ri-tusk-swords 622)
(defconst ri-double-crossbow 623)
(defconst ri-thalassocracy 624)
(defconst ri-forced-levy 625)
(defconst ri-howdah 626)
(defconst ri-manipur-cavalry 627)
(defconst ri-chatras 628)
(defconst ri-paper-money 629)
(defconst ri-elite-battle-elephant 631)
(defconst ri-imperial-skirmisher 655)
; unit lines
(defconst ballista-elephant-line -249)
(defconst rattan-archer-line -248)
(defconst arambai-line -247)
;(defconst battle-elephant -246)
(defconst karambit-warrior-line -245)

(load "Brutal2\UserPatchConst")

(defconst forage-food 907)
(defconst deer-food 909)
(defconst boar-food 910)
(defconst fish-food 933)
(defconst farm-food 949)
(defconst sheep-food 958)

; pop civilian caps
#load-if-not-defined POPULATION-CAP-EXTENDED
#load-if-defined POPULATION-CAP-25
(defconst max-civ 20)
(defconst max-feitoria 0)
#end-if
#load-if-defined POPULATION-CAP-50
(defconst max-civ 32)
(defconst max-feitoria 0)
#end-if
#load-if-defined POPULATION-CAP-75
(defconst max-civ 60)
(defconst max-feitoria 0)
#end-if
#load-if-defined POPULATION-CAP-100
(defconst max-civ 70)
(defconst max-feitoria 0)
#end-if
#load-if-defined POPULATION-CAP-125
(defconst max-civ 89)
(defconst max-feitoria 0)
#end-if
#load-if-defined POPULATION-CAP-150
(defconst max-civ 100)
(defconst max-feitoria 0)
#end-if
#load-if-defined POPULATION-CAP-175
(defconst max-civ 110)
(defconst max-feitoria 0)
#end-if
#load-if-defined POPULATION-CAP-200
(defconst max-civ 120) ; unlimited
(defconst max-feitoria 1)
#end-if
#end-if
#load-if-defined POPULATION-CAP-250
(defconst max-civ 140)
(defconst max-feitoria 2)
#end-if
#load-if-defined POPULATION-CAP-300
(defconst max-civ 160)
(defconst max-feitoria 3)
#end-if
#load-if-defined POPULATION-CAP-400
(defconst max-civ 180)
(defconst max-feitoria 4)
#end-if
#load-if-defined POPULATION-CAP-500
(defconst max-civ 200)
(defconst max-feitoria 5)
#end-if
#load-if-not-defined POPULATION-CAP-EXTENDED
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined POPULATION-CAP-50
#load-if-not-defined POPULATION-CAP-75
#load-if-not-defined POPULATION-CAP-100
#load-if-not-defined POPULATION-CAP-125
#load-if-not-defined POPULATION-CAP-150
#load-if-not-defined POPULATION-CAP-175
#load-if-not-defined POPULATION-CAP-200
(defconst max-civ 150) ; unlimited
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

; sn-current-enemy-age & sn-current-age stuff

(defconst dark -1)
(defconst feudal-transit 1)
(defconst feudal 2)
(defconst castle-transit 3)
(defconst CASTLE 4)
(defconst imperial-transit 5)
(defconst imperial 6)

#load-if-not-defined GOLD-RUSH-MAP
#load-if-not-defined OASIS-MAP
#load-if-not-defined ARABIA-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined COASTAL-MAP
#load-if-not-defined BLACK-FOREST-MAP
#load-if-not-defined HIGHLAND-MAP
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined FORTRESS-MAP
(defconst default-camp-distance 16) 
(defconst civilian-exploration-time 30)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-defined ARABIA-MAP
(defconst default-camp-distance 20) ; was 16
(defconst civilian-exploration-time 60)
#end-if
#load-if-defined OASIS-MAP
(defconst default-camp-distance 19)
(defconst civilian-exploration-time 40)
#end-if
#load-if-defined GOLD-RUSH-MAP
(defconst default-camp-distance 16)
(defconst civilian-exploration-time 25)
#end-if
#load-if-defined TEAM-ISLANDS-MAP
(defconst default-camp-distance 14)
(defconst civilian-exploration-time 30)
#end-if
#load-if-defined COASTAL-MAP
(defconst default-camp-distance 16)
(defconst civilian-exploration-time 30)
#end-if
#load-if-defined BLACK-FOREST-MAP
(defconst default-camp-distance 15)
(defconst civilian-exploration-time 25)
#end-if
#load-if-defined HIGHLAND-MAP
(defconst default-camp-distance 14)
(defconst civilian-exploration-time 30)
#end-if
#load-if-defined ISLANDS-MAP
(defconst default-camp-distance 14)
(defconst civilian-exploration-time 30)
#end-if
#load-if-defined FORTRESS-MAP
(defconst default-camp-distance 32)
(defconst civilian-exploration-time 20)
#end-if

; civ exploring

#load-if-defined CHINESE-CIV
(defconst civ-explorers 7)
#else
#load-if-defined MAYAN-CIV
(defconst civ-explorers 5)
#else
#load-if-defined HUN-CIV
(defconst civ-explorers 5)
#else
(defconst civ-explorers 2)
#end-if
#end-if
#end-if

; gl-map-style

(defconst OPEN 1)
(defconst CLOSED 2)
(defconst ARENA 3)
(defconst NOMAD 4)
(defconst LAND-NOMAD 5)
(defconst WATER 6)
(defconst MIGRATION 7)
(defconst MICHI 8)
(defconst GOLD-RUSH 9)
(defconst CONSIDER-FISH 10)
(defconst UNKNOWN -1)

; sn-castle-age-strategy

(defconst xbow 1)
(defconst end-game 2)
(defconst krush 3)
(defconst EAGLE-RUSH 4)
(defconst fast-castle 5)
(defconst eagle-rush 6)
(defconst conquistadors 7)
(defconst naval-fun 8)
(defconst klew 9)
(defconst castled 10)
(defconst booming 11)
(defconst lsr 12)
(defconst PIKEMAN 13)
(defconst DRUSH 14)
(defconst RUN 15) ; https://youtu.be/mw2kKyJu9gY?t=2m11s

#load-if-defined UP-GAME-WK
(defconst feudal-naval-unit fire-ship-line)
#else
(defconst feudal-naval-unit galley-line)
#end-if
#load-if-not-defined CHINESE-CIV
(defrule
	(up-gaia-type-count c: livestock-class == 0)
	(building-type-count-total town-center >= 1)
	(population-headroom > 0)
	(housing-headroom < 3)
	(up-pending-objects c: house < 1)
	(building-type-count-total house < 1)
	(up-can-build 0 c: house)
=>
	(up-assign-builders c: house c: 2)
	(set-strategic-number sn-placement-zone-size 1)
	(up-set-placement-data my-player-number villager c: 1)
	(up-build place-control  0 c: house)
)
(defrule
	(game-time < 7)
	(up-gaia-type-count c: livestock-class > 0)
	(building-type-count house < 1)
	(building-type-count-total town-center >= 1)
	(population-headroom > 0)
	(housing-headroom < 3)
	(up-pending-objects c: house < 2)
	(up-can-build 0 c: house)
=>
	(up-assign-builders c: house c: 2)
	(set-strategic-number sn-placement-zone-size 1)
	(up-set-placement-data my-player-number villager c: 1)
	(up-build place-control  0 c: house)
)
(defrule
	(building-type-count house > 0)
=>
	(up-assign-builders c: house c: 1)
	(disable-self)
)
#end-if
; set up castle civs 
(defrule
	(or(civ-selected briton)
	(or(civ-selected byzantine)
	(or(civ-selected celtic)
	(or(civ-selected chinese)
	(or(civ-selected korean)
	   (civ-selected mayan))))))
=>
	(set-goal gl-castle-civ 1)
	(disable-self)
)
(defrule
	(or(civ-selected mayan)
	(or(civ-selected mongol)
	(or(civ-selected saracen)
	(or(civ-selected spanish)
	   (civ-selected turkish)))))
=>
	(set-goal gl-castle-civ 1)
	(disable-self)
)
; set up unique unit types
; infantry
(defrule	
	(or(civ-selected aztec)
	(or(civ-selected celtic)
	(or(civ-selected frankish)
	(or(civ-selected gothic)
	(or(civ-selected japanese)
	(or(civ-selected teutonic)
	   (civ-selected viking)))))))
=>
	(set-goal gl-unique-unit-type infantry-type)
)
(defrule	
	(or(civ-selected malay)
	(or(civ-selected incan)
	(or(civ-selected malian)
	   (civ-selected ethiopian))))
=>
	(set-goal gl-unique-unit-type infantry-type)
)
; archery
(defrule
	(or(civ-selected indian)
	(or(civ-selected briton)
	(or(civ-selected chinese)
	(or(civ-selected korean)
	(or(civ-selected mayan)
	(or(civ-selected vietnamese)
	(or(civ-selected mongol)
	   (civ-selected berbers))))))))
=>
	(set-goal gl-unique-unit-type archery-type)
)
; gunpowder
(defrule
	(or(civ-selected burmese)
	(or(civ-selected spanish)
	   (civ-selected turkish)))
=>
	(set-goal gl-unique-unit-type gunpowder-type)
)
; siege
(defrule
	(or(civ-selected portuguese)
	   (civ-selected khmer))
=>
	(set-goal gl-unique-unit-type siege-type)
)
; cavalry
(defrule
	(or(civ-selected byzantine)
	(or(civ-selected hun)
	(or(civ-selected persian)
	(or(civ-selected saracen)
	(or(civ-selected slavic)
	   (civ-selected magyar))))))
=>
	(set-goal gl-unique-unit-type cavalry-type)
)
(defrule
	(true)
=>
	(set-strategic-number sn-cap-civilian-builders 25)
	(set-strategic-number sn-livestock-to-town-center 1)
	(set-strategic-number sn-enable-new-building-system 1)
	(set-strategic-number sn-enable-training-queue 1)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	;(set-strategic-number sn-dropsite-separation-distance 5)
	(set-strategic-number sn-disable-builder-assistance	1)
	(set-strategic-number sn-camp-max-distance 16)
	(set-strategic-number sn-mill-max-distance 32)
	;(set-strategic-number sn-defer-dropsite-update 1)
	;(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-strategic-number sn-enable-patrol-attack 1)
	(set-strategic-number sn-maximum-hunt-drop-distance 12)
	(set-strategic-number sn-maximum-town-size 10)
	(set-goal gl-new-town-size 10)
	(set-strategic-number sn-max-retask-gather-amount 10)
	(set-strategic-number sn-retask-gather-amount 0)
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-intelligent-gathering 1)
	(set-strategic-number sn-use-by-type-max-gathering 0)
	(set-strategic-number sn-gather-defense-units 1)
	(set-strategic-number sn-military-level 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-percent-enemy-sighted-response 0)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-enemy-current-age dark)
	(set-strategic-number sn-dropsite-separation-distance 1)
	(set-strategic-number sn-local-targeting-mode 1)
	;(set-strategic-number sn-ttkfactor-scalar 200)
	(set-strategic-number sn-percent-building-cancellation 10)
	(set-strategic-number sn-zero-priority-distance 250)
	(set-strategic-number sn-initial-exploration-required 0)
	(set-strategic-number sn-enemy-sling-target-player 0)
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-preferred-trade-distance 255)
	(set-strategic-number sn-consecutive-idle-unit-limit 0)
	(set-strategic-number sn-attack-winning-player 0)
	(set-strategic-number sn-attack-winning-player-factor 0)
	;(set-strategic-number sn-placement-fail-delta 1)
	;(set-strategic-number sn-placement-to-center 1)
	(set-strategic-number sn-blot-exploration-map 0)
	(set-strategic-number sn-blot-size blot-size)
	(set-strategic-number sn-escrow-level 0)
	(set-strategic-number sn-allow-direct-unit-control 0)
	(set-strategic-number sn-maximum-fish-boat-drop-distance 5)
	(set-goal gl-slain-deer 0)
	(up-setup-cost-data 1 gl-cost-food)
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-archer-threat 0)
	(set-strategic-number sn-infantry-threat 0)
	(set-strategic-number sn-cavalry-threat 0)
	;(set-strategic-number sn-disable-trade-evasion 1)
	;(set-strategic-number sn-disable-villager-garrison 1) ; 2 affects towers too
	;(set-strategic-number sn-target-point-adjustment 3) ; right
	(set-strategic-number sn-allow-drush-defense 0)
	(set-goal temporary-goal12 1) ; player 1 as default.
	(up-change-name "BruteForce") ; Make it easier for 1.5
	(disable-self)
)
(defrule
	(up-compare-sn sn-maximum-town-size g:> gl-new-town-size)
	(strategic-number sn-object-repair-level > 16384)
=>
	(up-modify-sn sn-object-repair-level c:- 16384)
	;(chat-local-to-self "TSA far: disabling siege repair")
)
(defrule
	(up-compare-goal gl-pause-tsa == 0)
	(up-compare-sn sn-maximum-town-size g:<= gl-new-town-size)
	(strategic-number sn-object-repair-level < 16384)
=>
	(up-modify-sn sn-object-repair-level c:+ 16384)
	;(chat-local-to-self "TSA off?: enabling siege repair")
)
(defrule
	(true)
=>
	(up-get-threat-data gl-threat-time gl-threat-player gl-threat-source gl-threat-target)
	(up-get-victory-data gl-victory-player gl-victory-type gl-victory-time)
	(up-get-projectile-player projectile-any gl-projectile-threat-player)
)
(defrule
	(current-age == dark-age)
=>
	(set-strategic-number sn-task-ungrouped-soldiers 1)
)
(defrule
	(current-age > dark-age)
=>
	(set-strategic-number sn-task-ungrouped-soldiers 0)
)
(defrule
	(true)
=>
	(set-strategic-number sn-wall-targeting-mode 1)
	(disable-self)
)
; tempo solution for patrol attack bug
;(defrule
;	(up-compare-goal gl-enable-tsa <= 1)
;=>
;	(up-modify-sn sn-enable-patrol-attack g:= gl-enable-tsa)
;)
;(defrule
;	(up-compare-goal gl-enable-tsa >= 2)
;=>
;	(set-strategic-number sn-enable-patrol-attack 1)
;)
(defrule
	(or(not(sheep-and-forage-too-far))
	   (resource-found food))
	(unit-type-count villager >= 7)
	(strategic-number sn-maximum-hunt-drop-distance < 32)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 32)
	(disable-self)
)
(defrule
	(building-type-count-total town-center >= 1)
	(building-type-count-total town-center < 2)
=>
	(set-strategic-number sn-town-center-placement mining-camp)
)
(defrule
	(building-type-count-total town-center >= 2)
	(building-type-count-total town-center < 3)
=>
	(set-strategic-number sn-town-center-placement lumber-camp)
)
(defrule
	(or(map-type yucatan)
	(or(map-type scandanavia)
	(or(map-type salt-marsh)
	(or(map-type arabia)
	(or(map-type highland)
	   (map-type ghost-lake))))))
	;   (map-type gold-rush)))))))
=>
	(set-goal gl-map-style OPEN)
	(set-strategic-number sn-home-exploration-time 360)
	;;(chat-local-to-self "open map detected.")
	(disable-self)
)
(defrule
	(map-type oasis)
=>
	(set-goal gl-map-style OPEN)
	(set-strategic-number sn-home-exploration-time 540)
;	;;(chat-local-to-self "oasis map detected")
	(disable-self)
)
(defrule
	(map-type mongolia)
=>
	(set-goal gl-map-style OPEN)
	(set-strategic-number sn-home-exploration-time 360)
	;;(chat-local-to-self "open map detected.")
	(disable-self)
)
(defrule
	;(or(map-type oasis)
	;(or(map-type highland)
	(or(map-size tiny)
	(or(map-size small)
	   (map-size medium)))
	(map-type black-forest)
	;   (map-type mongolia))
=>
	(set-goal gl-map-style CLOSED)
	(set-strategic-number sn-home-exploration-time 540)
	;;(chat-local-to-self "closed map detected.")
	(disable-self)
)
(defrule
	(nor(map-size tiny)
	(nor(map-size small)
	    (map-size medium)))
	(or(map-type black-forest)
	(or(map-type yucatan)
	   (map-type mongolia)))
=>
	(set-goal gl-map-style CLOSED)
	(set-strategic-number sn-home-exploration-time 540)
	;;(chat-local-to-self "closed map detected.")
	(disable-self)
)
(defrule
	(map-type gold-rush)
=>
	(set-goal gl-map-style GOLD-RUSH)
	(set-strategic-number sn-home-exploration-time 540)
	;;(chat-local-to-self "gold rush map detected.")
	(disable-self)
)
(defrule
	(not(map-type oasis))
	(not(map-type fortress))
	(not(map-type scandanavia))
	(cc-players-unit-type-count 0 shore-fish > 5)
	(cc-players-unit-type-count 0 sea-fish > 5)
=>
	(set-goal gl-map-style WATER)
	;(set-goal gl-navy-production 1) ; consider naval training
	(set-strategic-number sn-home-exploration-time 360)
	;;(chat-local-to-self "water map detected.")
	(disable-self)
)
(defrule
	(game-time < 5)
	(or(map-type fortress)
    (or(map-type arena)
		(building-type-count wall-class > 0)))
=>
	(set-goal gl-map-style ARENA)
	(set-strategic-number sn-home-exploration-time 360)
	;;(chat-local-to-self "walled map detected.")
	(disable-self)
)
(defrule
	(game-time < 5)
    (up-compare-goal gl-map-style != LAND-NOMAD)
	(or(map-type nomad)
		(building-type-count-total town-center == 0))
	(wood-amount >= 275)
	(stone-amount >= 100)
=>
	(set-goal gl-map-style NOMAD)
	(set-strategic-number sn-home-exploration-time 540)
	;;(chat-local-to-self "nomad map detected.")
	(disable-self)
)
(defrule
	(game-time < 5)
	(or(map-type nomad)
	   (building-type-count-total town-center == 0))
	(and(building-type-count-total town-center == 0)
	(or(wood-amount < 400) ; was 275
	   (stone-amount < 100)))
=>
	(set-goal gl-map-style LAND-NOMAD)
	(set-strategic-number sn-home-exploration-time 660)
	;;(chat-local-to-self "land nomad map detected.")
	(disable-self)
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(true)
=>
	(set-goal gl-map-style MICHI)
	(set-strategic-number sn-home-exploration-time 300)
	;;(chat-local-to-self "michi detected")
	(disable-self)
)
#end-if
#load-if-defined MIGRATION-MAP
(defrule
	(true)
=>
	(set-goal gl-map-style MIGRATION)
	(set-strategic-number sn-home-exploration-time 300)
	;;(chat-local-to-self "migration detected")
	(disable-self)
)
#end-if
(defrule
	(game-time < 5)
	(up-compare-goal gl-map-style == UNKNOWN)
=>
	(set-goal gl-map-style OPEN)
	;;(chat-local-to-self "Unknown map type, assume its open.")
	(disable-self)
)
(defrule
	(up-research-status c: feudal-age >= research-pending)
	(building-type-count dock < 1)
	(up-compare-goal gl-map-style == WATER)
	(not(map-type islands))
	(not(map-type team-islands))
=>
	(set-goal gl-map-style OPEN)
	;;(chat-local-to-self "FALSE WATER MAP?")
	(disable-self)
)
	
(defrule
	(up-compare-goal gl-map-style != LAND-NOMAD)
	(up-compare-goal gl-map-style != NOMAD)
	(current-age == dark-age)
	(game-time < civilian-exploration-time)
	(unit-type-count livestock-class < 1)
	(strategic-number sn-number-explore-groups != 4)
=>
	(set-strategic-number sn-cap-civilian-explorers civ-explorers)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-number-explore-groups civ-explorers)
	(set-strategic-number sn-total-number-explorers civ-explorers)
)
(defrule
	(up-compare-goal gl-map-style != LAND-NOMAD)
	(up-compare-goal gl-map-style != NOMAD)
	(building-type-count town-center > 0)
	(current-age == dark-age)
	(or(game-time > civilian-exploration-time)
	(or(building-type-count-total mill > 0)
	   (unit-type-count livestock-class >= 2)))	  
	(strategic-number sn-number-explore-groups != 4)	   
=>
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
)
(defrule
	(or(up-compare-goal gl-map-style == LAND-NOMAD)
	   (up-compare-goal gl-map-style == NOMAD))
	(building-type-count-total lumber-camp < 1)
	(strategic-number sn-number-explore-groups != 4)
=>
	(set-strategic-number sn-cap-civilian-explorers civ-explorers)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-number-explore-groups civ-explorers)
	(set-strategic-number sn-total-number-explorers civ-explorers)
)
(defrule
	(or(up-compare-goal gl-map-style == LAND-NOMAD)
	   (up-compare-goal gl-map-style == NOMAD))
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total town-center == 0)
	(strategic-number sn-number-explore-groups != 4)
=>
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
)
(defrule
	(or(up-compare-goal gl-map-style == LAND-NOMAD)
	   (up-compare-goal gl-map-style == NOMAD))
	(building-type-count-total town-center > 0)
	(strategic-number sn-number-explore-groups != 4)
=>
	(set-strategic-number sn-cap-civilian-explorers 1)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
)
(defrule
	(or(up-compare-goal gl-map-style == LAND-NOMAD)
	   (up-compare-goal gl-map-style == NOMAD))
	(building-type-count-total town-center > 0)
	(military-population > 0)
	(strategic-number sn-number-explore-groups != 4)
=>
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
)
(defrule
	(nor(up-compare-goal gl-map-style == LAND-NOMAD)
	    (up-compare-goal gl-map-style == NOMAD))
	(up-research-status c: ri-loom == research-complete)
	(building-type-count-total town-center > 0)
	(military-population == 0)
=>
	(set-strategic-number sn-cap-civilian-explorers 1)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
)
(defrule
	(nor(up-compare-goal gl-map-style == LAND-NOMAD)
	    (up-compare-goal gl-map-style == NOMAD))
	(up-research-status c: ri-loom == research-complete)
	(building-type-count-total town-center > 0)
	(military-population > 0)
=>
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
)
; boat exploring
(defrule
	(up-compare-goal gl-map-style == WATER)
=>
	(set-strategic-number sn-maximum-boat-explore-group-size 1)
	(set-strategic-number sn-minimum-boat-explore-group-size 1)
	(set-strategic-number sn-percent-half-exploration 100)
	(set-strategic-number sn-percent-exploration-required 100)
)
; set up targets
(defrule
	(true)
=>
	(up-get-fact player-number my-player-number gl-my-player-number)
	(up-get-fact military-population 0 gl-starting-army) ;uses this to check military against potential sling candidates
	;(up-chat-data-to-all "gl-my-player-number: %d" g: gl-my-player-number)
	(disable-self)
)
(defrule
	(up-research-status c: feudal-age >= research-pending)
=>
	(up-get-fact game-time 0 gl-game-time-mod)
	;(up-chat-data-to-self "gl-game-time-mod: %d" g: gl-game-time-mod)
	(up-send-scout group-type-land-explore scout-flank)
	(up-modify-goal gl-game-time-mod c:+ 120)
	(disable-self)
)
(defrule
	(game-time s:> sn-home-exploration-time)
	(strategic-number sn-focus-player-number <= 0)
	(up-compare-goal 86 != 1)
=>
	(up-find-player enemy find-closest gl-player)
	(up-modify-sn sn-focus-player-number g:= gl-player)
	(up-modify-sn sn-target-player-number g:= gl-player)
	(up-modify-goal gl-new-target-player s:= sn-target-player-number)
	;(chat-local-to-self "!!! Debug: Set up targets")
)
(defrule
	(game-time s:> sn-home-exploration-time)
	(player-in-game every-enemy)
	(up-timer-status 39 != timer-running)
	(up-compare-goal 86 != 1)
=>
	(up-find-player enemy find-closest gl-player)
	(up-modify-sn sn-focus-player-number g:= gl-player)
	(up-modify-sn sn-target-player-number g:= gl-player)
	(up-modify-goal gl-new-target-player s:= sn-target-player-number)
	(up-find-player enemy find-closest gl-player)
	(enable-timer 39 180)
	;(chat-to-all "Debug: Searching for closest target.")
	;(chat-local-to-self "!!! Debug: looking for closest target.")
)
(defrule
	(game-time s:> sn-home-exploration-time)
	(up-compare-goal gl-new-target-player < 1)
=>
	(set-goal gl-new-target-player 1)
	(up-find-player enemy find-closest gl-player)
	(up-modify-sn sn-focus-player-number g:= gl-player)
	(up-modify-sn sn-target-player-number g:= gl-player)
	(up-modify-goal gl-player g:= gl-new-target-player)
	;(chat-local-to-self "!!! Debug: reset gl-new-target-player to 1")
)
(defrule
	(game-time s:> sn-home-exploration-time)
	(up-compare-goal gl-new-target-player > 8)
=>
	(set-goal gl-new-target-player 1)
	(up-find-player enemy find-closest gl-player)
	(up-modify-sn sn-focus-player-number g:= gl-player)
	(up-modify-sn sn-target-player-number g:= gl-player)
	(up-modify-goal gl-player g:= gl-new-target-player)
	;(chat-local-to-self "!!! Debug: reset gl-new-target-player to 1")
)
(defrule
	(game-time s:> sn-home-exploration-time)
	(or(and(players-building-count target-player < 1)
	       (game-time > 1080))
	(or(not(player-in-game target-player))
	(or(players-stance target-player ally)
	   (up-compare-goal gl-new-target-player g:== gl-my-player-number))))
=>
	(set-goal gl-split-goal 1070)
)
(defrule
	(goal gl-split-goal 1070)
=>
	(up-modify-goal gl-new-target-player c:+ 1)
	(up-modify-sn sn-focus-player-number g:= gl-new-target-player)
	(up-modify-sn sn-target-player-number g:= gl-new-target-player)	
	(up-modify-goal gl-player g:= gl-new-target-player)
	;(up-chat-data-to-self "!!! Debug: NOT enemy Searching for new target: %d" s: sn-target-player-number)	
	(set-goal gl-split-goal 0)
	(up-jump-rule 1)
)
(defrule
	(game-time s:> sn-home-exploration-time)
	(up-compare-goal 86 != 1)
	(up-compare-sn sn-focus-player-number s:!= sn-target-player-number)
	(up-compare-goal gl-threat-time > 1000)
=>
	;(up-chat-data-to-all "!!! Warning: sn-focus-player-number does not match target-player: %d" s: sn-focus-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	;(up-chat-data-to-all "!!! Warning: Correcting sn-focus-player-number to target-player: %d" s: sn-focus-player-number)
)
;lets detect the sling enemy
#load-if-not-defined UP-1-PLAYER-TEAM
(defrule
	(game-time > 1200)
	(players-current-age any-enemy == feudal-age)
	(players-military-population any-enemy g:<= gl-starting-army)
	(players-current-age-time any-enemy >= 300)
	(up-compare-goal gl-anti-sling-player < 1)
=>
	(set-goal gl-anti-sling-player 1)
	(up-find-player enemy find-closest gl-player)
	(up-modify-sn sn-focus-player-number g:= gl-player)
	(up-modify-sn sn-target-player-number g:= gl-player)
	;(chat-local-to-self "!!! Debug: reset gl-anti-sling-player to 1")
)
(defrule
	(game-time > 1200)
	(players-current-age any-enemy == feudal-age)
	(players-military-population any-enemy g:<= gl-starting-army)
	(players-current-age-time any-enemy >= 300)
	(up-compare-goal gl-anti-sling-player >= 8)
	(strategic-number sn-enemy-sling-target-player == 0)
=>
	(set-goal gl-anti-sling-player 1)
	(up-find-player enemy find-closest gl-player)
	(up-modify-sn sn-focus-player-number g:= gl-player)
	(up-modify-sn sn-target-player-number g:= gl-player)
	;(chat-local-to-self "!!! Debug: reset gl-anti-sling-player to 1")
)
(defrule
	(game-time > 1200)
	(players-current-age any-enemy == feudal-age)
	(players-military-population any-enemy g:<= gl-starting-army)
	(players-current-age-time any-enemy >= 300)
	(up-compare-goal gl-anti-sling-player <= 8)
	(strategic-number sn-enemy-sling-target-player == 0)
=>
	(up-modify-goal temporary-goal s:= sn-target-player-number)
	(up-modify-sn sn-target-player-number g:= gl-anti-sling-player)
	(up-modify-goal gl-anti-sling-player c:+ 1)
	;(up-chat-data-to-self "!!! Debug: Look at this player I just found, is he slinging?: %d" s: sn-target-player-number)
)
;(defrule
;	(or(not(player-in-game target-player))
;	(or(players-stance target-player ally)
;	   (up-compare-sn sn-target-player-number g:== gl-my-player-number)))
;	(strategic-number sn-enemy-sling-target-player == 0)
;	(up-compare-goal gl-anti-sling-player > 0)
;=>
;	;(up-chat-data-to-self "!!! Debug: SEARCH FOR AN ENEMY NOT ALLIES: %d" s: sn-target-player-number)
;)
(defrule
	(game-time > 1200)
	(player-in-game target-player)
	(players-stance target-player enemy)
	(players-military-population target-player g:<= gl-starting-army)
	(players-current-age target-player == feudal-age)
	(strategic-number sn-enemy-sling-target-player == 0)
	(players-building-type-count target-player barracks == 0)
	(players-building-type-count target-player archery-range == 0)
	(players-building-type-count target-player stable == 0)
	(players-current-age-time any-enemy > 300)
	(up-compare-goal gl-anti-sling-player <= 8)
	(players-civilian-population target-player > 25)
=>
	(up-chat-data-to-all "Player %d is slinging." s: sn-target-player-number)
	(up-modify-sn sn-enemy-sling-target-player s:= sn-target-player-number)
)
(defrule
	(up-compare-goal temporary-goal > 0)
=>
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(set-goal temporary-goal 0)
	;(chat-local-to-self "Ran5")
)
#end-if
#load-if-defined UP-POCKET-POSITION
(defrule
	(game-time > 1020) ; 1200
	(or(players-population target-player < 40) ; 25
	   (and(players-building-type-count target-player watch-tower > 1)
	       (and(unit-type-count battering-ram-line == 0)
		       (unit-type-count trebuchet-set == 0))))
	(players-population any-enemy > 25)
=>
	(up-modify-goal gl-new-target-player c:+ 1)
	(up-modify-sn sn-focus-player-number g:= gl-new-target-player)
	(up-modify-sn sn-target-player-number g:= gl-new-target-player)
	(up-modify-goal gl-player g:= gl-new-target-player)
	;(up-chat-data-to-self "!!! Debug: Searching for new target: %d" s: sn-target-player-number)
)
(defrule
	(game-time s:> sn-home-exploration-time)
	(strategic-number sn-enemy-sling-target-player > 0)
	(players-civilian-population target-player < 40)
	(up-compare-sn sn-target-player-number s:!= sn-enemy-sling-target-player)
	(or(players-building-type-count every-enemy watch-tower <= 1)
	(or(unit-type-count battering-ram-line > 0)
	   (unit-type-count trebuchet-set > 0)))
=>
	(up-modify-goal temporary-goal s:= sn-target-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-enemy-sling-target-player)
	(up-modify-sn sn-target-player-number s:= sn-enemy-sling-target-player)
	(up-modify-goal gl-player s:= sn-enemy-sling-target-player)
	;(up-chat-data-to-self "!!! Debug: Checking Slinger: %d" s: sn-target-player-number)
)
#else
(defrule
	(game-time s:> sn-home-exploration-time)
	(or(game-time > 1020) ; 1440
	   (current-age == castle-age))
	(or(players-population target-player < 25)
	   (and(players-building-type-count target-player watch-tower > 1)
	       (and(unit-type-count battering-ram-line == 0)
		       (unit-type-count trebuchet-set == 0))))
	(players-population any-enemy > 25)
=>
	(set-goal gl-split-goal 1040)
)
(defrule
	(goal gl-split-goal 1040)
=>
	(up-modify-goal gl-new-target-player c:+ 1)
	(up-modify-sn sn-focus-player-number g:= gl-new-target-player)
	(up-modify-sn sn-target-player-number g:= gl-new-target-player)
	(up-modify-goal gl-player g:= gl-new-target-player)
	;(up-chat-data-to-self "!!! Debug: Searching for new target: %d" s: sn-target-player-number)
	(set-goal gl-split-goal 0)
)
(defrule
	(game-time s:> sn-home-exploration-time)
	(strategic-number sn-enemy-sling-target-player > 0)
	(up-compare-sn sn-target-player-number s:!= sn-enemy-sling-target-player)
	(or(players-building-type-count every-enemy watch-tower <= 1)
	(or(unit-type-count battering-ram-line > 0)
	   (unit-type-count trebuchet-set > 0)))
=>
	(up-modify-goal temporary-goal s:= sn-target-player-number)
	(up-modify-sn sn-focus-player-number s:= sn-enemy-sling-target-player)
	(up-modify-sn sn-target-player-number s:= sn-enemy-sling-target-player)
	(up-modify-goal gl-player s:= sn-enemy-sling-target-player)
	;(up-chat-data-to-self "!!! Debug: Checking Slinger: %d" s: sn-target-player-number)
)
#end-if
(defrule
	(game-time > 1200)
	(up-compare-sn sn-target-player-number s:== sn-enemy-sling-target-player)
	(or(not(player-in-game target-player))
	(or(players-military-population target-player g:> gl-starting-army)
	(or(players-civilian-population target-player < 25)
	(or(players-building-type-count target-player archery-range > 0)
	(or(players-building-type-count target-player stable > 0)
	   (players-building-type-count target-player barracks > 0))))))
=>
	(up-chat-data-to-all "Player %d has stopped slinging." s: sn-target-player-number)
	(set-strategic-number sn-enemy-sling-target-player 0)
)	
; boar hunting:
(defrule
	(up-research-status c: ri-loom >= research-pending)
	(or(unit-type-count-total villager >= 11)
	   (game-time > 275))
	(strategic-number sn-enable-boar-hunting != 2)
	(dropsite-min-distance live-boar != -1)
	(dropsite-min-distance live-boar s:< sn-maximum-hunt-drop-distance)
=>
	(set-strategic-number sn-enable-boar-hunting 2)
	(set-strategic-number sn-maximum-hunt-drop-distance 32)
)
(defrule
	(strategic-number sn-enable-boar-hunting == 2)
	;(dropsite-min-distance boar-hunting > 10)
	(dropsite-min-distance live-boar != -1)
	(dropsite-min-distance live-boar != 255)
	;(dropsite-min-distance live-boar s:< sn-maximum-hunt-drop-distance)
	(dropsite-min-distance live-boar < 32)
	(unit-type-count villager-hunter == 0)
	(up-timer-status 7 != timer-running)
=>
	(set-strategic-number sn-minimum-number-hunters 1)
	(set-strategic-number sn-minimum-boar-hunt-group-size 1)
	(set-strategic-number sn-minimum-boar-lure-group-size 1)
	;(up-chat-data-to-self "sn-maximum-hunt-drop-distance: %d" s: sn-maximum-hunt-drop-distance)
	(chat-local-to-self "Begin luring boar")
	(up-retask-gatherers food c: 1)
	(up-request-hunters c: 1)
	(enable-timer 7 5)
)
(defrule
	(strategic-number sn-enable-boar-hunting == 2)
	(dropsite-min-distance live-boar != -1)
	(dropsite-min-distance live-boar < 5)
	;(dropsite-min-distance boar-hunting > 10)
	(or(unit-type-count 122 >= 1)
	   (unit-type-count 216 >= 1))
	;(unit-type-count 122 < 3)
	;(unit-type-count 216 < 3)
	(unit-type-count villager-hunter < 6) ; 8
=>
	(set-strategic-number sn-minimum-number-hunters 8)
	(set-strategic-number sn-minimum-boar-hunt-group-size 8)
	(set-strategic-number sn-minimum-boar-lure-group-size 8)
	(chat-local-to-self "Request support hunters")
	;(up-retask-gatherers food c: 8)
	(up-request-hunters c: 8)
)
(defrule
	(strategic-number sn-enable-boar-hunting == 2)
	(dropsite-min-distance live-boar != -1)
	(dropsite-min-distance live-boar < 5)
	(goal gl-boar-lurer-search 2)
	(unit-type-count villager-hunter > 0)
	(up-timer-status 7 != timer-running)
	;(unit-type-count villager-hunter >= 8)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 10)
	(up-find-local c: villager-class c: 6)
	(set-strategic-number sn-focus-player-number 0)
	(up-find-remote c: wild-boar c: 1)
	(up-find-remote c: javelina c: 1)
	(up-target-objects 0 action-default -1 -1)
	(enable-timer 7 10)
;	(up-request-hunters c: 8)
)
(defrule
	(strategic-number sn-enable-boar-hunting == 2)
	(dropsite-min-distance live-boar s:< sn-maximum-hunt-drop-distance)
	(dropsite-min-distance boar-hunting < 10)
	(up-remaining-boar-amount < 195)
	(strategic-number sn-minimum-number-hunters > 1)
=>
	(set-strategic-number sn-minimum-number-hunters 1)
	(set-strategic-number sn-minimum-boar-hunt-group-size 1)
	(set-strategic-number sn-minimum-boar-lure-group-size 1)
	(chat-local-to-self "Attempting to lure another boar")
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 10)
	(up-find-local c: villager-class c: 1)
	(set-goal gl-boar-lurer-search 1)
)
(defrule
	(goal gl-boar-lurer-search 1)
	(up-set-target-object search-local c: 0)
	(up-object-data object-data-hitpoints < 40)
=>
	(up-reset-search 0 1 0 0)
	(up-find-local c: villager-class c: 1)
	(up-jump-rule -1)
	(chat-local-to-self "Injured villager found -- search again.")
)
(defrule
	(goal gl-boar-lurer-search 1)
	(up-set-target-object search-local c: 0)
=>
	(up-filter-distance c: -1 s: sn-maximum-hunt-drop-distance)
	(set-strategic-number sn-focus-player-number 0)
	(up-find-remote c: wild-boar c: 1)
	(up-find-remote c: javelina c: 1)
	(up-set-target-object search-remote c: 0)
	(up-target-objects 0 action-default -1 -1)
	(chat-local-to-self "Begin luring boar (2)")
	(set-goal gl-boar-lurer-search 2)
)
(defrule
	(up-research-status c: ri-loom >= research-pending)
	(unit-type-count-total villager >= 11)
	(strategic-number sn-enable-boar-hunting == 2)
	(unit-type-count-total villager >= 20)
	(up-compare-goal gl-my-boars < 1)
	(or(dropsite-min-distance live-boar == -1)
	   (dropsite-min-distance live-boar s:> sn-maximum-hunt-drop-distance))
=>
	(set-strategic-number sn-enable-boar-hunting 1)
	(set-strategic-number sn-minimum-number-hunters 0) ; 4
	(set-strategic-number sn-minimum-boar-hunt-group-size 1)
	(set-strategic-number sn-minimum-boar-lure-group-size 1)
	(set-goal gl-boar-lurer-search 0)
	;(up-retask-gatherers food c: 4)
	(up-request-hunters c: 4)
	(chat-local-to-self "No boar in range, allow deer hunting")
)
(defrule
	(strategic-number sn-enable-boar-hunting == 1)
	(strategic-number sn-maximum-hunt-drop-distance > 12)
	(up-compare-goal 86 == 1)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 12)
	(chat-local-to-self "Luring deer so set hunt-drop-distance to 12.")
)
(defrule
	(strategic-number sn-enable-boar-hunting == 1)
	(or(strategic-number sn-maximum-hunt-drop-distance > 25)
	   (strategic-number sn-maximum-hunt-drop-distance < 25))
	(up-compare-goal 86 == -2)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 25)
	(chat-local-to-self "NOT luring deer so set hunt-drop-distance to 25.")
)
(defrule	
	(game-time > 132)
	(food-amount < 50)
	(up-research-status c: feudal-age < research-pending) ; current-age < imp
	(up-pending-objects c: villager < 1)
=>
	(up-drop-resources sheep-food c: 5)
	(up-drop-resources farm-food c: 5)
	(up-drop-resources forage-food c: 5)
	(up-drop-resources deer-food c: 20)
	(up-drop-resources boar-food c: 7) ; 10
)
(defrule	
	(game-time > 132)
	(food-amount < 50)
	(food-amount >= 44)
	(up-research-status c: feudal-age < research-pending) 
	(up-pending-objects c: villager < 1)
=>
	(up-drop-resources sheep-food c: 2)
	(up-drop-resources farm-food c: 2)
	(up-drop-resources forage-food c: 2)
	(up-drop-resources deer-food c: 20)
	(up-drop-resources boar-food c: 2) ; 10
)
(defrule	
	(current-age == dark-age)
	(strategic-number sn-enable-training-queue == 1)
	(up-pending-objects c: villager < 2)
	(food-amount < 50)
	(timer-triggered 46)
=>
	(up-drop-resources sheep-food c: 5)
	(up-drop-resources farm-food c: 5)
	(up-drop-resources forage-food c: 5)
	(up-drop-resources deer-food c: 20)
	(up-drop-resources boar-food c: 10)
)

(defrule
	(players-military-population focus-player g:> gl-starting-army)
	(players-stance focus-player enemy)
=>
	(set-strategic-number sn-archer-threat 0)
    (up-get-focus-fact unit-type-count archer-line temporary-goal7)
	(up-modify-sn sn-archer-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count skirmisher-line temporary-goal7)
	(up-modify-sn sn-archer-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count hand-cannoneer temporary-goal7)
	(up-modify-sn sn-archer-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count longbowman-line temporary-goal7)
	(up-modify-sn sn-archer-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count chu-ko-nu-line temporary-goal7)
	(up-modify-sn sn-archer-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count plumed-archer-line temporary-goal7)
	(up-modify-sn sn-archer-threat g:+ temporary-goal7)
	(set-goal gl-split-goal 5000)
)
(defrule
	(goal gl-split-goal 5000)
=>
	(up-get-focus-fact unit-type-count cavalry-archer-line temporary-goal7)
	(up-modify-sn sn-archer-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count mangudai-line temporary-goal7)
	(up-modify-sn sn-archer-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count war-wagon-line temporary-goal7)
	(up-modify-sn sn-archer-threat g:+ temporary-goal7)
	;(up-chat-data-to-all "Archer Threat: %d" s: sn-archer-threat)
	(set-goal gl-split-goal 0)
)
(defrule
	(players-military-population focus-player g:> gl-starting-army)
	(players-stance focus-player enemy)
=>
	(set-strategic-number sn-infantry-threat 0)
	(up-get-focus-fact unit-type-count militiaman-line temporary-goal7)
	(up-modify-sn sn-infantry-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count spearman-line temporary-goal7)
	(up-modify-sn sn-infantry-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count eagle-warrior-line temporary-goal7)
	(up-modify-sn sn-infantry-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count huskarl-set temporary-goal7)
	(up-modify-sn sn-infantry-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count jaguar-warrior-line temporary-goal7)
	(up-modify-sn sn-infantry-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count teutonic-knight-line temporary-goal7)
	(up-modify-sn sn-infantry-threat g:+ temporary-goal7)
	(set-goal gl-split-goal 5001)
)
(defrule
	(goal gl-split-goal 5001)
=>
	(up-get-focus-fact unit-type-count woad-raider-line temporary-goal7)
	(up-modify-sn sn-infantry-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count berserk-line temporary-goal7)
	(up-modify-sn sn-infantry-threat g:+ temporary-goal7)
	;(up-chat-data-to-all "Infantry Threat: %d" s: sn-infantry-threat)
	(set-goal gl-split-goal 0)
)
(defrule
	(players-military-population focus-player g:> gl-starting-army)
	(players-stance focus-player enemy)
=>
	(set-strategic-number sn-cavalry-threat 0)
	(up-get-focus-fact unit-type-count scout-cavalry-line temporary-goal7)
	(up-modify-sn sn-cavalry-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count knight-line temporary-goal7)
	(up-modify-sn sn-cavalry-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count camel-line temporary-goal7)
	(up-modify-sn sn-cavalry-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count tarkan-line temporary-goal7)
	(up-modify-sn sn-cavalry-threat g:+ temporary-goal7)
	(up-get-focus-fact unit-type-count cataphract-line temporary-goal7)
	(up-modify-sn sn-cavalry-threat g:+ temporary-goal7)
	;(up-chat-data-to-all "Cavalry Threat: %d" s: sn-cavalry-threat)
)
#load-if-defined UP-1-PLAYER-TEAM
(defrule
	(players-stance target-player enemy)
	(strategic-number sn-target-player-number > 0)
	(strategic-number sn-focus-player-number > 0)
=>
	(up-get-fact military-population 0 gl-data-military-population)
	(up-get-target-fact military-population 0 gl-data-enemy-military-population)
	(up-get-fact civilian-population 0 gl-data-civilian-population)
	(up-get-target-fact civilian-population 0 gl-data-enemy-civilian-population)
	;(up-modify-goal temporary-goal8 g:= gl-data-enemy-military-population)
	;(up-modify-goal temporary-goal8 c:/ 2)
	;(up-get-fact current-score 0 gl-data-my-score)
	;(up-get-target-fact current-score 0 gl-data-enemy-score)
)
#else
(defrule
	(players-stance target-player enemy)
	(strategic-number sn-target-player-number > 0)
	(strategic-number sn-focus-player-number > 0)
	(players-current-age every-enemy < castle-age)
=>
	(up-get-fact military-population 0 gl-data-military-population)
	(up-get-fact-max any-enemy military-population 0 gl-data-enemy-military-population)
	(up-get-fact civilian-population 0 gl-data-civilian-population)
	(up-get-fact-max any-enemy civilian-population 0 gl-data-enemy-civilian-population)
	;(up-modify-goal temporary-goal8 g:= gl-data-enemy-military-population)
	;(up-modify-goal temporary-goal8 c:/ 2)
	;(up-get-fact current-score 0 gl-data-my-score)
	;(up-get-target-fact current-score 0 gl-data-enemy-score)
)
(defrule
	(players-stance target-player enemy)
	(strategic-number sn-target-player-number > 0)
	(strategic-number sn-focus-player-number > 0)
	(players-current-age any-enemy == castle-age)
=>
	(up-get-fact military-population 0 gl-data-military-population)
	(up-get-fact-max any-enemy military-population 0 gl-data-enemy-military-population)
	(up-get-fact civilian-population 0 gl-data-civilian-population)
	(up-get-target-fact civilian-population 0 gl-data-enemy-civilian-population)
	;(up-modify-goal temporary-goal8 g:= gl-data-enemy-military-population)
	;(up-modify-goal temporary-goal8 c:/ 2)
	;(up-get-fact current-score 0 gl-data-my-score)
	;(up-get-target-fact current-score 0 gl-data-enemy-score)
)
(defrule
	(players-stance target-player enemy)
	(strategic-number sn-target-player-number > 0)
	(strategic-number sn-focus-player-number > 0)
	(players-current-age any-enemy == imperial-age)
=>
	(up-get-fact military-population 0 gl-data-military-population)
	(up-get-fact-min any-enemy military-population 0 gl-data-enemy-military-population)
	(up-get-fact civilian-population 0 gl-data-civilian-population)
	(up-get-target-fact civilian-population 0 gl-data-enemy-civilian-population)
	(up-modify-goal gl-data-enemy-military-population c:+ 8) ; was 5
	;(up-modify-goal temporary-goal8 g:= gl-data-enemy-military-population)
	;(up-modify-goal temporary-goal8 c:/ 2)
	;(up-get-fact current-score 0 gl-data-my-score)
	;(up-get-target-fact current-score 0 gl-data-enemy-score)
)
#end-if
(defrule
	(strategic-number sn-focus-player-number > 0)
	(up-compare-goal gl-data-enemy-military-population g:> gl-data-military-population)
	(strategic-number sn-military-level >= 0)
=>
	(set-strategic-number sn-military-level -1)
	;(chat-to-all "Pants status: shat")
)
(defrule
	(strategic-number sn-focus-player-number > 0)
	(or(up-compare-goal gl-data-military-population g:== gl-data-enemy-military-population)
	   (military-population < 6))
	(strategic-number sn-military-level < 1)
=>
	(set-strategic-number sn-military-level 0)
	;(chat-to-all "Pants status: lil tinkle")
)
(defrule
	(strategic-number sn-focus-player-number > 0)
	(military-population > 6)
	(up-compare-goal gl-data-military-population g:> gl-data-enemy-military-population)
	(strategic-number sn-military-level < 1)
=>
	(set-strategic-number sn-military-level 1)
	;(chat-to-all "Pants status: comfy and dry")
)
(defrule
	(true)
=>
	(up-modify-goal gl-data-enemy-military-population c:- 5)
)
(defrule
	(game-time > 1140)
	(current-age <= feudal-age)
	(or(up-timer-status 1 != timer-running)
	   (or(wood-amount > 1000)
	      (stone-amount > 650)))
	(up-compare-goal gl-new-town-size < 40) ; TO-DO: adjust for bigger maps in the future...
=>
	(up-modify-goal gl-new-town-size c:+ 1)
	(up-chat-data-to-self "TS = %d" g: gl-new-town-size)
	(enable-timer 1 120)
)
(defrule
	(game-time > 1140)
	(current-age >= castle-age)
	(or(up-timer-status 1 != timer-running)
	   (or(wood-amount > 450) ; 1000
	      (stone-amount > 650)))
	(up-compare-goal gl-new-town-size < 40) ; TO-DO: adjust for bigger maps in the future...
=>
	(up-modify-goal gl-new-town-size c:+ 1)
	(up-chat-data-to-self "TS = %d" g: gl-new-town-size)
	(enable-timer 1 120)
)
;(defrule
;	(strategic-number sn-maximum-town-size < 10)
;=>
;	(chat-to-player my-player-number "!!!: Town size is below 10.")
;	(up-chat-data-to-all "Debug: gl-new-town-size: %d" g: gl-new-town-size)
;)
(defrule
	(up-compare-goal temporary-goal2 >= 10)
=>
	(up-modify-goal temporary-goal2 s:= sn-maximum-town-size)
)
(defrule
	(up-compare-goal temporary-goal2 >= 10)
	(up-compare-goal gl-enable-tsa < 1)
	(up-compare-goal temporary-goal2 g:!= gl-new-town-size)
=>
	(up-modify-sn sn-maximum-town-size g:= gl-new-town-size)
)
(defrule
	(true)
=>
	(up-modify-sn sn-safe-town-size g:= gl-new-town-size)
)
(defrule
	(current-age > feudal-age)
	(building-type-count-total town-center < 3)
	(can-build-with-escrow town-center)
	(strategic-number sn-castle-age-strategy != RUN)
=>
	(release-escrow wood)
	(release-escrow stone)
	(up-assign-builders c: town-center-foundation c: 4)
	(set-goal gl-pause-tsa 1)
	(up-modify-goal temporary-goal3 s:= sn-camp-max-distance)
	(up-modify-sn sn-camp-max-distance g:= gl-new-town-size)
	(build town-center)
	(up-modify-sn sn-camp-max-distance g:= temporary-goal3)
)
(defrule
	(game-time > 1140)
	(current-age < castle-age)
	(up-pending-objects c: lumber-camp < 1)
	(up-timer-status 2 != timer-running)
	(can-build lumber-camp)
=>
	(build lumber-camp)
	(up-modify-sn sn-camp-max-distance c:+ 3)
	(enable-timer 2 300)
)
(defrule
	(game-time > 1140)
	(current-age >= castle-age)
	(building-type-count-total town-center >= 3)
	(up-pending-objects c: lumber-camp < 1)
	(up-timer-status 2 != timer-running)
	(can-build lumber-camp)
=>
	(build lumber-camp)
	(up-modify-sn sn-camp-max-distance c:+ 3)
	(enable-timer 2 300)
)
;#load-if-defined UP-1-PLAYER-TEAM
;(defrule
;	(up-compare-goal 86 != 1)
;	(players-stance target-player enemy)
;	(game-time > 360)
;	(up-timer-status 3 != timer-running)
;	(players-building-type-count target-player castle == 0)
;	(players-building-type-count target-player watch-tower == 0)
;	(players-military-population target-player g:> gl-starting-army)
;=>
;	(chat-local-to-self "Searching my target enemy")
;	(up-send-scout group-type-land-explore scout-enemy)
;	(enable-timer 3 60) ; was 300
;)
;#else
(defrule
	(up-compare-goal 86 != 1)
	(players-building-type-count target-player castle == 0)
	(players-building-type-count target-player watch-tower == 0)
	;(players-military-population target-player g:> gl-starting-army)
	(game-time g:> gl-game-time-mod)
=>
	(up-modify-goal gl-game-time-mod c:+ 40)
	(up-send-scout group-type-land-explore scout-flank) ; Repeating to search scout 
	(disable-self)
)

(defrule
	(up-compare-goal 86 != 1)
	(players-building-type-count target-player castle == 0)
	(players-building-type-count target-player watch-tower == 0)
	;(players-military-population target-player g:> gl-starting-army)
	(game-time g:> gl-game-time-mod)
=>
	(up-modify-goal gl-game-time-mod c:+ 40)
	(up-send-scout group-type-land-explore scout-flank)
	(disable-self)
)

(defrule
	(up-compare-goal 86 != 1)
	(players-building-type-count target-player castle == 0)
	(players-building-type-count target-player watch-tower == 0)
	;(players-military-population target-player g:> gl-starting-army)
	(game-time g:> gl-game-time-mod)
=>
	(up-modify-goal gl-game-time-mod c:+ 40)
	(up-send-scout group-type-land-explore scout-flank)
	(disable-self)
)

(defrule
	(up-compare-goal 86 != 1)
	(players-building-type-count target-player castle == 0)
	(players-building-type-count target-player watch-tower == 0)
	;(players-military-population target-player g:> gl-starting-army)
	(game-time g:> gl-game-time-mod)
=>
	(up-modify-goal gl-game-time-mod c:+ 40)
	(up-send-scout group-type-land-explore scout-mirror)
	(disable-self)
)

(defrule
	(up-compare-goal 86 != 1)
	(players-building-type-count target-player castle == 0)
	(players-building-type-count target-player watch-tower == 0)
	;(players-military-population target-player g:> gl-starting-army)
	(game-time g:> gl-game-time-mod)
=>
	(up-modify-goal gl-game-time-mod c:+ 40)
	(up-send-scout group-type-land-explore scout-mirror)
	(disable-self)
)

(defrule
	(up-compare-goal 86 != 1)
	(players-building-type-count target-player castle == 0)
	(players-building-type-count target-player watch-tower == 0)
	;(players-military-population target-player g:> gl-starting-army)
	(game-time g:> gl-game-time-mod)
=>
	(up-modify-goal gl-game-time-mod c:+ 40)
	(up-send-scout group-type-land-explore scout-mirror)
	(disable-self)
)

(defrule
	(up-compare-goal 86 != 1)
	(players-building-type-count target-player castle == 0)
	(players-building-type-count target-player watch-tower == 0)
	;(players-military-population target-player g:> gl-starting-army)
	(game-time g:> gl-game-time-mod)
=>
	(up-modify-goal gl-game-time-mod c:+ 40)
	(up-send-scout group-type-land-explore scout-flank)
	(disable-self)
)
(defrule
	(up-compare-goal 86 != 1)
	(players-stance target-player enemy)
	(game-time g:> gl-game-time-mod)
	(up-timer-status 3 != timer-running)
	(players-building-count target-player > 0)
	;(players-military-population target-player g:> gl-starting-army)
=>
	(chat-local-to-self "Searching my target enemy")
	(up-send-scout group-type-land-explore scout-enemy)
	(enable-timer 3 120) ; was 300
)

;#end-if
(defrule
	(up-compare-goal gl-enable-tsa >= 1)
	(strategic-number sn-maximum-town-size < 255)
	(not(enemy-buildings-in-town))
	(up-compare-goal gl-pause-tsa < 1)
=>
	(up-modify-sn sn-maximum-town-size c:+ 20)
	;(up-chat-data-to-self "TSA = %d" s: sn-maximum-town-size)
)
(defrule
	(up-compare-goal gl-enable-tsa >= 1)
	(strategic-number sn-maximum-town-size < 255)
	(enemy-buildings-in-town)
	(up-compare-goal gl-pause-tsa < 1)
=>
	(up-modify-sn sn-maximum-town-size c:- 5)
	;(up-chat-data-to-self "TSA = %d" s: sn-maximum-town-size)
)
(defrule
	(up-compare-goal gl-enable-tsa >= 1)
	(strategic-number sn-maximum-town-size >= 255)
	(up-compare-goal gl-pause-tsa < 1)
=>
	(up-modify-sn sn-maximum-town-size g:= gl-new-town-size)
	;(up-chat-data-to-self "TSA = %d" s: sn-maximum-town-size)
)
(defrule
	(up-compare-goal gl-pause-tsa == 1)
	(up-timer-status 5 != timer-running)
=>
	(up-modify-sn sn-maximum-town-size g:= gl-new-town-size)	
	(set-goal gl-pause-tsa 2)
	(enable-timer 5 3)
	;;(chat-local-to-self "!!! Pausing TSA")
)
(defrule
	(up-compare-goal gl-pause-tsa == 2)
	(up-timer-status 5 != timer-running)
=>
	(set-goal gl-pause-tsa 0)
	(enable-timer 5 10)
	;;(chat-local-to-self "!!! Unpausing TSA")
)
(defrule
	(strategic-number sn-focus-player-number > 0)
=>
;	(up-modify-goal temporary-goal15 s:= sn-focus-player-number)
	(up-find-player enemy find-closest gl-player)
	;(up-modify-sn sn-focus-player-number g:= gl-player)
	(up-modify-goal gl-enemy-score-prev g:= gl-enemy-score-current)
	(up-get-focus-fact current-score 0 gl-enemy-score-current)
	(up-modify-goal gl-enemy-score-diff g:= gl-enemy-score-prev)
	(up-modify-goal gl-enemy-score-diff g:- gl-enemy-score-current)
	;(up-chat-data-to-all "gl-enemy-score-current: %d" g: gl-enemy-score-current)
	;(up-chat-data-to-all "gl-enemy-score-prev: %d" g: gl-enemy-score-prev)
	;(up-chat-data-to-all "gl-enemy-score-diff: %d" g: gl-enemy-score-diff)
)
;11/22 07:30:07 ER> 30 for feudal up
;11/22 07:30:07 ER> 65 for castle up
(defrule
	(strategic-number sn-focus-player-number != 0)
	(strategic-number sn-enemy-current-age == dark)
	(up-compare-goal gl-enemy-score-diff > 30)
=>
;	(chat-to-player my-player-number "Debug: Enemy is up to feudal")
	(chat-to-all "Enemy clicked up to feudal")
	(set-strategic-number sn-enemy-current-age feudal-transit)
	(disable-self)
)
(defrule
	(strategic-number sn-focus-player-number != 0)
	(strategic-number sn-enemy-current-age == feudal-transit)
	(players-current-age focus-player == feudal-age)
=>
;	(chat-to-player my-player-number "Debug: Enemy is feudal")
	(set-strategic-number sn-enemy-current-age feudal)
	(disable-self)
)
(defrule
	(strategic-number sn-focus-player-number != 0)
	(players-current-age focus-player == feudal-age)
=>
;	(chat-to-player my-player-number "Debug: Enemy is feudal")
	(set-strategic-number sn-enemy-current-age feudal)
	(disable-self)
)
(defrule
	(strategic-number sn-focus-player-number != 0)
	(strategic-number sn-enemy-current-age == feudal)
	(up-compare-goal gl-enemy-score-diff > 65)
=>
;	(chat-to-player my-player-number "Debug: Enemy is up to castle")
;	(chat-to-player my-player-number "Enemy clicked up to castle.")
	(chat-to-all "Enemy clicked up to castle")
	(set-strategic-number sn-enemy-current-age castle-transit)
	(disable-self)
) 
(defrule
	(strategic-number sn-focus-player-number != 0)
	(strategic-number sn-enemy-current-age == castle-transit)
	(players-current-age focus-player == castle-age)
=>
;	(chat-to-player my-player-number "Debug: Enemy is castle")
	(set-strategic-number sn-enemy-current-age CASTLE)
	(disable-self)
)
(defrule
	(strategic-number sn-focus-player-number != 0)
	(players-current-age focus-player == castle-age)
=>
;	(chat-to-player my-player-number "Debug: Enemy is castle")
	(set-strategic-number sn-enemy-current-age CASTLE)
	(disable-self)
)
(defrule
	(strategic-number sn-focus-player-number != 0)
	(strategic-number sn-enemy-current-age == CASTLE)
	(up-compare-goal gl-enemy-score-diff > 180)
=>
;	(chat-to-player my-player-number "Debug: Enemy is up to imperial")
	(set-strategic-number sn-enemy-current-age imperial-transit)
	(disable-self)
) 
(defrule
	(strategic-number sn-focus-player-number != 0)
	(strategic-number sn-enemy-current-age == imperial-transit)
	(players-current-age focus-player == imperial-age)
=>
;	(chat-to-player my-player-number "Debug: Enemy is imperial")
	(set-strategic-number sn-enemy-current-age imperial)
	(disable-self)
)
(defrule
	(strategic-number sn-focus-player-number != 0)
	(players-current-age focus-player == imperial-age)
=>
;	(chat-to-player my-player-number "Debug: Enemy is imperial")
	(set-strategic-number sn-enemy-current-age imperial)
	(disable-self)
)
(defrule
	(game-time > 1920)
	(building-type-count-total mining-camp < 3)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
	(up-modify-sn sn-camp-max-distance c:+ 3)
)
(defrule
	(game-time > 1920)
	(building-type-count-total mining-camp >= 3)
	(or(dropsite-min-distance gold > 3)
	   (dropsite-min-distance stone > 3))
	(dropsite-min-distance gold != -1)
	(dropsite-min-distance stone != -1)
	(dropsite-min-distance gold != 255)
	(dropsite-min-distance stone != 255)
	(up-pending-objects c: mining-camp < 2)
	(can-build mining-camp)
=>
	(build mining-camp)
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(up-modify-sn sn-camp-max-distance c:+ 3)
)
; Remember how long castle age researching takes
#load-if-not-defined MALAY-CIV ; so fast it hurts more to have this for Malay.
(defrule
	(up-research-status c: castle-age >= research-pending)
=>
	(enable-timer 19 120)
	(disable-self)
)
#end-if
(defrule
	(unit-type-count-total monk < 1)
	(unit-type-count-total monk-with-relic < 1)
	(cc-players-unit-type-count 0 relic > 0)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(players-unit-type-count any-enemy knight-line > 0)
	(food-amount < 850)
	(or(strategic-number sn-enemy-current-age < castle-transit)
	   (gold-amount > 1000))
	(can-train monk)
=>
	(train monk)
)
#load-if-defined DIFFICULTY-HARDEST
(defrule
	(current-age == dark-age)
=>
	(cc-add-resource wood -400)
	(cc-add-resource food -400)
	(cc-add-resource gold -400)
	(cc-add-resource stone -400)
	(disable-self)
)
(defrule
	(current-age == feudal-age)
=>
	(cc-add-resource wood -400)
	(cc-add-resource food -400)
	(cc-add-resource gold -400)
	(cc-add-resource stone -450)
	(disable-self)
)
(defrule
	(current-age == castle-age)
=>
	(cc-add-resource wood -300)
	(cc-add-resource food -400)
	(cc-add-resource gold -300)
	(cc-add-resource stone -400)
	(disable-self)
)
(defrule
	(current-age >= imperial-age)
=>
	(cc-add-resource wood -300)
	(cc-add-resource food -300)
	(cc-add-resource gold -300)
	(cc-add-resource stone -400)
	(disable-self)
)
(defrule
	(taunt-detected any-human 200)
=>
	(chat-to-all "Cheats enabled! - Good luck!")
	(disable-self)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == dark-age)
	(unit-type-count villager < 10)
	(up-research-status c: feudal-age < research-pending)
	(up-timer-status 4 != timer-running)
=>
	(cc-add-resource food 10)
	(cc-add-resource wood 5)
	(enable-timer 4 60)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == dark-age)
	(unit-type-count villager > 10)
	(up-research-status c: feudal-age < research-pending)
	(up-timer-status 4 != timer-running)
=>
	(cc-add-resource food 15)
	(cc-add-resource wood 10)
	;(cc-add-resource gold 26)
	;(cc-add-resource stone 5)
	(enable-timer 4 50)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == dark-age)
	(up-research-status c: feudal-age >= research-pending)
	(up-timer-status 4 != timer-running)
=>
	(cc-add-resource food 30)
	(cc-add-resource wood 20)
	(cc-add-resource gold 10)
	;(cc-add-resource stone 5)
	(enable-timer 4 45)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == dark-age)
	(game-time > 300)
=>
	(cc-add-resource food 100)
	(cc-add-resource wood 75)
	(disable-self)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == dark-age)
	(game-time > 440)
=>
	(cc-add-resource food 125)
	(cc-add-resource wood 30)
	(disable-self)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == dark-age)
	(game-time > 630)
=>
	(cc-add-resource food 125)
	(cc-add-resource wood 50)
	(cc-add-resource gold 50)
	(disable-self)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == feudal-age)
	(up-timer-status 4 != timer-running)
=>
	(cc-add-resource food 33)
	(cc-add-resource wood 33)
	(cc-add-resource gold 16)
	(cc-add-resource stone 5)
	(enable-timer 4 40)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == castle-age)
	(civilian-population < 50)
	(up-timer-status 4 != timer-running)
=>
	(cc-add-resource food 45)
	(cc-add-resource wood 45)
	(cc-add-resource gold 20)
	(cc-add-resource stone 5)
	(enable-timer 4 30)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == castle-age)
	(civilian-population > 50)
	(up-timer-status 4 != timer-running)
=>
	(cc-add-resource food 65)
	(cc-add-resource wood 65)
	(cc-add-resource gold 30)
	(cc-add-resource stone 5)
	(enable-timer 4 30)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == imperial-age)
	(civilian-population < 100)
	(up-timer-status 4 != timer-running)
=>
	(cc-add-resource food 70)
	(cc-add-resource wood 70)
	(cc-add-resource gold 40)
	(cc-add-resource stone 5)
	(enable-timer 4 20)
)
(defrule
	(taunt-detected any-human 200)
	(current-age == imperial-age)
	(civilian-population > 100)
	(up-timer-status 4 != timer-running)
=>
	(cc-add-resource food 95)
	(cc-add-resource wood 95)
	(cc-add-resource gold 55)
	(cc-add-resource stone 5)
	(enable-timer 4 20)
)
#end-if
(defrule
	(current-age-time > 120)
	(building-type-count-total town-center >= 3)
	(can-research ri-hand-cart)
=>
	(research ri-hand-cart)
)
(defrule
	(strategic-number sn-maximum-food-drop-distance < 25)
	(building-type-count-total farm > 0)
=>
	(set-strategic-number sn-maximum-food-drop-distance 25)
)
(defrule
	(can-research-with-escrow imperial-age)
=>
	(release-escrow food)
	(release-escrow gold)
	(research imperial-age)
	(set-goal gl-enable-tsa 0)
)
(defrule
	(not(research-available imperial-age))
	(building-type-count town-center >= 3)
	(building-type-count-total siege-workshop == 0)
	(can-build siege-workshop)
=>
	(set-goal gl-pause-tsa 1)
	(build siege-workshop)
)
(defrule
	(or(building-type-count-total town-center >= 3)
	   (strategic-number sn-archer-threat > 5))
	(building-type-count-total siege-workshop == 0)
	(can-build siege-workshop)
=>
	(set-goal gl-pause-tsa 1)
	(build siege-workshop)
)
(defrule
	(not(research-available imperial-age))
	(building-type-count town-center >= 3)
	(goal position-goal pocket)
	(building-type-count-total monastery == 0)
	(can-build monastery)
=>
	(set-goal gl-pause-tsa 1)
	(build monastery)
)
(defrule
	(not(research-available imperial-age))
	(building-type-count town-center >= 3)
	(goal position-goal pocket)
	(building-type-count-total university == 0)
	(can-build university)
=>
	(set-goal gl-pause-tsa 1)
	(build university)
)
(defrule
	(not(research-available imperial-age))
	(building-type-count siege-workshop > 0)
	(goal position-goal flank)
	(building-type-count-total monastery == 0)
	(can-build monastery)
=>
	(set-goal gl-pause-tsa 1)
	(build monastery)
)
(defrule
	(not(research-available imperial-age))
	(building-type-count siege-workshop > 0)
	(goal position-goal flank)
	(building-type-count-total university == 0)
	(can-build university)
=>
	(set-goal gl-pause-tsa 1)
	(build university)
)
(defrule
	(research-available imperial-age)
	(building-type-count-total market == 0)
	(can-build market)
=>
	(build market)
)
(defrule
	(commodity-selling-price food > 17)
	(food-amount > 1100)
	(up-research-status c: imperial-age < research-pending)
	(can-sell-commodity food)
=>
	(sell-commodity food)
)
(defrule
	(commodity-selling-price wood > 17)
	(wood-amount > 1100)
	(up-research-status c: imperial-age < research-pending)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)
(defrule
	(commodity-selling-price food > 17)
	(food-amount > 2100)
	(up-research-status c: imperial-age >= research-pending)
	(can-sell-commodity food)
=>
	(sell-commodity food)
)
(defrule
	(commodity-selling-price wood > 17)
	(wood-amount > 2100)
	(up-research-status c: imperial-age >= research-pending)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)
(defrule
	(food-amount > 2500)
	(up-research-status c: imperial-age >= research-pending)
	(can-sell-commodity food)
=>
	(sell-commodity food)
)
(defrule
	(wood-amount > 2500)
	(up-research-status c: imperial-age >= research-pending)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)
(defrule
	(up-research-status c: ri-bow-saw >= research-pending)
	(building-type-count-total town-center >= 3)
	(or(up-research-status c: ri-wheel-barrow >= research-pending)
	   (building-type-count-total farm > 16))
	(can-research ri-heavy-plow)
=>
	(research ri-heavy-plow)
)
(defrule
	(commodity-selling-price food < 20)
	(gold-amount > 1000)
	(food-amount < 1000)
	(up-research-status c: imperial-age >= research-pending)
	(can-buy-commodity food)
=>
	(buy-commodity food)
)
(defrule
	(commodity-selling-price wood < 20)
	(gold-amount > 1000)
	(wood-amount < 1000)
	(up-research-status c: imperial-age >= research-pending)
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
)
(defrule
	(commodity-selling-price food < 70)
	(current-age == imperial-age)
	(gold-amount > 1000)
	(food-amount < 1000)
	(population < 150)
	(can-buy-commodity food)
=>
	(buy-commodity food)
)
(defrule
	(current-age == imperial-age)
	(commodity-selling-price wood < 70)
	(gold-amount > 1000)
	(wood-amount < 1000)
	(population < 150)
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
)
; rebalance economy
(defrule
	(food-amount > 300)
	(building-type-count-total town-center < 3)
	(population < 30)
	(wood-amount < 275)
	(current-age == castle-age)
	(can-sell-commodity food)
=>
	(sell-commodity food)
)
(defrule
	(building-type-count-total town-center < 3)
	(population < 30)
	(wood-amount < 275)
	(current-age == castle-age)
	(can-buy-commodity wood)
=>
	(sell-commodity wood)
)
(defrule
	(true)
=>
	(up-assign-builders c: castle c: 4)
	(disable-self)
)
(defrule
	(players-building-type-count any-ally market > 0)
	(game-time > 1800)
	(can-research ri-cartography)
=>
	(research ri-cartography)
)
(defrule
	(players-building-type-count any-ally market > 0)
	(game-time > 1800)
	(can-research ri-caravan)
=>
	(research ri-caravan)
)
(defrule
	(players-building-type-count any-ally market > 0)
	(strategic-number sn-escrow-level != mangonel)
	(strategic-number sn-escrow-level != battering-ram)
	(strategic-number sn-escrow-level != town-center)
	(strategic-number sn-escrow-level != tc-run-escrow)
	(game-time > 1800)
	(building-type-count-total market < 3)
	(can-build-with-escrow market)
=>
	(set-goal gl-pause-tsa 1)
	(set-strategic-number sn-placement-zone-size 1)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: -200)
	;(chat-to-player my-player-number "Debug: corner market.")
	(release-escrow wood)
	(up-build place-control 0 c: market)
)
(defrule
	(players-building-count any-ally >= 1)
	(up-research-status c: imperial-age >= research-pending)
	(can-research ri-coinage)
=>
	(research ri-coinage)
)
(defrule
	(players-building-count any-ally >= 1)
	(up-research-status c: imperial-age >= research-pending)
	(can-research ri-banking)
=>
	(research ri-banking)
)
(defrule
	(players-building-type-count any-ally market > 0)
	(unit-type-count-total trade-cart < 30)
	(game-time > 1800)
	(strategic-number sn-escrow-level != mangonel)
	(strategic-number sn-escrow-level != battering-ram)
	(strategic-number sn-escrow-level != town-center)
	(can-train-with-escrow trade-cart)
=>
	(release-escrow wood)
	(release-escrow gold)
	(train trade-cart)
)
; sling
(defrule
	(research-completed ri-banking)
	(up-allied-resource-amount any-ally food < 1000)
	(food-amount >= 2500)
=>
	(tribute-to-player this-any-ally food 200)
	(chat-to-player this-any-ally "39Here is some food I don't need.")
)
(defrule
	(research-completed ri-banking)
	(up-allied-resource-amount any-ally wood < 1000)
	(wood-amount >= 2500)
=>
	(tribute-to-player this-any-ally wood 200)
	(chat-to-player this-any-ally "39Here is some wood I don't need.")
)
(defrule
	(up-allied-resource-amount any-ally gold < 1000)
	(research-completed ri-banking)
	(gold-amount >= 2200)
=>
	(tribute-to-player this-any-ally gold 200)
	(chat-to-player this-any-ally "39Here is some gold I don't need.")
)
(defrule
	(up-allied-resource-amount any-ally stone < 1000)
	(research-completed ri-banking)
	(stone-amount >= 750)
=>
	(tribute-to-player this-any-ally stone 100)
	(chat-to-player this-any-ally "39Here is some stone I don't need.")
)
; run away logic
(defrule
	(or(current-age >= castle-age)
	   (building-type-count-total town-center == 0))
	(civilian-population < 19)
	(game-time > 1080)
	(up-compare-goal gl-closest-ally > 0)
	(up-pending-objects c: town-center < 1)
	(strategic-number sn-castle-age-strategy != RUN)
	(strategic-number sn-castle-age-strategy != booming)
	(up-compare-goal gl-running-phase != 1)
=>
	(set-goal gl-split-goal 9500)
)
(defrule
	(goal gl-split-goal 9500)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g: gl-closest-ally) ; ally to run to
	(up-find-remote c: -1 c: 1) ; find closest ally home
	(up-get-search-state gl-local-total)
	(set-strategic-number sn-castle-age-strategy RUN)
	;(chat-to-all "!!! Running away now!")
	(set-goal gl-running-phase 1)
	(set-goal gl-split-goal 0)
)
(defrule
	(up-compare-goal gl-remote-last > 0)
	(up-timer-status 26 != timer-running)
	(up-pending-objects c: town-center < 1)
	(strategic-number sn-castle-age-strategy == RUN)
	(goal gl-running-phase 1)
	(unit-type-count villager > 0)
=>
	(set-goal gl-split-goal 9501)
)
(defrule
	(goal gl-split-goal 9501)
=>
	(set-strategic-number sn-escrow-level tc-run-escrow)
	;(set-escrow-percentage food 100)
	(set-escrow-percentage wood 100)
	(set-escrow-percentage gold 100)
	(set-escrow-percentage stone 100)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-position-object-x)
	(up-find-local c: villager-class c: 240)
	(up-target-point gl-position-object-x action-move -1 -1)
	(enable-timer 26 10)
	;(chat-to-all "!!! Task villagers to run to ally.")
)
(defrule
	(goal gl-running-phase 1)
	(strategic-number sn-escrow-level == tc-run-escrow)
	(can-build-with-escrow town-center)
	(up-pending-objects c: town-center < 1)
=>
	(release-escrow wood)
	(release-escrow stone)
	(set-strategic-number sn-placement-zone-size 1)
	(up-set-placement-data focus-player -1 c: 1) 
	;(chat-to-all "!!! Building Town Center near ally")
	(chat-to-all "Building new tc")
	(up-build place-control 0 c: town-center)
	(set-goal gl-running-phase 2)
)
(defrule
	(goal gl-running-phase 2)
	(up-pending-objects c: town-center < 1)
	(strategic-number sn-escrow-level == tc-run-escrow)
=>
	;(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	;(release-escrow food)
	(release-escrow wood)
	(release-escrow gold)
	(release-escrow stone)
	(set-goal gl-running-phase 0)
	(set-strategic-number sn-castle-age-strategy booming)
	(set-strategic-number sn-escrow-level 0)
)
(defrule
	(goal gl-running-phase 1)
	(strategic-number sn-escrow-level == tc-run-escrow)
	(up-pending-objects c: town-center < 1)
	(wood-amount < 275)
	(stone-amount < 100)
	(up-timer-status 27 != timer-running)
	(unit-type-count villager > 0)
=>
	(chat-to-all "99wood and stone for town center?")
	(enable-timer 27 180)
)
(defrule
	(goal gl-running-phase 1)
	(strategic-number sn-escrow-level == tc-run-escrow)
	(up-pending-objects c: town-center < 1)
	(wood-amount < 275)
	(stone-amount >= 100)
	(up-timer-status 27 != timer-running)
	(unit-type-count villager > 0)
=>
	(chat-to-all "4wood for town center?")
	(enable-timer 27 180)
)
(defrule
	(goal gl-running-phase 1)
	(strategic-number sn-escrow-level == tc-run-escrow)
	(up-pending-objects c: town-center < 1)
	(wood-amount >= 275)
	(stone-amount < 100)
	(up-timer-status 27 != timer-running)
	(unit-type-count villager > 0)
=>
	(chat-to-all "6stone for town center?")
	(enable-timer 27 180)
)
#load-if-defined BOG-ISLANDS-MAP
(load "Brutal2\WNomadBog")
#end-if
#load-if-defined WATER-NOMAD-MAP
(load "Brutal2\WNomadBog")
#end-if
;#load-if-defined ARABIA-MAP
;#load-if-defined DEBUG
#load-if-defined AZTEC-CIV
#load-if-defined UP-POCKET-POSITION
(load-random 10 "Brutal2\EagleRush"
             90  "Brutal2\EEWBOOM")
#else
(load-random 50 "Brutal2\GenericAra"
			 40 "Brutal2\MAA"
             10 "Brutal2\EagleRush") ; was 20
#end-if
#end-if
#load-if-defined BERBERS-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 50 "Brutal2\GenericAra"
		     40 "Brutal2\Scrush"
             10 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined BRITON-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 50 "Brutal2\GenericAra"
			 50 "Brutal2\MAA")
#end-if
#end-if
#load-if-defined BURMESE-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 50 "Brutal2\GenericAra"
			 50 "Brutal2\MAA")
#end-if
#end-if
#load-if-defined BYZANTINE-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 60 "Brutal2\Skirms"
			 30 "Brutal2\GenericAra"
             10 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined CELTIC-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 50 "Brutal2\GenericAra"
			 50 "Brutal2\MAA")
#end-if
#end-if
#load-if-defined CHINESE-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 50 "Brutal2\GenericAra"
             50 "Brutal2\Scrush")
#end-if
#end-if
#load-if-defined ETHIOPIAN-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 80 "Brutal2\GenericAra"
             20 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined FRANKISH-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 40 "Brutal2\GenericAra"
	         40 "Brutal2\Scrush"
             20 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined GOTHIC-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 20 "Brutal2\GenericAra"
			 70 "Brutal2\MAA"
             10 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined HUN-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 40 "Brutal2\GenericAra"
			 40 "Brutal2\Scrush"
             20 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined INCAN-CIV
#load-if-defined UP-POCKET-POSITION
(load-random 50 "Brutal2\EagleRush"
             50 "Brutal2\EEWBOOM")
#else
(load-random 40 "Brutal2\GenericAra"
			 40 "Brutal2\MAA"
             20 "Brutal2\EagleRush")
#end-if
#end-if
#load-if-defined INDIAN-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\CAMEL")
#else
(load-random 80 "Brutal2\GenericAra"
             20 "Brutal2\CAMEL")
#end-if
#end-if
#load-if-defined ITALIAN-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 80 "Brutal2\GenericAra"
             20 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined JAPANESE-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 40 "Brutal2\GenericAra"
			 40 "Brutal2\MAA"
             20 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined KHMER-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 80 "Brutal2\GenericAra"
             20 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined KOREAN-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load "Brutal2\GenericAra")
#end-if
#end-if
#load-if-defined MAGYAR-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 30 "Brutal2\GenericAra"
			 40 "Brutal2\Scrush"
			 20 "Brutal2\MAA"
             10 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined MALAY-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 50 "Brutal2\GenericAra"
			 50 "Brutal2\MAA")
#end-if
#end-if
#load-if-defined MALIAN-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 50 "Brutal2\GenericAra"
			 50 "Brutal2\MAA")
#end-if
#end-if
#load-if-defined MAYAN-CIV
#load-if-defined UP-POCKET-POSITION
(load-random 25 "Brutal2\EagleRush"
             25 "Brutal2\EEWBOOM"
			 50 "Brutal2\CASTLED")
#else
(load-random 70 "Brutal2\GenericAra"
	         10 "Brutal2\CASTLED"
             20 "Brutal2\EagleRush")
#end-if
#end-if
#load-if-defined MONGOL-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 45 "Brutal2\GenericAra"
			 52 "Brutal2\Scrush"
             3 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined PERSIAN-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 40 "Brutal2\GenericAra"
			 40 "Brutal2\Scrush"
             20 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined PORTUGUESE-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 40 "Brutal2\GenericAra"
			 40 "Brutal2\Scrush"
             20 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined SARACEN-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 40 "Brutal2\GenericAra"
			 40 "Brutal2\Scrush"
             20 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined SLAVIC-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 40 "Brutal2\GenericAra"
			 40 "Brutal2\MAA"
             20 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined SPANISH-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 5 "Brutal2\GenericAra"
			 5 "Brutal2\CASTLED"
		     40 "Brutal2\Scrush"
			 20 "Brutal2\MAA"
             30 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined TEUTONIC-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 30 "Brutal2\GenericAra"
		     40 "Brutal2\Scrush"
			 20 "Brutal2\MAA"
             10 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined TURKISH-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 30 "Brutal2\GenericAra"
		     40 "Brutal2\Scrush"
			 20 "Brutal2\MAA"
             10 "Brutal2\Krush")
#end-if
#end-if
#load-if-defined VIETNAMESE-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 60 "Brutal2\GenericAra"
			 40 "Brutal2\MAA")
#end-if
#end-if
#load-if-defined VIKING-CIV
#load-if-defined UP-POCKET-POSITION
(load "Brutal2\Krush")
#else
(load-random 60 "Brutal2\GenericAra"
			 40 "Brutal2\MAA")
#end-if
#end-if
;#end-if
;(load "Brutal2\GenericAra")
;(load "Brutal2\Krush")
;(load "Brutal2\EagleRush")
;(load "Brutal2\Scrush")
;(load "Brutal2\KLEW")
;(load "Brutal2\GenericAra")
;(load "Brutal2\MAA")
;#end-if
(load "Brutal2\FEUDALNAVY")
(load "Brutal2\CAStrategy")
(load "Brutal2\ImpS")
(load "Brutal2\TRASH")
(load "Brutal2\BOOMING")

(defrule
	(or(up-research-status c: ri-crossbow >= research-pending)
	   (unit-type-count-total cavalry-archer-line >= 5))
	(up-research-status c: ri-bodkin-arrow < research-pending)
	(research-available ri-bodkin-arrow)
	(strategic-number sn-escrow-level == 0)
=>
	(set-escrow-percentage food 100)
	(set-escrow-percentage gold 100)
	(set-strategic-number sn-escrow-level ri-bodkin-arrow)
	(chat-local-to-self "escrowing for bodkin arrow")
)
(defrule
	(or(up-research-status c: ri-crossbow < research-pending)
	(or(up-research-status c: ri-bodkin-arrow >= research-pending)
	   (not(research-available ri-bodkin-arrow))))
	(strategic-number sn-escrow-level == ri-bodkin-arrow)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for bodkin arrow")
)
(defrule
	(strategic-number sn-escrow-level == ri-bodkin-arrow)
	(can-research-with-escrow ri-bodkin-arrow)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-bodkin-arrow)
	(chat-local-to-self "researching bodkin-arrow with escrow")
)

; useless chatter
(defrule
	(current-age == dark-age)
	(unit-type-count 449 > 0)
=>
	(chat-to-all "49(ノಠ益ಠ)ノ彡┻━┻")
	(disable-self)
)
(defrule
	(unit-type-count-total villager < 3)
	(or(food-amount < 50)
	   (building-type-count town-center == 0))
	(or(up-pending-objects c: town-center < 1)
	   (and(unit-type-count-total villager == 0)
	       (or(building-type-count-total monastery < 1)
		      (and(unit-type-count-total monk == 0)
			      (not(can-afford-unit monk))))))
	;(up-pending-objects c: villager < 1)
	(players-population every-ally < 26)
=>
	;(chat-to-all "gg ( ͡° ͜ʖ ͡°)")
	(resign)
)
(defrule
	(population < 100)
	(up-compare-goal gl-enable-tsa < 1)
	(or(not(player-in-game every-ally))
	   (players-population every-ally < 100))
	(players-population every-enemy > 100)
	(game-time > 2400)
	(military-population < 10)
=>
	(chat-to-all "gg ¯\_(ツ)_/¯")
	(resign)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(up-compare-goal gl-enable-tsa != 2)
	(and(taunt-detected any-computer-ally 222)
	    (military-population > 5))
	(players-building-type-count target-player castle == 0)
=>
	(enable-timer 43 300)
	(set-goal gl-enable-tsa 2)
	(chat-to-allies "1coming to help")
	(acknowledge-taunt this-any-computer-ally 222)
	;(acknowledge-taunt this-any-human-ally 31)
)
(defrule
	(up-compare-goal gl-enable-tsa != 2)
	(taunt-detected any-human-ally 222)
	(up-compare-goal gl-help-phase != 1)
=>
	(chat-to-player this-any-human-ally "x where you need help")
	(up-modify-goal temporary-goal11 s:= sn-target-player-number)
	(up-get-player-fact this-any-human-ally player-number 0 temporary-goal10)
	;(up-chat-data-to-player every-ally "!!! Debug: Player %d asked for help" g: temporary-goal10)
	(up-modify-sn sn-target-player-number g:= temporary-goal10)
	(set-goal gl-help-phase 1)
	(acknowledge-taunt this-any-human-ally 222)
)
(defrule
	(up-compare-goal gl-enable-tsa != 2)
	(goal gl-help-phase 1)
	(cc-players-unit-type-count target-player flare == 0)
	(up-compare-goal temporary-goal10 > 0)
=>
	(up-modify-sn sn-target-player-number g:= temporary-goal10)
	;(chat-to-all "!!! Debug: No flare found yet, searching again.")
)
(defrule
	(up-compare-goal gl-enable-tsa != 2)
	(goal gl-help-phase 1)
	(cc-players-unit-type-count target-player flare > 0)
=>
	(up-find-player-flare target-player gl-send-help-x)
	(enable-timer 23 240)
	(set-goal gl-help-phase 2)
	(set-goal gl-enable-tsa 2)
	(up-modify-sn sn-target-player-number g:= temporary-goal11)
	(set-goal temporary-goal10 0)
	(chat-to-allies "I'll send help to you for 4 minutes")
)
(defrule
	(goal gl-help-phase 2)
	(up-compare-goal gl-enable-tsa == 2)
	(up-timer-status 23 == timer-running)
	(up-timer-status 24 != timer-running)
	;(military-population g:> gl-starting-army)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-send-help-x action-patrol -1 stance-defensive)
	(enable-timer 24 20)
	(chat-to-allies "sending more units")
)
(defrule
	(goal gl-help-phase 2)
	(up-timer-status 23 != timer-running)
	(up-compare-goal gl-enable-tsa == 2)
=>
	(set-goal gl-enable-tsa 0)
	(set-goal gl-help-phase 0)
	(up-reset-unit c: all-units-class)
	(chat-to-allies "going to stop sending units now")
)
(defrule
	(up-compare-goal gl-help-phase < 1)
	(or(up-timer-status 43 != timer-running)
	   (military-population < 3))
	(goal gl-enable-tsa 2)
=>
	(set-goal gl-enable-tsa 0)
	(chat-to-allies "Going to mass units first.")
)
#else
(defrule
	(or(and(food-amount < 650)
	       (up-research-status c: castle-age < research-pending))
	   (current-age >= castle-age))
	(up-compare-goal gl-enable-tsa != 2)
	(or(taunt-detected any-human-ally 222)
	   (and(taunt-detected any-computer-ally 222)
	       (military-population > 21))) ;11
	(players-building-type-count target-player castle == 0)
=>
	(set-goal gl-split-goal 4002)
)
(defrule
	(goal gl-split-goal 4002)
	(or(taunt-detected any-human-ally 222)
	   (taunt-detected any-computer-ally 222))
=>
	(enable-timer 43 300)
	(set-goal gl-enable-tsa 2)
	(chat-to-allies "1coming to help")
	(acknowledge-taunt this-any-computer-ally 222)
	(acknowledge-taunt this-any-human-ally 31)
	(set-goal gl-split-goal 0)
)
(defrule
	(or(up-timer-status 43 != timer-running)
	(or(military-population < 10)
	   (players-unit-type-count target-player mangonel-line > 0)))
	(goal gl-enable-tsa 2)
=>
	(set-goal gl-enable-tsa 0)
	(chat-to-allies "Going to mass units first.")
)
#end-if
(defrule
	(or(taunt-detected any-human-ally 222)
	   (taunt-detected any-computer-ally 222))
=>
	(chat-to-allies "2Can't do much yet.")
	(acknowledge-taunt this-any-computer-ally 222)
	(acknowledge-taunt this-any-human-ally 222)
	(acknowledge-taunt this-any-human-ally 31)
)	


(defrule
	(current-age > dark-age)
	(up-compare-goal gl-threat-time < 1000)
	(up-compare-sn sn-target-player-number s:!= sn-enemy-sling-target-player)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= gl-threat-player)
	(up-get-attacker-class gl-threat-source)
	(set-goal temporary-goal4 1)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-distance c: -1 g: gl-new-town-size)
	(up-filter-include 4 -1 -1 -1)
	(up-find-remote c: all-units-class c: 1)
	(up-get-search-state gl-local-total)
)
(defrule
	(town-under-attack)
	(strategic-number sn-military-level < 1)
	(up-timer-status 42 != timer-running)
	(up-compare-goal gl-remote-total > 0)
	(up-compare-goal gl-threat-source != wolf-class)
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-scary-object-x)
	(up-send-flare gl-scary-object-x)
	(set-goal gl-under-attack 1)
	(enable-timer 42 240)
	(chat-to-allies "222i need help")
)
(defrule
	(up-compare-goal gl-under-attack > 0)
	(nor(town-under-attack)
	    (up-enemy-units-in-town > 0))
=>
	(set-goal gl-under-attack 0)
	;(chat-local-to-self "disable gl-under-attack.")
)
#load-if-not-defined UP-POCKET-POSITION
#load-if-defined DIFFICULTY-HARDEST
(defrule
	(population < 24)
	(game-time > 690)
	(can-build watch-tower)
=>
	(up-assign-builders c: watch-tower c: 3)
	(build watch-tower)
	(disable-self)
)
(defrule
	(population < 30)
	(game-time > 720)
	(can-build watch-tower)
=>
	(up-assign-builders c: watch-tower c: 3)
	(build watch-tower)
	(disable-self)
)
(defrule
	(population < 30)
	(town-under-attack)
	(can-build watch-tower)
	(up-pending-objects c: watch-tower < 1)
=>
	(up-assign-builders c: watch-tower c: 3)
	(build watch-tower)
)
#end-if
#end-if

(defrule
	(or(goal gl-map-style WATER)
	(or(goal gl-map-style NOMAD)
	   (goal gl-map-style CONSIDER-FISH)))
	(building-type-count-total dock == 0)
	(building-type-count-total lumber-camp > 0)
	(cc-players-unit-type-count 0 sea-fish > 0)
	(cc-players-unit-type-count 0 shore-fish > 0)
	(can-build dock)
=>
	(build dock)
)
(defrule
	(or(goal gl-map-style WATER)
	(or(goal gl-map-style NOMAD)
	   (goal gl-map-style CONSIDER-FISH)))
	(unit-type-count-total fishing-ship < 4)
	(cc-players-unit-type-count 0 sea-fish > 0)
	(cc-players-unit-type-count 0 shore-fish > 0)
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
(defrule
	(or(goal gl-map-style WATER)
	(or(goal gl-map-style NOMAD)
	   (goal gl-map-style CONSIDER-FISH)))
	(building-type-count-total dock == 0)
	(building-type-count-total lumber-camp > 0)
	(cc-players-unit-type-count 0 sea-fish < 5)
	(cc-players-unit-type-count 0 shore-fish < 5)
	(idle-farm-count < 1)
	(up-pending-objects c: farm < 5)
	(can-build farm)
=>
	(build farm)
	(chat-local-to-self "Farm 4")
)
; deal with organ gun rush

(defrule
	(strategic-number sn-castle-age-strategy == end-game)
	(players-unit-type-count any-enemy organ-gun-line > 0)
	(building-type-count-total stable < 3)
	(can-build stable)
=>
	(set-goal gl-pause-tsa 1)
	(build stable)
)
(defrule
	(strategic-number sn-castle-age-strategy == end-game)
	(players-unit-type-count any-enemy organ-gun-line > 0)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
(defrule
	(strategic-number sn-castle-age-strategy == end-game)
	(players-unit-type-count any-enemy organ-gun-line > 0)
	(can-train knight-line)
=>
	(train knight-line)
)
(defrule
	(building-type-count-total farm > 17)
	(building-type-count-total mill < 2)
	(building-type-count blacksmith > 0)
	(can-build mill)
=>
	(build mill)
)
(defrule
	(building-type-count-total farm > 30)
	(building-type-count-total mill < 3)
	(building-type-count blacksmith > 0)
	(can-build mill)
=>
	(build mill)
)
(defrule
	(building-type-count-total farm > 40)
	(building-type-count-total mill < 4)
	(building-type-count blacksmith > 0)
	(can-build mill)
=>
	(build mill)
)
(defrule
	(gold-amount < 200)
	(wood-amount > 200)
	(town-under-attack)
	(up-research-status c: castle-age < research-pending)
	(up-compare-goal gl-enable-tsa < 1)
	(building-type-count-total market == 0)
	(can-build market)
=>
	(set-goal gl-pause-tsa 1)
	(build market)
)
(defrule
	(gold-amount < 200)
	(wood-amount > 400)
	(town-under-attack)
	(current-age >= castle-age)
	(building-type-count siege-workshop > 0)
	(up-compare-goal gl-enable-tsa < 1)
	(building-type-count-total market == 0)
	(can-build market)
=>
	(set-goal gl-pause-tsa 1)
	(build market)
)
(defrule
	(gold-amount < 1000)
	(food-amount > 1200)
	(current-age >= castle-age)
	(up-research-status c: imperial-age < research-pending)
	(building-type-count siege-workshop > 0)
	(up-compare-goal gl-enable-tsa < 1)
	(building-type-count-total market == 0)
	(can-build market)
=>
	(set-goal gl-pause-tsa 1)
	(build market)
)
(defrule
	(current-age == feudal-age)
	(research-available castle-age)
	(gold-amount < 200)
	(or(dropsite-min-distance gold == -1)
	   (dropsite-min-distance gold == 255))
	(building-type-count-total market == 0)
	(can-build market)
=>
	(build market)
)
(defrule
	(current-age == feudal-age)
	(research-available castle-age)
	(gold-amount < 200)
	(food-amount >= 900)
	(can-sell-commodity food)
=>
	(sell-commodity food)
)
(defrule
	(current-age == feudal-age)
	(research-available castle-age)
	(gold-amount < 200)
	(food-amount >= 400)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)
(defrule
	(up-compare-goal gl-map-style == LAND-NOMAD)
	(building-type-count-total lumber-camp == 0)
	(resource-found wood)
	(can-build lumber-camp)
=>
	(build lumber-camp)
)
(defrule
	(or(up-compare-goal gl-map-style == LAND-NOMAD)
	   (up-compare-goal gl-map-style == NOMAD))
	(building-type-count-total town-center == 0)
	(unit-type-count-total villager == 3)
	(can-build town-center)
	(strategic-number sn-castle-age-strategy != RUN)
=>
	(build town-center)
)
(defrule
	(or(up-compare-goal gl-map-style == LAND-NOMAD)
	   (up-compare-goal gl-map-style == NOMAD))
	(building-type-count-total town-center == 0)
	(unit-type-count-total villager == 4)
	(can-build town-center)
	(strategic-number sn-castle-age-strategy != RUN)
=>
	(up-assign-builders c: town-center-foundation c: 2)
	(build town-center)
)
(defrule
	(or(up-compare-goal gl-map-style == LAND-NOMAD)
	   (up-compare-goal gl-map-style == NOMAD))
	(building-type-count-total town-center == 0)
	(unit-type-count-total villager == 6)
	(can-build town-center)
	(strategic-number sn-castle-age-strategy != RUN)
=>
	(up-assign-builders c: town-center-foundation c: 4)
	(build town-center)
)
(defrule
	(or(up-compare-goal gl-map-style == LAND-NOMAD)
	   (up-compare-goal gl-map-style == NOMAD))
	(building-type-count-total town-center == 0)
	(wood-amount >= 30)
=>
	(up-assign-builders c: town-center-foundation c: 4)
)
(defrule
	(up-compare-goal gl-map-style == LAND-NOMAD)
	(wood-amount < 30)
=>
	(set-strategic-number sn-food-gatherer-percentage 76)
	(set-strategic-number sn-wood-gatherer-percentage 26)
)
(defrule
	(current-age == feudal-age)
	(dropsite-min-distance gold != -1)
	(dropsite-min-distance gold != 255)
	(dropsite-min-distance gold > 3)
	(up-pending-objects c: mining-camp < 1)
	(game-time > 960)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
)
(defrule
	(current-age == feudal-age)
	(wood-amount >= 1000)
	(building-type-count-total market == 0)
	(can-build market)
=>
	(set-goal gl-pause-tsa 1)
	(build market)
)
(defrule
	(housing-headroom == 0)
	(up-pending-objects c: house > 0)
	(can-research ri-loom)
=>
	(research ri-loom)
)
(defrule
	(food-amount < 350)
	(up-research-status c: feudal-age < research-pending)
	(or(up-compare-goal gl-map-style == LAND-NOMAD)
	   (up-compare-goal gl-map-style == NOMAD))
	(idle-farm-count < 1)
	(up-pending-objects c: farm < 5)
	(can-build farm)
=>
	(build farm)
)

(defrule
	(or(taunt-detected my-player-number 239)
	   (taunt-detected any-ally 239))
=>
	(up-chat-data-to-all "sn-food-gatherer-percentage: %d" s: sn-food-gatherer-percentage)
	(up-chat-data-to-all "sn-wood-gatherer-percentage: %d" s: sn-wood-gatherer-percentage)
	(up-chat-data-to-all "sn-gold-gatherer-percentage: %d" s: sn-gold-gatherer-percentage)
	(up-chat-data-to-all "sn-stone-gatherer-percentage: %d" s: sn-stone-gatherer-percentage)
	;(up-chat-data-to-all "496: %d" g: 496)
	(up-chat-data-to-all "sn-escrow-level: %d" s: sn-escrow-level)
	;(up-chat-data-to-all "sn-maximum-town-size: %d" s: sn-maximum-town-size)
	;(up-chat-data-to-all "gl-new-town-size: %d" g: gl-new-town-size)
	;(up-chat-data-to-all "gl-pause-tsa: %d" g: gl-pause-tsa)
	(up-chat-data-to-all "gl-previous-strategy: %d" g: gl-previous-strategy)
	(up-chat-data-to-all "gl-enable-tsa: %d" g: gl-enable-tsa)
	;(up-chat-data-to-all "gl-logical-tsa: %d" g: gl-logical-tsa)
	(up-chat-data-to-all "sn-target-player-number: %d" s: sn-target-player-number)
	(up-chat-data-to-all "sn-focus-player-number: %d" s: sn-focus-player-number)
	;(up-chat-data-to-all "sn-enemy-sling-target-player: %d" s: sn-enemy-sling-target-player)
	;(up-chat-data-to-all "sn-camp-max-distance: %d" s: sn-camp-max-distance)
	;(up-chat-data-to-all "sn-military-level: %d" s: sn-military-level)
	;(up-chat-data-to-all "sn-disable-defend-groups: %d" s: sn-disable-defend-groups)
	;(up-get-fact random-number 0 temporary-goal)
	;(up-chat-data-to-all "gl-extended-feudal-age: %d" g: gl-extended-feudal-age)
	;(up-chat-data-to-all "gl-total-lured-deer: %d" g: gl-total-lured-deer)
	;(up-chat-data-to-all "89 goal: %d" g: 89)
	;(up-chat-data-to-all "random number: %d" g: temporary-goal)
;	(up-chat-data-to-all "gl-escrow-level %d" g: gl-escrow-level)
	;(up-chat-data-to-all "goal 86 (deer luring): %d" g: 86)
	;(up-chat-data-to-all "gl-fast-castle: %d" g: gl-fast-castle)
;	(up-chat-data-to-all "gl-palisade-counter: %d" g: gl-palisade-counter)
	;(up-chat-data-to-all "gl-my-closest-pocket-ally: %d" g: gl-my-closest-pocket-ally)
	;(up-chat-data-to-all "gl-my-closest-flank-ally %d" g: gl-my-closest-flank-ally)
	(up-chat-data-to-all "sn-military-level: %d" s: sn-military-level)
;	(up-chat-data-to-all "gl-strategy: %d" g: gl-strategy)
	;(up-chat-data-to-all "sn-maximum-hunt-drop-distance: %d" s: sn-maximum-hunt-drop-distance)
	(up-chat-data-to-all "sn-castle-age-strategy: %d" s: sn-castle-age-strategy)
	(acknowledge-taunt my-player-number 239)
	(acknowledge-taunt this-any-ally 239)
)
(defrule
	(taunt-detected any-human 249)
=>
	(up-get-fact food-amount 0 temporary-goal)
	(up-chat-data-to-player this-any-human "Food: %d" g: temporary-goal)
	(up-get-fact wood-amount 0 temporary-goal)
	(up-chat-data-to-player this-any-human "Wood: %d" g: temporary-goal)
	(up-get-fact gold-amount 0 temporary-goal)
	(up-chat-data-to-player this-any-human "Gold: %d" g: temporary-goal)
	(up-get-fact stone-amount 0 temporary-goal)
	(up-chat-data-to-player this-any-human "Stone: %d" g: temporary-goal)
	(up-get-fact population 0 temporary-goal)
	(up-chat-data-to-player this-any-human "Population: %d" g: temporary-goal)
	(up-get-fact military-population 0 temporary-goal)
	(up-chat-data-to-player this-any-human "Military population: %d" g: temporary-goal)
	(up-get-fact warboat-count 0 temporary-goal)
	(up-chat-data-to-player this-any-human "Navy: %d" g: temporary-goal)
	(set-goal gl-split-goal 1020)
)
(defrule
	(taunt-detected any-human 249)
	(goal gl-split-goal 1020)
=>
	(up-chat-data-to-player this-any-human "Escrow Level: %d" s: sn-escrow-level)
	(acknowledge-taunt this-any-human 249)
	(set-goal gl-split-goal 0)
)
(defrule
	(goal gl-fast-castle 1)
	(up-compare-goal 86 == -2)
	(building-type-count-total mill < 2)
	(building-type-count-total mill == 1)
	(dropsite-min-distance deer-hunting > 10)
	(dropsite-min-distance deer-hunting != 255)
	(dropsite-min-distance deer-hunting != -1)
	(up-compare-goal gl-deer-left > 0)
	(building-type-count lumber-camp > 0)
	(can-build mill)
=>
	(set-strategic-number sn-dropsite-separation-distance 10)
	(set-strategic-number sn-preferred-mill-placement 1)
	(build mill)
	(set-strategic-number sn-dropsite-separation-distance 3)
)

; run from TC
(defrule
	(or(population > 185)
	   (up-compare-goal gl-projectile-threat-player s:== sn-enemy-sling-target-player))
	;(gold-amount > 400)
=>
	(up-jump-rule 20) ; 16
	(set-goal gl-retreat-reset 0)
)
(defrule
	(game-time > 5)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-find-local c: town-center c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-position-self-x)	
	(up-set-target-point gl-position-self-x)
	(disable-self)
)
(defrule
	(up-projectile-detected projectile-town-center < 3000)
	(or(up-research-status c: big-boy-armor != research-complete)
	   (military-population < 16))
	;(unit-type-count trebuchet-set < 1)
	(players-building-type-count target-player town-center <= 1)
	(up-projectile-target projectile-town-center != siege-weapon-class)
	;(up-projectile-target projectile-town-center != building-class)
	;(up-projectile-target projectile-town-center != villager-class)
=>
	(set-goal gl-split-goal 1000)
)
(defrule
	(goal gl-split-goal 1000)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-find-remote c: town-center c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-position-enemy-x)
	(up-set-target-point gl-position-enemy-x)
	(up-filter-distance c: -1 c: 15) ;7
	(up-filter-exclude -1 -1 -1 siege-weapon-class)
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-position-self-x action-move -1 stance-no-attack)
	(set-goal gl-retreat-reset 2)
	(set-goal gl-split-goal 0)
)
(defrule
	(up-projectile-detected projectile-town-center < 3000)
	(or(up-research-status c: big-boy-armor != research-complete)
	   (military-population < 16))
	(unit-type-count trebuchet-set < 1)
	(players-building-type-count target-player town-center > 1)
	(up-projectile-target projectile-town-center != siege-weapon-class)
	;(up-projectile-target projectile-town-center != building-class)
	;(up-projectile-target projectile-town-center != villager-class)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-get-point position-enemy gl-position-enemy-x)
	(up-set-target-point gl-position-enemy-x)
	(up-filter-exclude -1 -1 -1 siege-weapon-class)
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-position-self-x action-move -1 stance-no-attack)
	(set-goal gl-retreat-reset 2)
)
(defrule
	(or(up-projectile-detected projectile-town-center > 3000)
	   (up-projectile-target projectile-town-center == siege-weapon-class))
	(goal gl-retreat-reset 2)
=>
	(up-set-attack-stance all-units-class c: stance-aggressive)
	(up-reset-unit c: all-units-class)
	(set-goal gl-retreat-reset 0)
)
(defrule
	(up-projectile-detected projectile-castle < 3000)
	(unit-type-count trebuchet-set < 1)
	(players-building-type-count target-player castle <= 1)
	(up-projectile-target projectile-castle != siege-weapon-class)
	;(up-projectile-target projectile-castle != building-class)
	;(up-projectile-target projectile-town-castle != villager-class)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-find-remote c: castle c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-position-enemy-x)
	(up-set-target-point gl-position-enemy-x)
	(up-filter-distance c: -1 c: 15) ;7
	(up-filter-exclude -1 -1 -1 siege-weapon-class)
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-position-self-x action-move -1 stance-no-attack)
	;;;(chat-local-to-self "castle fire detected")
	(set-goal gl-retreat-reset 4)
)
(defrule
	(up-projectile-detected projectile-castle < 3000)
	(unit-type-count trebuchet-set < 1)
	(players-building-type-count target-player castle > 1)
	(up-projectile-target projectile-castle != siege-weapon-class)
	;(up-projectile-target projectile-castle != building-class)
	;(up-projectile-target projectile-town-castle != villager-class)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-find-remote c: castle c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-position-enemy-x)
	(up-set-target-point gl-position-enemy-x)
	(up-filter-exclude -1 -1 -1 siege-weapon-class)
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-position-self-x action-move -1 stance-no-attack)
	;;;(chat-local-to-self "castle fire detected")
	(set-goal gl-retreat-reset 4)
)
(defrule
	(or(up-projectile-detected projectile-castle > 3000)
	   (up-projectile-target projectile-castle == siege-weapon-class))
	(goal gl-retreat-reset 4)
=>
	(up-set-attack-stance all-units-class c: stance-aggressive)
	(up-reset-unit c: all-units-class)
	(set-goal gl-retreat-reset 0)
)
(defrule
	(up-projectile-detected projectile-watch-tower < 3000)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-garrison c: 2 c: -1) ; c: 3
	(up-find-remote c: watch-tower c: 1)
	(up-get-search-state gl-local-total)
)
(defrule
	(up-projectile-detected projectile-watch-tower < 3000)
	(up-research-status g: big-boy-armor < research-complete)
	(unit-type-count trebuchet-set < 1)
	(unit-type-count battering-ram-line < 1)
	(military-population < min-army-size)
	(up-compare-goal gl-enable-tsa >= 1)
	(up-compare-goal gl-remote-total < 1)
	(unit-type-count-total militiaman-line < 5)
=>
	(set-goal gl-split-goal 1002)
)
(defrule
	(goal gl-split-goal 1002)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-find-remote c: watch-tower c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-position-enemy-x)
	(up-set-target-point gl-position-enemy-x)
	(up-filter-exclude -1 -1 -1 siege-weapon-class)
	(up-filter-distance c: -1 c: 10) ;7
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-position-self-x action-move -1 stance-no-attack)
	(chat-local-to-self "watch tower fire detected")
	(set-goal gl-retreat-reset 6)
	(set-goal gl-split-goal 0)
)
(defrule
	(up-projectile-detected projectile-watch-tower < 3000)
	(up-projectile-target projectile-watch-tower != siege-weapon-class)
	(up-compare-goal gl-remote-total > 0)
	(up-compare-goal gl-enable-tsa >= 1)
	(up-compare-goal gl-flush-type != maa)
=>
	(set-goal gl-split-goal 1300)
)
(defrule
	(up-projectile-detected projectile-watch-tower < 3000)
	(up-projectile-target projectile-watch-tower != siege-weapon-class)
	(up-compare-goal gl-remote-total > 0)
	;(up-compare-goal gl-enable-tsa >= 1)
	(up-compare-goal gl-flush-type == maa)
=>
	(set-goal gl-split-goal 1301)
)
(defrule
	(goal gl-split-goal 1300)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-find-remote c: watch-tower c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-position-enemy-x)
	(up-set-target-point gl-position-enemy-x)
	(up-filter-exclude -1 -1 -1 siege-weapon-class)
	(up-filter-distance c: -1 c: 10) ;7
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-position-self-x action-move -1 stance-no-attack)
	(chat-local-to-self "watch tower fire detected (garrisoned)")
	(set-goal gl-retreat-reset 6)
)
(defrule
	(goal gl-split-goal 1301) ; maa one
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-find-remote c: watch-tower c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-position-enemy-x)
	(up-set-target-point gl-position-enemy-x)
	(up-filter-exclude -1 -1 -1 siege-weapon-class)
	(up-filter-distance c: -1 c: 10) ;7
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: archery-class c: 240)
	(up-target-point gl-position-self-x action-move -1 stance-no-attack)
	(chat-local-to-self "watch tower fire detected (garrisoned maa)")
	(set-goal gl-retreat-reset 6)
)
(defrule
	(up-projectile-detected projectile-watch-tower < 3000)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-find-remote c: watch-tower c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-position-enemy-x)
	(up-set-target-point gl-position-enemy-x)
	(up-filter-exclude -1 -1 -1 siege-weapon-class)
	(up-filter-distance c: -1 c: 10)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-filter-include 4 -1 -1 -1)
	(up-find-remote c: all-units-class c: 240)
	(up-get-search-state gl-local-total)
	(set-goal gl-split-goal 1060)
)
(defrule
	(goal gl-split-goal 1060)
	(up-projectile-detected projectile-watch-tower < 3000)
	(up-research-status g: big-boy-armor < research-complete)
	(up-projectile-target projectile-castle != siege-weapon-class)
	;(up-compare-goal gl-enable-tsa > 0)
	(unit-type-count mangonel-line == 0)
	(unit-type-count battering-ram-line == 0)
	(up-compare-goal gl-remote-total > 12)
	(up-compare-goal gl-flush-type != scrush)
	(up-compare-goal gl-flush-type != maa)
=>
	(set-goal gl-split-goal 1061)
)	
(defrule
	(goal gl-split-goal 1061)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-find-remote c: watch-tower c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-position-enemy-x)
	(up-set-target-point gl-position-enemy-x)
	(up-filter-exclude -1 -1 -1 siege-weapon-class)
	(up-filter-distance c: -1 c: 10) ;7
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-target-point gl-position-self-x action-move -1 stance-no-attack)
	(chat-local-to-self "watch tower gaurded by army threat")
	(set-goal gl-retreat-reset 222)
	(set-goal gl-split-goal 0)
)
(defrule
	(goal gl-split-goal 1060)
	(or(up-projectile-detected projectile-watch-tower >= 3000)
	(or(up-research-status g: big-boy-armor == research-complete)
	(or(up-projectile-target projectile-castle == siege-weapon-class)
	   (up-compare-goal gl-remote-total < 1))))
=>
	(set-goal gl-split-goal 0)
)
(defrule
	(or(up-projectile-detected projectile-watch-tower > 3000)
	   (up-projectile-target projectile-watch-tower == siege-weapon-class))
	(goal gl-retreat-reset 6)
=>
	(up-set-attack-stance all-units-class c: stance-aggressive)
	(up-reset-unit c: all-units-class)
	(set-goal gl-retreat-reset 0)
)
(defrule
	(or(up-projectile-detected projectile-watch-tower > 7000)
	   (up-projectile-target projectile-watch-tower == siege-weapon-class))
	(goal gl-retreat-reset 222)
=>
	(up-set-attack-stance all-units-class c: stance-aggressive)
	(up-reset-unit c: all-units-class)
	(set-goal gl-retreat-reset 0)
)
(defrule
	(up-timer-status 6 != timer-running)
	(not(research-completed castle-age))
	(up-compare-goal gl-retreat-reset < 1)
=>
	(up-set-attack-stance all-units-class c: stance-aggressive)
	(enable-timer 6 60)
)
(defrule
	(game-time > 5)
	(game-time s:< sn-home-exploration-time)
	(up-timer-status 47 != timer-running)
=>
	(set-goal gl-split-goal 1090)
	(enable-timer 47 10)
	;(chat-local-to-self "Ran1")
)
(defrule
	(goal gl-split-goal 1090)
=>
	(set-strategic-number sn-target-player-number 0)
	(set-strategic-number sn-focus-player-number 0)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-get-point position-self gl-position-self-x)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 40)
	(up-find-local c: scout-cavalry-line c: 1) ;scout cavalry
	(up-find-local c: infantry-class c: 1) ; eagle warrior
	(up-find-remote c: livestock-class c: 1)
	(up-target-objects 0 action-move -1 stance-aggressive)
	(set-goal gl-split-goal 0)
)
(defrule
    (up-compare-goal gl-map-style != LAND-NOMAD)
    (unit-type-count villager < 7)
    (unit-type-count livestock-class > 0)
    (unit-type-count villager-wood > 0)
    (unit-type-count villager-shepherd > 0)
    (unit-type-count villager-shepherd < 6)
=>
    (up-reset-search 1 1 1 1)
    (up-reset-filters)
    (up-filter-distance c: -1 c: 8)
    (up-find-local c: villager-m-lumberjack c: 10)
    (up-find-local c: villager-f-lumberjack c: 10)
    (up-get-search-state gl-local-total)
    (up-modify-sn sn-number-garrison-units g:= gl-local-last)
    (up-modify-sn sn-maximum-garrison-fill g:= gl-local-last)
    (up-garrison town-center c: villager-m-lumberjack)
    (up-garrison town-center c: villager-f-lumberjack)
   ;(up-chat-data-to-all "Garrisoning %d lumberjacks" g: gl-local-last)
)
(defrule
    (up-compare-goal gl-map-style != LAND-NOMAD)
    (unit-type-count villager < 7)
    (unit-type-count livestock-class > 0)
    (unit-type-count villager-wood > 0)
    (not(sheep-and-forage-too-far))
    (unit-type-count villager-shepherd < 6)
=>
    (up-reset-search 1 1 1 1)
    (up-reset-filters)
    (up-filter-distance c: -1 c: 8)
    (up-find-local c: villager-m-lumberjack c: 10)
    (up-find-local c: villager-f-lumberjack c: 10)
    (up-get-search-state gl-local-total)
    ;(up-modify-sn sn-number-garrison-units g:= gl-local-last)
    ;(up-modify-sn sn-maximum-garrison-fill g:= gl-local-last)
    (up-garrison town-center c: villager-m-lumberjack)
    (up-garrison town-center c: villager-f-lumberjack)
   ;(up-chat-data-to-all "Garrisoning %d lumberjacks" g: gl-local-last)
)
; garrison foragers for sheep
(defrule
    (up-compare-goal gl-map-style != LAND-NOMAD)
    (unit-type-count livestock-class > 0)
    (unit-type-count villager-forager > 0)
    (unit-type-count villager-shepherd > 0)
    (unit-type-count villager-shepherd < 6)
	(building-type-count-total mill == 0)
=>
    (up-reset-search 1 1 1 1)
    (up-reset-filters)
    (up-filter-distance c: -1 c: 8)
    (up-find-local c: villager-m-forager c: 10) ; male forager
    (up-find-local c: villager-f-forager c: 10) ; female forager
    (up-get-search-state gl-local-total)
    (up-modify-sn sn-number-garrison-units g:= gl-local-last)
    (up-modify-sn sn-maximum-garrison-fill g:= gl-local-last)
    (up-garrison town-center c: villager-m-forager)
    (up-garrison town-center c: villager-f-forager)
   ;(up-chat-data-to-all "Garrisoning %d foragers" g: gl-local-last)
)
; garrison fishers for sheep
(defrule
    (up-compare-goal gl-map-style != LAND-NOMAD)
    (unit-type-count livestock-class > 0)
    (unit-type-count villager-forager > 0)
    (unit-type-count villager-shepherd > 0)
    (unit-type-count villager-shepherd < 6)
	(building-type-count-total mill == 0)
=>
    (up-reset-search 1 1 1 1)
    (up-reset-filters)
    (up-filter-distance c: -1 c: 15) 
    (up-find-local c: 56 c: 10) ; male fish
    (up-find-local c: 57 c: 10) ; female fish
    (up-get-search-state gl-local-total)
    (up-modify-sn sn-number-garrison-units g:= gl-local-last)
    (up-modify-sn sn-maximum-garrison-fill g:= gl-local-last)
    (up-garrison town-center c: 56) 
    (up-garrison town-center c: 57)
   ;(up-chat-data-to-all "Garrisoning %d fishers" g: gl-local-last)
)
; deer luring
; count deer
(defrule
	;(game-time s:< sn-home-exploration-time)
	(current-age == dark-age)
=>
    (up-reset-search 1 1 1 1)
    (up-reset-filters)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-get-point position-self gl-position-self-x)
	(up-set-target-point gl-position-self-x)
    (up-filter-distance c: -1 c: 40) ; s: sn-maximum-hunt-drop-distance
    (up-find-remote c: deer c: 240)
    (up-get-search-state gl-local-total)
	(up-modify-goal gl-deer-left g:= gl-remote-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	;(up-chat-data-to-all "Deers left: %d" g: gl-deer-left)
)
; for boar
(defrule
	(current-age == dark-age)
	(dropsite-min-distance boar-hunting s:< sn-maximum-hunt-drop-distance)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-reset-filters)
	(up-reset-search 1 1 1 1)
	(up-get-point position-self gl-position-self-x)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 40)
	(up-find-remote c: wild-boar c: 240)
	(up-find-remote c: javelina c: 240)
	(up-get-search-state gl-local-total)
	(up-modify-goal gl-my-boars g:= gl-remote-total)
	;(up-chat-data-to-self "My boars: %d" g: gl-my-boars)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)
(defrule
	(up-compare-goal gl-my-boars g:> gl-boar-count)
=>
	(up-modify-goal gl-boar-count c:+ 1)
	;(up-chat-data-to-self "Found boars: %d" g: gl-boar-count)
	(up-jump-rule -1)
)
(defrule
	(up-compare-goal gl-my-boars g:== gl-boar-count)
=>
	(up-modify-goal gl-boar-diff g:- gl-boar-count)
	(up-modify-goal gl-boars-total g:- gl-boar-diff)
	(up-modify-goal gl-boar-diff g:= gl-boar-count)
	;(up-chat-data-to-self "Total boars: %d" g: gl-boars-total)
)
(defrule
	(up-compare-goal gl-my-boars g:< gl-boar-count)
=>
	(up-modify-goal gl-boar-count c:- 1)
	(up-modify-goal gl-boar-diff g:= gl-boar-count)
)
(defrule
	(unit-type-count villager < 19)
=>
	(set-goal gl-deer-lure-hunters 2)
)
(defrule
	(unit-type-count villager >= 19)
=>
	(set-goal gl-deer-lure-hunters 4)
)
(defrule
	(true)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 32)
)
(defrule
	;(up-gaia-type-count c: livestock-class < 1) 
	(up-compare-goal 86 != 1)
	(up-find-remote c: livestock-class c: 0)
	(up-compare-goal 86 != -2)
	(or(up-compare-goal gl-boars-total >= 2)
	   (up-compare-goal gl-deer-left >= 4)) ;6
	(or(game-time > 240)
	   (strategic-number sn-enable-boar-hunting == 2))
	(up-compare-goal gl-deer-left > 0) ; atleast 1 deer needs to exist.
=>
	;(chat-local-to-self "Starting deer luring.")
	(set-goal 86 1)
)	
(defrule
	(up-compare-goal 86 != -2)
	(up-compare-goal 86 != 1)
	;(or(up-gaia-type-count-total c: livestock-class > 1)
	;(or(and(up-compare-goal gl-boar-total < 2)
	;       (up-compare-goal gl-deer-left < 6))
	;(or(up-compare-goal gl-map-style == MICHI)
	;   (unit-type-count villager < 11))))
	;(up-compare-goal 89 > 10)
=>
	(up-jump-rule 13)
)
(defrule
	(up-compare-goal gl-old-deer < 1)
	(up-compare-goal 496 > 0)
=>
	(up-modify-goal gl-old-deer g:= 496)
)
(defrule
	(up-set-target-by-id g: gl-old-deer)
	(up-object-data object-data-status > 2)
	(up-object-data object-data-carry < 35)
	(up-compare-goal 496 g:!= gl-old-deer)
=>
	(set-goal gl-old-deer 0)
)
(defrule
	(not	(up-set-target-by-id g: 496))
	(up-compare-goal 496 != 0)
=>
	(set-goal 496 0)
)
;(defrule
;	(up-compare-goal 86 != -2)
;	(dropsite-min-distance deer-hunting != -1)
;	(dropsite-min-distance deer-hunting < 40)
;	(up-compare-goal gl-deer-left > 0)
;	(goal 496 0)
;=>	
;	;(up-modify-goal gl-old-deer g:= 496)
;	(up-get-point position-self 87)
;	(up-set-target-point 87)
;	(up-reset-search 1 1 1 1)
;	(up-reset-filters)
;	(up-filter-distance c: 7 c: 31)
;	(up-find-remote c: deer c: 1)
;	(up-set-target-object search-remote c: 0)
;	(up-get-point position-object 93)
;	(up-get-object-data object-data-id 496)
;	(set-goal 86 1)
;)
(defrule
	(not	(up-set-target-by-id g: 496))
	(up-compare-goal 496 != 0)
=>
	(set-goal 496 0)
)
(defrule
	(goal 86 1)
	(up-compare-goal 496 != 0)
	(up-set-target-by-id g: 496)
	(up-object-data object-data-class != 909)
=>
	(set-goal 496 0)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	;;(chat-local-to-self "Not a deer, search again...")
)
(defrule
	(goal 86 1)
	(up-compare-goal 496 != 0)
	(up-set-target-by-id g: 496)
	(up-object-data object-data-status > 2)
=>
	(set-goal 496 0)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	;(chat-local-to-self "Deer dead, retask scout.")
)
(defrule
	(up-compare-goal 86 != -2)
	;(dropsite-min-distance deer-hunting != -1)
	;(dropsite-min-distance deer-hunting < 40)
	(up-compare-goal gl-deer-left > 0)
	(goal 496 0)
=>
	(up-modify-goal gl-old-deer g:= 496)
	(up-get-point position-self 87)
	(up-set-target-point 87)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-distance c: 7 c: 31)
	(up-find-remote c: deer c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object 93)
	(up-get-object-data object-data-id 496)
	;(set-goal 86 1)
)
(defrule
	(goal 86 1)
	;(up-compare-goal gl-local-total > 0)
	(up-set-target-by-id g: 496)
	(up-object-data object-data-class == 909) ; tame animal group
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object 91)
	(up-set-target-by-id g: 496)
	(up-get-point position-self 87)
	(up-get-point position-object 93)
	;(up-bound-point 93 93)
	(up-get-point-distance 93 87 89)
	(up-lerp-tiles 93 87 c: -1)
	(up-target-point 93 action-move -1 -1)
)
(defrule
	(goal 86 1)
	(up-compare-goal 89 < 6)
=>
	(up-reset-search 1 1 1 1) 
	(up-reset-filters)
	(up-get-point position-self 87)
	(up-set-target-point 87)
	(up-filter-exclude -1 actionid-move orderid-move -1)
	(up-filter-distance c: -1 c: 12) ; was 12
	(up-find-local c: villager-class g: gl-deer-lure-hunters) ; 4
	(up-get-search-state gl-local-total)
	;(up-chat-data-to-player my-player-number "Found: %d" g: gl-local-last)
)
(defrule
	(goal 86 1)
	(dropsite-min-distance live-boar > 15)
	(up-compare-goal 496 != -1)
	(up-compare-goal gl-local-last > 0)
	(up-timer-status 40 != timer-running)
	(up-compare-goal gl-deer-left >= 1)
	(up-compare-goal 89 < 6)
	(up-compare-goal 89 != -1)
=>
	(set-goal gl-split-goal 4000)
)
(defrule
	(goal gl-split-goal 4000)
=>
	(up-filter-exclude -1 -1 -1 -1)
	(up-find-remote c: deer c: 1)
	(up-get-search-state gl-local-total)
	;(up-chat-data-to-player my-player-number "Deers: %d" g: gl-remote-last)
	(up-set-target-by-id g: 496)
	(up-target-objects 0 action-default -1 -1)
	;(set-goal 496 0)
	(set-goal 89 7)
	(enable-timer 40 25) ;5
	(up-modify-goal gl-slain-deer c:+ 1)
	;(up-chat-data-to-player my-player-number "Slain deer: %d" g: gl-slain-deer)
	(set-goal gl-split-goal 0)
)
(defrule
	(up-compare-goal gl-fast-castle != 1)
	(up-compare-goal 86 != -2)
	(game-time > 510)
	(or(game-time s:> sn-home-exploration-time)
	   (up-compare-goal gl-deer-left < 1))
	(or(food-amount > 350)
	   (up-research-status c: feudal-age >= research-pending))
=>
	(set-goal 86 -2)
	;(chat-local-to-self "Disabling deer luring.") ; Stopping deer luring
)
(defrule
	(game-time > 510)
	(up-compare-goal gl-fast-castle == 1)
	(up-compare-goal 86 != -2)
	(or(up-compare-goal gl-deer-left < 1)
	   (up-research-status c: castle-age >= research-pending))
=>
	(set-goal 86 -2)
	;(chat-local-to-self "Disabling deer luring.")
)
(defrule
	(up-compare-goal gl-deer-left < 1)
	(up-compare-goal gl-slain-deer > 0)
	(up-compare-goal 86 == 1)
=>
	(set-goal 86 -2)
	;(chat-local-to-self "Disabling deer luring.")
)
(defrule
	(goal 86 -2)
	(strategic-number sn-focus-player-number == 0)
	(up-compare-goal temporary-goal > 0) ; -1
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-goal temporary-goal 0)
	;(chat-local-to-self "Ran3")
)
(defrule
	(taunt-detected any-human-ally 110)
	(military-population > 1)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1)
	(up-filter-include 4 -1 -1 -1)
	(up-filter-exclude -1 actionid-explore orderid-explore siege-weapon-class)
	(up-find-local c: all-units-class c: 1)
	(up-get-search-state gl-local-total)
	(set-goal gl-split-goal 1050)
)
(defrule
	(goal gl-split-goal 1050)
	(up-compare-goal gl-local-last > 0)
	(taunt-detected any-human-ally 110)
=>
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-send-flare gl-object-point-x)
	(chat-to-allies "part of my army is here.")
	(acknowledge-taunt this-any-human-ally 110)
	(set-goal gl-split-goal 1050)
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(current-age < castle-age)
	(players-building-count any-ally < 1)
	(up-compare-goal gl-enemy-strategy == fast-castle)
	(or(players-building-type-count any-enemy stable > 0)
	   (players-unit-type-count any-enemy knight-line > 0))
	(up-compare-goal gl-fast-castle != 1)
	(unit-type-count-total spearman-line < 8)
	(can-train spearman-line)
	(nor(strategic-number sn-escrow-level == ri-wheel-barrow)
	(nor(strategic-number sn-escrow-level == wheel-barrow-2)
	    (strategic-number sn-escrow-level == ri-fletching)))
=>
	(train spearman-line)
)
(defrule
	(players-current-age focus-player <= feudal-age)
	(players-current-age every-enemy < castle-age)
	(players-military-population focus-player > 1)
	(up-compare-goal gl-fast-castle != 1)
	(strategic-number sn-cavalry-threat < 7)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
(defrule
	(players-current-age focus-player <= feudal-age)
	(players-current-age every-enemy < castle-age)
	(players-military-population focus-player > 1)
	(building-type-count-total siege-workshop < 1)
	(strategic-number sn-archer-threat > 7)
	(strategic-number sn-archer-threat < 20)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
(defrule
	(players-military-population focus-player > 1)
	(building-type-count-total siege-workshop < 1)
	(or(players-unit-type-count focus-player battering-ram-line > 0)
	   (players-unit-type-count focus-player mangonel-line > 0))
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
#end-if
; Task villagers to lumber-camp
(defrule
	(current-age == dark-age)
	(building-type-count lumber-camp > 0)
=>
   (up-reset-search 1 1 1 1)
   (up-reset-filters)
   (up-find-local c: villager-m-lumberjack c: 240)
   (up-find-local c: villager-f-lumberjack c: 240)
   (up-modify-goal temporary-goal s:= sn-focus-player-number)
   (up-modify-sn sn-focus-player-number c:= my-player-number)
   (up-find-remote c: lumber-camp c: 1)
   (up-target-objects 0 action-default -1 -1)
   (up-modify-sn sn-focus-player-number g:= temporary-goal)
   (chat-local-to-self "task villagers to lumbercamp")
   (disable-self)
)
; Task villagers to mining-camp
(defrule
	(current-age == dark-age)
	(building-type-count mining-camp > 0)
=>
   (up-reset-search 1 1 1 1)
   (up-reset-filters)
   (up-find-local c: 579 c: 240) ; male gold miner
   (up-find-local c: 581 c: 240) ; female gold miner
   (up-modify-goal temporary-goal s:= sn-focus-player-number)
   (up-modify-sn sn-focus-player-number c:= my-player-number)
   (up-find-remote c: mining-camp c: 1)
   (up-target-objects 0 action-default -1 -1)
   (up-modify-sn sn-focus-player-number g:= temporary-goal)
   (chat-local-to-self "task gold villagers to miningcamp")
   (disable-self)
)
; task villagers to mill, specifically the builder...
(defrule
	(unit-type-count villager-forager == 0)
	(up-compare-goal gl-berries-left > 0)
	;(not(sheep-and-forage-too-far))
	(building-type-count mill >= 1)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: mill c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-object-point-x)
	(up-set-target-point gl-object-point-x )
	(up-filter-distance c: -1 c: 1) ;5
	(up-find-local c: villager-class c: 1)
	(up-find-remote c: forage-bush c: 1)
	(up-target-objects 0 action-default -1 -1)
	;(chat-local-to-self "mill builder to forage")
	(disable-self)
)
; count berries
(defrule
	(game-time s:< sn-home-exploration-time)
=>
    (up-reset-search 1 1 1 1)
    (up-reset-filters)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-get-point position-self gl-position-self-x)
	(up-set-target-point gl-position-self-x)
    (up-filter-distance c: -1 c: 40)
    (up-find-remote c: forage-bush c: 240)
    (up-get-search-state gl-local-total)
	(up-modify-goal gl-berries-left g:= gl-remote-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
;	(up-chat-data-to-all "Berries left: %d" g: gl-berries-left)
	;(chat-local-to-self "Ran2")
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(current-age == feudal-age)
	(goal gl-fast-castle 1)
	(building-type-count-total watch-tower < 2)
	(building-type-count mining-camp > 0)
	(up-compare-goal gl-map-style == OPEN)
	(can-build-with-escrow watch-tower)
=>
	(up-assign-builders c: watch-tower c: 3)
	(set-strategic-number sn-placement-zone-size 1)
	(up-set-placement-data my-player-number mining-camp c: 1) 
	(chat-to-player my-player-number "Mining camp Watch Tower")
	(up-build place-control 1 c: watch-tower)
	(up-jump-rule 9001)
	(disable-self)
)
#end-if
;(defrule
;	(true)
;=>
;	(up-chat-data-to-all "gl-map-style: %d" g: gl-map-style)
;)
(defrule
	(strategic-number sn-military-level < 1)
	(up-research-status c: castle-age == research-pending)
	(up-timer-status 6 != timer-running)
=>	
	(up-set-attack-stance all-units-class c: stance-stand-ground)
	(up-retreat-now)
	(enable-timer 6 15)
)
(defrule
	(up-research-status c: castle-age > research-pending)
=>	
	(up-set-attack-stance all-units-class c: stance-aggressive)
	(up-reset-unit c: all-units-class)
	(disable-self)
)
(defrule	
	(game-time > 565)
	(up-compare-goal gl-fast-castle != 1)
	(unit-type-count villager >= 24)
	(up-research-status c: feudal-age < research-pending)
	(food-amount < 500)
	(up-pending-objects c: villager < 1)
=>
	(up-drop-resources sheep-food c: 8)
	(up-drop-resources farm-food c: 8)
	(up-drop-resources forage-food c: 8)
	(up-drop-resources deer-food c: 10) ;25
	(up-drop-resources boar-food c: 10) ;25
)
(defrule
	(strategic-number sn-allow-drush-defense != 1)
	(military-population < 10)
	(players-unit-type-count focus-player skirmisher > 0)
	(players-unit-type-count focus-player archer-line < 2) ; 5
	(players-military-population focus-player < 20) ; 10
	(strategic-number sn-allow-civilian-defense != 3)
=>
	(set-strategic-number sn-allow-civilian-defense 3)
)
(defrule
	(strategic-number sn-allow-drush-defense != 1)
	(or(players-military-population focus-player >= 20) ;10
	(or(military-population > 10)
	(or(players-unit-type-count focus-player elite-skirmisher > 0)
	   (players-unit-type-count focus-player archer-line >= 2)))) ; 5
	(strategic-number sn-allow-civilian-defense == 3)
=>
	(set-strategic-number sn-allow-civilian-defense 1)
)
(defrule
	(strategic-number sn-allow-drush-defense == 1)
	(strategic-number sn-allow-civilian-defense != 3)
=>
	(chat-to-all "!!! Allow villagers to fight militia!")
	(set-strategic-number sn-allow-civilian-defense 3)
)
; drush counter logic
(defrule
	(up-compare-goal temporary-goal12 >= 9)
=>
	(set-goal temporary-goal12 1)
	;(chat-to-all "!!! Reset temporary-goal12")
)
(defrule
	(strategic-number sn-allow-drush-defense != 1)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= temporary-goal12)
	(up-modify-goal temporary-goal12 c:+ 1)
	;(up-chat-data-to-all "new sn-focus-player-number: %d" s: sn-focus-player-number)
	(set-goal gl-remote-last 0)
)
(defrule
	(strategic-number sn-allow-drush-defense == 1)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= temporary-goal12)
	(set-goal gl-remote-last 0)
)
(defrule
	(players-stance focus-player enemy)
	(players-current-age focus-player == dark-age)
	(military-population g:> gl-starting-army)
=>
	(up-find-local c: town-center c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-position-self-x)	
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 s: sn-camp-max-distance)
	(up-find-remote c: militiaman-line c: 240)
	(up-get-search-state gl-local-total)
	;(up-chat-data-to-self "gl-remote-total: %d" g: gl-remote-total)
)
(defrule
	(strategic-number sn-allow-drush-defense != 1)
	(up-compare-goal gl-remote-last > 0) ; militia in town
=>
	(set-strategic-number sn-allow-drush-defense 1)
	(chat-to-all "!!! Enemy drush in my town.")
)
(defrule
	(strategic-number sn-allow-drush-defense == 1)
	(up-compare-goal gl-remote-last < 1) ; no militia in town.
=>
	(set-strategic-number sn-allow-drush-defense 0)
	(chat-to-all "!!! Enemy drush is no longer in my town.")
)
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	;(up-chat-data-to-all "old sn-focus-player-number: %d" s: sn-focus-player-number)
)

; for sheep
(defrule
	(cc-players-unit-type-count 0 livestock-class > 0)
	(up-gaia-type-count c: livestock-class g:> gl-sheep-count)
=>
	(up-modify-goal gl-sheep-count c:+ 1)
;	(up-chat-data-to-self "Found sheep: %d" g: gl-sheep-count)
;	(enable-timer 3 5)
)
(defrule
;	(timer-triggered 3)
	(up-gaia-type-count c: livestock-class g:== gl-sheep-count)
=>

	(up-modify-goal gl-sheep-diff g:- gl-sheep-count)
	(up-modify-goal gl-sheep-sum g:- gl-sheep-diff)
	(up-modify-goal gl-sheep-diff g:= gl-sheep-count)
;	(disable-timer 3)
;	(up-chat-data-to-self "total sheep: %d" g: sum-sheep-goal)
)
(defrule
	(up-gaia-type-count c: livestock-class g:< gl-sheep-count)
=>
	(up-modify-goal gl-sheep-count c:- 1)
	(up-modify-goal gl-sheep-sum g:= gl-sheep-count)
)
(defrule
	(up-compare-goal gl-enemy-strategy == UNKNOWN)
	(players-current-age focus-player == dark-age)
	(players-civilian-population focus-player > 26) ;25
=>
	(set-goal gl-enemy-strategy fast-castle)
	(chat-local-to-self "enemy fast castling")
)
(defrule
	(up-compare-goal gl-enemy-strategy == UNKNOWN)
	(strategic-number sn-enemy-current-age == castle-transit)
	(game-time < 1200)
=>
	(set-goal gl-enemy-strategy fast-castle)
	(chat-local-to-self "enemy fast castling")
)
(defrule
	(up-compare-goal gl-enemy-strategy == fast-castle)
	(game-time < 960)
	(strategic-number sn-enemy-current-age < CASTLE)
	(players-military-population focus-player > 6) ; 1
=>
	(set-goal gl-enemy-strategy flushing)
	(chat-local-to-self "enemy is flushing")
)
(defrule
	(up-compare-goal gl-enemy-strategy == fast-castle)
	(strategic-number sn-enemy-current-age == CASTLE)
	(up-compare-goal gl-enemy-strategy != EAGLE-RUSH)
	(players-military-population focus-player > 3)
=>
	(set-goal gl-enemy-strategy UNKNOWN)
	(chat-local-to-self "enemy is !!!")
)
(defrule
	(or(players-civ focus-player aztec)
	(or(players-civ focus-player mayan)
	   (players-civ focus-player incan)))
	(or(and(players-building-type-count focus-player barracks > 1)
           (players-building-type-count focus-player archery-range < 1))	
	   (and(players-unit-type-count focus-player eagle-warrior-line >= 4)
	       (strategic-number sn-infantry-threat > 4)))
	(players-stance focus-player enemy)
	(up-compare-goal gl-enemy-strategy != EAGLE-RUSH)
=>
	(set-goal gl-enemy-strategy EAGLE-RUSH)
	(chat-local-to-self "enemy is eagle rushing.")
)
#load-if-not-defined UP-HUMAN-IN-GAME
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(players-stance focus-player enemy)
	(players-building-count focus-player > 4)
	(up-compare-goal gl-enemy-strategy == fast-castle)
	(up-research-status c: castle-age < research-pending)
	(game-time > 960)
	(players-building-type-count focus-player mining-camp > 0)
	(can-build-with-escrow watch-tower)
=>
	(set-goal gl-split-goal 1055)
)
(defrule
	(goal gl-split-goal 1055)
=>
	(release-escrow stone)
	(release-escrow wood)
	(up-assign-builders c: watch-tower c: 1)
	(set-strategic-number sn-placement-fail-delta 1)
	(set-strategic-number sn-placement-zone-size 1)
	(up-set-placement-data focus-player mining-camp c: 1) 
	;(chat-to-player my-player-number "forward mc tower")
	(set-goal gl-forward-tower 1)
	(up-build place-forward 1 c: watch-tower)
	(disable-self)
	(up-jump-rule 9000)
	(set-goal gl-split-goal 0)
)
#end-if
#end-if
(defrule
	(up-compare-goal gl-forward-tower == 1)
	(building-type-count watch-tower > 0)
	(building-type-count-total palisade-wall < 8)
	(up-pending-objects c: palisade-wall < 1)
	(can-afford-building palisade-wall)
	(unit-type-count dead-f-builder < 1)
	(unit-type-count dead-m-builder < 1)
=>
	(release-escrow wood)
	(up-assign-builders c: wall-class c: 1)
	(set-strategic-number sn-placement-fail-delta 1)
	(set-strategic-number sn-placement-zone-size 1)
	(up-set-placement-data my-player-number watch-tower c: 0) 
	;(chat-to-player my-player-number "Debug: palisade wall tower")
	(up-build place-control 1 c: palisade-wall)
)
(defrule
	(goal gl-forward-tower 1)
	(or(building-type-count-total palisade-wall >= 8)
	   (game-time > 1230)) ;1140
=>
	(set-goal gl-forward-tower 2)
)
; market control
(defrule
	(taunt-detected any-human 40)
	(current-age >= feudal-age)
	(up-compare-goal gl-market-control < 1)
	(up-timer-status 25 != timer-running)
=>
	(chat-to-player every-ally "flare me where you want me to place a market.")
	(chat-to-player every-ally "you have 60 seconds.")
	(set-strategic-number sn-escrow-level save-for-market)
	(set-escrow-percentage wood 100)
	(set-goal gl-market-control 1)
	(enable-timer 25 60)
)
(defrule
	(taunt-detected any-human 40)
	(up-compare-goal gl-market-control == 1)
=>
	(up-get-player-fact this-any-human player-number 0 temporary-goal2)
	(up-modify-goal temporary-goal s:= sn-target-player-number)
	(up-modify-sn sn-target-player-number g:= temporary-goal2)
)
(defrule
	(taunt-detected any-human 40)
	(up-compare-goal gl-market-control == 1)
	(players-unit-type-count target-player flare > 0)
=>
	(set-strategic-number sn-placement-zone-size 3)
	(up-set-placement-data target-player flare c: 1) 
	(up-build place-control 1 c: market)
	(acknowledge-taunt this-any-human 40)
	(set-goal gl-market-control 2)
)
(defrule
	(up-compare-goal gl-market-control == 2)
	(up-pending-objects c: market > 0)
=>
	(set-goal gl-market-control 0)
	(chat-to-allies "1Market going up!")
	(set-escrow-percentage wood 0)
	(set-strategic-number sn-escrow-level 0)
	(release-escrow wood)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(enable-timer 25 1)
)
(defrule
	(up-compare-goal gl-market-control == 2)
	(up-pending-objects c: market < 1)
	(not(can-afford-building market))
=>
	(set-goal gl-market-control 0)
	(chat-to-allies "market placement failed! either no space, no wood, or haven't explored yet.")
	(up-get-fact wood-amount 0 temporary-goal)
	(up-chat-data-to-player every-ally "my wood count is: %d" g: temporary-goal)	
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(enable-timer 25 1)
)
(defrule
	(taunt-detected any-human 40)
	(up-timer-status 25 != timer-running)
	(up-compare-goal gl-market-control > 0)
=>
	(chat-to-allies "didn't recieve any flares, exiting market control.")
	(acknowledge-taunt this-any-human 40) ; was this-any-human
	(set-escrow-percentage wood 0)
	(set-strategic-number sn-escrow-level 0)
	(release-escrow wood)
	(set-goal gl-market-control -1)
)
; task foragers to farms so berries last longer
(defrule
	(true)
=>
	(up-get-fact unit-type-count villager-farmer 1)
	(up-get-fact building-type-count farm 2)
	;(up-chat-data-to-all "total farmers: %d" g: 1)
	;(up-chat-data-to-all "total farms: %d" g: 2)
)
(defrule
	(current-age == dark-age)
	(building-type-count farm > 0)
	(building-type-count-total farm <= 6)
	(unit-type-count villager-forager > 4)
	(up-compare-goal 2 g:> 1)
=>
	(set-goal gl-split-goal 1031)
)
(defrule
	(goal gl-split-goal 1031)
=>
	(set-goal 4 1)
	(up-reset-search 1 1 1 1)
    (up-reset-filters)
	(up-find-local c: villager-forager-m g: 4)
	(up-get-search-state gl-local-total)
	(up-modify-goal 4 g:- gl-local-last)
	(up-find-local c: villager-forager-f g: 4)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number c:= my-player-number)
	(up-find-remote c: farm c: 1)
	(up-target-objects 0 action-default -1 -1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-goal gl-split-goal 0)
)
(defrule
	(building-type-count farm > 6)
=>
	(up-jump-rule 1)
)
(defrule
	(current-age == dark-age)
	(building-type-count farm > 0)
	(idle-farm-count > 0)
	(unit-type-count villager-forager > 1)
	(up-compare-goal 2 g:> 1)
=>
	(set-goal gl-split-goal 1030)
)
(defrule
	(goal gl-split-goal 1030)
=>
	(set-goal 4 1)
	(up-reset-search 1 1 1 1)
    (up-reset-filters)
	(up-find-local c: villager-forager-m g: 4)
	(up-get-search-state gl-local-total)
	(up-modify-goal 4 g:- gl-local-last)
	(up-find-local c: villager-forager-f g: 4)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number c:= my-player-number)
	(up-find-remote c: farm c: 1)
	(up-target-objects 0 action-default -1 -1)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-goal gl-split-goal 0)
)

; for sheep
(defrule
	(cc-players-unit-type-count 0 livestock-class > 0)
	(up-gaia-type-count c: livestock-class g:> gl-sheep-count)
=>
	(up-modify-goal gl-sheep-count c:+ 1)
;	(up-chat-data-to-self "Found sheep: %d" g: gl-sheep-count)
;	(enable-timer 3 5)
)
(defrule
;	(timer-triggered 3)
	(up-gaia-type-count c: livestock-class g:== gl-sheep-count)
=>

	(up-modify-goal gl-sheep-diff g:- gl-sheep-count)
	(up-modify-goal gl-sheep-sum g:- gl-sheep-diff)
	(up-modify-goal gl-sheep-diff g:= gl-sheep-count)
;	(disable-timer 3)
;	(up-chat-data-to-self "total sheep: %d" g: sum-sheep-goal)
)
(defrule
	(up-gaia-type-count c: livestock-class g:< gl-sheep-count)
=>
	(up-modify-goal gl-sheep-count c:- 1)
	(up-modify-goal gl-sheep-sum g:= gl-sheep-count)
)
(defrule
	(game-time >= 25)
=>
	(up-modify-goal gl-half-exploration-time s:= sn-home-exploration-time)
	(up-modify-goal gl-half-exploration-time c:/ 2)
	;(up-chat-data-to-self "If I suck at scouting add this much: %d" g: gl-half-exploration-time)
	(disable-self)
)
(defrule
	(game-time > 30)
	(game-time g:> gl-half-exploration-time)
	(or(up-compare-goal gl-boars-total < 2)
	(or(up-compare-goal gl-sheep-sum < 8)
	   (up-compare-goal gl-berries-left == 0)))
	;(strategic-number sn-home-exploration-time < new-explore-time)
=>
	(up-modify-sn sn-home-exploration-time g:+ gl-half-exploration-time)
	(up-modify-sn sn-home-exploration-time g:+ gl-half-exploration-time)
	;(chat-to-player my-player-number "Haven't found all my resources.")
	;(up-chat-data-to-all "Extend home explore time: %d" s: sn-home-exploration-time)
	(up-reset-unit c: all-units-class)
	(disable-self)
)
(defrule
	(game-time >= 3)
	(not(or(taunt-detected any-enemy 109)
	       (taunt-detected any-ally 109)))
=>
	(chat-to-all "109BruteForce v3.1.11 AI Script By: CheeseOnToast")
	(disable-self)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(true)
=>
	(set-goal position-goal pocket)
)
#else
(defrule
	(true)
=>
	(set-goal position-goal flank)
)
#end-if
(defrule
	(or(taunt-detected any-human 250)
	   (taunt-detected my-player-number 250))
=>
	(chat-to-allies "Hi! I'm BruteForce v3.1 Created by CheeseOnToast")
	(chat-to-allies "I have no idea what I'm doing, what a surprise.")
	(acknowledge-taunt this-any-human 250)
	(acknowledge-taunt my-player-number 250)
)
(defrule
	(up-research-status c: feudal-age >= research-pending)
=>
	(chat-to-allies "I'm up to feudal.")
	(disable-self)
)
(defrule
	(up-research-status c: castle-age >= research-pending)
=>
	(chat-to-allies "I'm up to castle.")
	(disable-self)
)
(defrule
	(up-research-status c: imperial-age >= research-pending)
=>
	(chat-to-allies "I'm up to imperial.")
	(disable-self)
)
; chat that you're okay sling wise
(defrule
	(food-amount > 1000)
	(players-tribute-memory any-human food > 500)
=>
	(clear-tribute-memory this-any-human food)
	(chat-to-allies "I'm good on food now, thanks!")
)
(defrule
	(wood-amount > 1000)
	(players-tribute-memory any-human wood > 500)
=>
	(clear-tribute-memory this-any-human wood)
	(chat-to-allies "I'm good on wood now, thanks!")
)
(defrule
	(gold-amount > 1000)
	(players-tribute-memory any-human gold > 500)
=>
	(clear-tribute-memory this-any-human gold)
	(chat-to-allies "I'm good on gold now, thanks!")
)
(defrule
	(building-type-count-total town-center >= 3)
	(or(unit-type-count-total villager == 0)
	(or(up-research-status c: imperial-age >= research-pending)
	   (up-compare-goal position-goal == pocket)))
	(building-type-count-total castle > 0)
	(taunt-detected any-ally 6)
=>
	(tribute-to-player this-any-ally stone 1000)
	(acknowledge-taunt this-any-ally 6)
)
(defrule
	(or(map-type islands)
	   (map-type team-islands))
	(taunt-detected any-ally 6)
=>
	(tribute-to-player this-any-ally stone 1000)
	(acknowledge-taunt this-any-ally 6)
)
(defrule
	(unit-type-count villager > 0)
	(up-timer-status 8 != timer-running)
	(game-time > 2400)
	(food-amount < 1000)
=>
	(chat-to-allies "3Can i have some food?")
	(enable-timer 8 240)
)
(defrule
	(unit-type-count villager > 0)
	(up-timer-status 8 != timer-running)
	(game-time > 2400)
	(wood-amount < 1000)
=>
	(chat-to-allies "4Can i have some wood?")
	(enable-timer 8 240)
)
(defrule
	(up-timer-status 8 != timer-running)
	(unit-type-count villager > 0)
	(game-time > 2400)
	(gold-amount < 1000)
=>
	(chat-to-allies "5Can i have some gold?")
	(enable-timer 8 240)
)
(defrule
	(up-timer-status 8 != timer-running)
	(building-type-count monastery > 0)
	(unit-type-count villager == 0)
	(game-time > 2400)
	(gold-amount < 1000)
=>
	(chat-to-allies "5Can i have some gold for monks?")
	(enable-timer 8 240)
)
(defrule
	(or(unit-type-count-total villager == 0)
	(or(up-research-status c: imperial-age >= research-pending)
	   (up-compare-goal position-goal == pocket)))
	(population-headroom < 1)
	(housing-headroom < 1)
	(food-amount > 1000)
	(taunt-detected any-ally 3)
	(population > 150)
=>
	(tribute-to-player this-any-ally food 500)
	(acknowledge-taunt this-any-ally 3)
)
(defrule
	(or(unit-type-count-total villager == 0)
	(or(up-research-status c: imperial-age >= research-pending)
	   (up-compare-goal position-goal == pocket)))
	(population-headroom < 1)
	(housing-headroom < 1)
	(wood-amount > 1000)
	(taunt-detected any-ally 4)
	(population > 150)
=>
	(tribute-to-player this-any-ally wood 500)
	(acknowledge-taunt this-any-ally 4)
)
(defrule
	(or(unit-type-count-total villager == 0)
	(or(up-research-status c: imperial-age >= research-pending)
	   (up-compare-goal position-goal == pocket)))
	(population-headroom < 1)
	(housing-headroom < 1)
	(food-amount > 1000)
	(taunt-detected any-ally 5)	
	(population > 150)
=>
	(tribute-to-player this-any-ally gold 500)
	(acknowledge-taunt this-any-ally 5)
)
(defrule
	(or(unit-type-count-total villager == 0)
	(or(up-research-status c: imperial-age >= research-pending)
	   (up-compare-goal position-goal == pocket)))
	(food-amount > 500)
	(taunt-detected any-ally 3)
	(population > 150)
=>
	(tribute-to-player this-any-ally food 125)
	(acknowledge-taunt this-any-ally 3)
)
(defrule
	(or(unit-type-count-total villager == 0)
	(or(up-research-status c: imperial-age >= research-pending)
	   (up-compare-goal position-goal == pocket)))
	(wood-amount > 500)
	(taunt-detected any-ally 4)
	(population > 150)
=>
	(tribute-to-player this-any-ally wood 125)
	(acknowledge-taunt this-any-ally 4)
)
(defrule
	(or(unit-type-count-total villager == 0)
	(or(up-research-status c: imperial-age >= research-pending)
	   (up-compare-goal position-goal == pocket)))
	(gold-amount > 500)
	(taunt-detected any-ally 5)
	(population > 150)
=>
	(tribute-to-player this-any-ally gold 125)
	(acknowledge-taunt this-any-ally 5)
)
(defrule
	(or(unit-type-count-total villager == 0)
	(or(up-research-status c: imperial-age >= research-pending)
	   (up-compare-goal position-goal == pocket)))
	(stone-amount > 500)
	(taunt-detected any-human-ally 6)
	(population > 150)
=>
	(tribute-to-player this-any-ally stone 500)
	(acknowledge-taunt this-any-human-ally 6)
)
(defrule
	(taunt-detected any-ally 99)
=>
	(tribute-to-player this-any-ally wood 275)
	(tribute-to-player this-any-ally stone 100)
	(acknowledge-taunt this-any-ally 99)
)
(defrule
	(goal gl-fast-castle 1)
=>
	(up-assign-builders c: market c: 2)
	(up-assign-builders c: blacksmith c: 2)
	(up-assign-builders c: stable c: 2)
	(disable-self)
)
(defrule
	(goal gl-fast-castle 1)
	(up-research-status c: castle-age >= research-pending)
=>
	(up-assign-builders c: market c: 1)
	(up-assign-builders c: blacksmith c: 1)
	(up-assign-builders c: stable c: 1)
	(disable-self)
)
(defrule
	(game-time > 960)
	;(wood-amount > 190)
	(up-compare-goal gl-berries-left >= 6)
	(building-type-count-total mill < 2)
	(unit-type-count villager-forager > 0)
;	(up-compare-goal gl-strategy != WONDER-FUL)
	;(dropsite-min-distance food > 3)
	(can-build mill)
=>
	(set-goal gl-pause-tsa 1)
	(set-strategic-number sn-preferred-mill-placement mill-style)
	(set-strategic-number sn-dropsite-separation-distance 20)
	(build mill)
	(chat-local-to-self "mill 2")
)
(defrule
	(game-time > 690)
;	(or(up-compare-goal gl-map-style == CLOSED)
;	   (up-compare-goal gl-map-style == ARENA))
	(up-compare-goal 86 < 1)
	(building-type-count-total mill < 2)
	(dropsite-min-distance deer-hunting > 10)
	(dropsite-min-distance deer-hunting s:< sn-maximum-hunt-drop-distance)
	(up-compare-goal gl-deer-left > 2) ; 0
	(can-build mill)
=>
	(set-goal gl-pause-tsa 1)
	(set-strategic-number sn-dropsite-separation-distance 20)
	(set-strategic-number sn-preferred-mill-placement 1)
	(build mill)
	(chat-local-to-self "mill 2 (deer)")
)
#load-if-defined SARACEN-CIV
(defrule
	(strategic-number sn-castle-age-strategy == end-game)
=>
	(set-difficulty-parameter ability-to-dodge-missiles 0) ; Maximum dodge
	(set-difficulty-parameter ability-to-maintain-distance 0) ; Maximum fallback
	(disable-self)
)
#end-if
#load-if-defined BRITON-CIV
(defrule
	(up-research-status c: ri-crossbow >= research-pending)
=>
	(set-difficulty-parameter ability-to-dodge-missiles 0) ; Maximum dodge
	(set-difficulty-parameter ability-to-maintain-distance 0) ; Maximum fallback
	(disable-self)
)
#end-if
#load-if-defined MAYAN-CIV
#load-if-defined UP-POCKET-POSITION
(defrule
	(up-research-status c: ri-crossbow >= research-pending)
=>
	(set-difficulty-parameter ability-to-dodge-missiles 0) ; Maximum dodge
	(set-difficulty-parameter ability-to-maintain-distance 0) ; Maximum fallback
	(disable-self)
)
#end-if
#end-if
#load-if-defined HUN-CIV
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(up-research-status c: castle-age >= research-pending)
=>
	(set-difficulty-parameter ability-to-dodge-missiles 0) ; Maximum dodge
	(set-difficulty-parameter ability-to-maintain-distance 0) ; Maximum fallback
	(disable-self)
)
#end-if
#end-if
(defrule
	(up-research-status c: castle-age < research-pending)
	(or(players-unit-type-count target-player scout-cavalry-line > 0)
	(or(players-unit-type-count target-player militiaman-line > 0)
	   (players-unit-type-count target-player knight-line > 0)))
=>
	(set-difficulty-parameter ability-to-dodge-missiles 0) ; Maximum dodge
	(set-difficulty-parameter ability-to-maintain-distance 0) ; Maximum fallback
	(disable-self)
)
(defrule
	(unit-type-count-total villager < 1)
	(food-amount < 50)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-local-to-self "buy food to train villagers")
)
(defrule
	(up-compare-goal gl-enable-tsa > 0)
=>
	(set-strategic-number sn-enemy-sighted-response-distance 50)
	(set-strategic-number sn-percent-enemy-sighted-response 100)
)
(defrule
	(up-compare-goal gl-enable-tsa < 1)
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-percent-enemy-sighted-response 0)
)
;(defrule
;	(goal gl-tsa-duc 1)
;	(players-building-type-count target-player town-center == 0)
;=>
;	(set-goal gl-tsa-duc 0) ; dummy pass
;)
(defrule
	(goal gl-tsa-duc 1)
	(up-timer-status 14 != timer-running)
	(strategic-number sn-military-level > 0)
	(players-building-count target-player > 0) ;(players-building-type-count target-player town-center > 0)
	(players-stance target-player enemy)
	(strategic-number sn-garrison-units-in-buildings != 1)
=>
	(up-reset-filters)
	(up-reset-search 1 1 1 1);resets found objects each pass
	(up-find-remote c: all-units-class c: 1) ; town-center
	(up-get-search-state gl-local-total)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-position-enemy-x)
	(up-filter-exclude -1 actionid-attack orderid-explore -1)
	(up-filter-include 4 -1 -1 -1)
	(set-goal gl-split-goal 1001)
	(set-goal gl-tsa-duc 0)
)
(defrule
	(goal gl-split-goal 1001)
	(up-timer-status 14 != timer-running)
	(up-compare-goal gl-remote-total > 0)
	(players-building-type-count focus-player watch-tower < 1)
	(up-compare-goal gl-enemy-strategy != fast-castle)
=>
	(up-find-local c: all-units-class c: 240)
	(up-target-objects 0 action-patrol -1 stance-aggressive) ; action-patrol ; stance-aggressive
	;(up-send-flare gl-position-enemy-x)
	(enable-timer 14 10) ; 20
	(set-goal gl-split-goal 0)
	(set-goal gl-tsa-duc 1)
)
(defrule
	(goal gl-split-goal 1001)
	(or(up-timer-status 14 == timer-running)
	   (up-compare-goal gl-remote-total == 0))
=>
	(set-goal gl-split-goal 0)
	(chat-local-to-self "TSA DUC: No target - Skipping patrol attack.")
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(town-under-attack)
	(up-compare-goal gl-threat-source == scout-class)
	(unit-type-count-total spearman-line < 4)
	(can-train spearman-line)
	(nor(strategic-number sn-escrow-level == ri-wheel-barrow)
	(nor(strategic-number sn-escrow-level == wheel-barrow-2)
	    (strategic-number sn-escrow-level == ri-fletching)))
=>
	(train spearman-line)
)
#else
(defrule
	(current-age == feudal-age)
	(or(players-unit-type-count focus-player scout-cavalry-line > 1)
	   (players-unit-type-count focus-player stable > 0))
	(unit-type-count-total spearman-line < 4)
	(can-train spearman-line)
	(nor(strategic-number sn-escrow-level == ri-wheel-barrow)
	(nor(strategic-number sn-escrow-level == wheel-barrow-2)
	    (strategic-number sn-escrow-level == ri-fletching)))
=>
	(train spearman-line)
)
(defrule
	(current-age == feudal-age)
	(or(players-unit-type-count focus-player knight > 1)
	   (and(players-unit-type-count focus-player stable > 0)
	       (up-compare-goal gl-enemy-strategy == fast-castle)))
	(unit-type-count-total spearman-line < 8)
	(can-train spearman-line)
	(nor(strategic-number sn-escrow-level == ri-wheel-barrow)
	(nor(strategic-number sn-escrow-level == wheel-barrow-2)
	    (strategic-number sn-escrow-level == ri-fletching)))
=>
	(train spearman-line)
)
#end-if
(defrule
	(current-age >= feudal-age)
	(up-timer-status 9 != timer-running)
	(up-timer-status 10 != timer-running)
	(up-compare-goal gl-enable-tsa < 1)
	(not(town-under-attack))
	(up-compare-goal gl-threat-time > 3000)
	(up-compare-goal gl-retreat-reset < 1)
	(up-compare-goal gl-retreating-phase != 1)
	(strategic-number sn-allow-direct-unit-control != 1)
=>
	(up-set-attack-stance all-units-class c: stance-stand-ground)
	(up-retreat-to town-center c: all-units-class)
	(set-goal gl-retreating-phase 1)
	(enable-timer 9 20)
	(enable-timer 10 10)
)
(defrule
	(current-age >= feudal-age)
	(up-timer-status 10 != timer-running)
	(goal gl-retreating-phase 1)
=>
	(up-set-attack-stance all-units-class c: stance-aggressive)
	(set-goal gl-retreating-phase 0)
	(enable-timer 10 10)
)
(defrule
	(or(not(goal gl-fast-castle 1))
	   (goal 86 -2))
	(game-time s:< sn-home-exploration-time)
	(up-research-status c: feudal-age >= research-pending)
=>
	(chat-local-to-self "Stop scouting home and look for enemy.")
	(set-strategic-number sn-home-exploration-time 0)
	(enable-timer 3 1)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(current-age >= castle-age)
	(strategic-number sn-castle-age-strategy != klew)
	(strategic-number sn-escrow-level == 0)
	(building-type-count-total town-center < 3)
	(not(can-afford-building town-center))
	(building-type-count-total farm >= 14)
=>
	(set-escrow-percentage wood 100)
	(set-escrow-percentage stone 100)
	(set-strategic-number sn-escrow-level town-center)
	(chat-local-to-self "escrow for town center")
)
(defrule
	(current-age >= castle-age)
	(strategic-number sn-castle-age-strategy != klew)
	(strategic-number sn-escrow-level == town-center)
	(or(building-type-count-total town-center >= 3)
	   (building-type-count-total farm < 14))
=>
	(set-escrow-percentage wood 0)
	(set-escrow-percentage stone 0)
	(release-escrow wood)
	(release-escrow stone)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrow for town center")
)
#else
(defrule
	(current-age >= castle-age)
	(strategic-number sn-castle-age-strategy != klew)
	(strategic-number sn-escrow-level == 0)
	(building-type-count-total town-center < 3)
	;(up-compare-goal gl-data-military-population g:>= gl-data-enemy-civilian-population)
	(up-compare-goal gl-data-civilian-population g:< gl-data-enemy-civilian-population)
	(not(can-afford-building town-center))
	(building-type-count-total farm >= 14)
=>
	(set-escrow-percentage wood 100)
	(set-escrow-percentage stone 100)
	(set-strategic-number sn-escrow-level town-center)
	(chat-local-to-self "escrow for town center")
)
(defrule
	(current-age >= castle-age)
	(strategic-number sn-castle-age-strategy != klew)
	(strategic-number sn-escrow-level == town-center)
	(or(building-type-count-total farm < 14)
	(or(building-type-count-total town-center >= 3)
	   (up-compare-goal gl-data-civilian-population g:> gl-data-enemy-civilian-population)));(up-compare-goal gl-data-military-population g:< gl-data-enemy-civilian-population)
=>
	(set-escrow-percentage wood 0)
	(set-escrow-percentage stone 0)
	(release-escrow wood)
	(release-escrow stone)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrow for town center")
)
#end-if
(defrule
	(strategic-number sn-escrow-level == town-center)
	(strategic-number sn-castle-age-strategy != klew)
	(building-type-count-total town-center < 3)
	(can-build-with-escrow town-center)
	(strategic-number sn-castle-age-strategy != RUN)
=>	
	(release-escrow wood)
	(release-escrow stone)
	(up-assign-builders c: town-center-foundation c: 4)
	(set-goal gl-pause-tsa 1)
	(up-modify-goal temporary-goal3 s:= sn-camp-max-distance)
	(up-modify-sn sn-camp-max-distance g:= gl-new-town-size)
	(build town-center)
	(up-modify-sn sn-camp-max-distance g:= temporary-goal3)
	(chat-local-to-self "build escrow town center")
)


(defrule
	(strategic-number sn-escrow-level == 0)
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(up-research-status c: ri-hand-cart < research-pending)
	(up-research-status c: ri-chain-barding == research-complete)
	(strategic-number sn-castle-age-strategy == krush)
	(building-type-count-total town-center >= 3)
	(building-type-count-total farm >= 28)
	(unit-type-count villager >= 60)
	(not(can-afford-research ri-hand-cart))
=>
	(set-escrow-percentage food 100)
	(set-escrow-percentage wood 100)
	(set-strategic-number sn-escrow-level ri-hand-cart)
	(chat-local-to-self "escrowing for hand cart (krush)")
)
(defrule
	(strategic-number sn-escrow-level == ri-hand-cart)
	(or(up-research-status c: ri-hand-cart >= research-pending)
	(or(unit-type-count villager < 60)
	(or(building-type-count-total town-center < 3)
	   (building-type-count-total farm < 28))))	
	(strategic-number sn-castle-age-strategy == krush)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(release-escrow food)
	(release-escrow wood)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for hand cart (krush)")
)

(defrule
	(strategic-number sn-escrow-level == 0)
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(up-research-status c: ri-hand-cart < research-pending)
	(up-research-status c: ri-chain-mail == research-complete)
	(strategic-number sn-castle-age-strategy == eagle-rush)
	(building-type-count-total town-center >= 3)
	(building-type-count-total farm >= 28)
	(unit-type-count villager >= 60)
	(not(can-afford-research ri-hand-cart))
=>
	(set-escrow-percentage food 100)
	(set-escrow-percentage wood 100)
	(set-strategic-number sn-escrow-level ri-hand-cart)
	(chat-local-to-self "escrowing for hand cart (eagle)")
)
(defrule
	(strategic-number sn-escrow-level == ri-hand-cart)
	(or(up-research-status c: ri-hand-cart >= research-pending)
	(or(unit-type-count villager < 60)
	(or(building-type-count-total town-center < 3)
	   (building-type-count-total farm < 28))))	
	(strategic-number sn-castle-age-strategy == eagle-rush)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(release-escrow food)
	(release-escrow wood)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for hand cart (eagle)")
)

(defrule
	(strategic-number sn-escrow-level == 0)
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(up-research-status c: ri-hand-cart < research-pending)
	(up-research-status c: ri-bodkin-arrow == research-complete)
	(strategic-number sn-castle-age-strategy == xbow)
	(building-type-count-total town-center >= 3)
	(building-type-count-total farm >= 28)
	(unit-type-count villager >= 60)
	(not(can-afford-research ri-hand-cart))
=>
	(set-escrow-percentage food 100)
	(set-escrow-percentage wood 100)
	(set-strategic-number sn-escrow-level ri-hand-cart)
	(chat-local-to-self "escrowing for hand cart (xbow)")
)
(defrule
	(strategic-number sn-escrow-level == ri-hand-cart)
	(or(up-research-status c: ri-hand-cart >= research-pending)
	(or(unit-type-count villager < 60)
	(or(building-type-count-total town-center < 3)
	   (building-type-count-total farm < 28))))	
	(strategic-number sn-castle-age-strategy == xbow)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(release-escrow food)
	(release-escrow wood)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for hand cart (xbow)")
)

(defrule
	(strategic-number sn-escrow-level == ri-hand-cart)
	(can-research-with-escrow ri-hand-cart)
=>
	(release-escrow food)
	(release-escrow wood)
	(research ri-hand-cart)
	(chat-local-to-self "researching hand cart with escrow")
)

(defrule
	(up-compare-goal gl-old-deer != -1)
	(dropsite-min-distance live-boar > 20)
	(up-set-target-by-id g: gl-old-deer)
	(up-object-data object-data-carry > 35)
	(up-object-data object-data-status > 2)
	(up-timer-status 11 != timer-running)
	(up-compare-goal gl-deer-lure-hunters > 2)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-get-point position-self 87)
	(up-set-target-point 87)
	(up-filter-distance c: -1 c: 15) ; was 10
	(up-find-local c: villager-class c: 2)
	(up-set-target-by-id g: gl-old-deer)
	(up-target-objects 1 action-default -1 -1)
	;(chat-local-to-self "old deer worth eating")
	(enable-timer 11 60) ;25
)
(defrule
	(up-compare-goal gl-old-deer != -1)
	(dropsite-min-distance live-boar > 20)
	(up-set-target-by-id g: gl-old-deer)
	(up-object-data object-data-carry > 35)
	(up-object-data object-data-status > 2)
	(up-timer-status 11 != timer-running)
	(up-compare-goal gl-deer-lure-hunters == 2)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-get-point position-self 87)
	(up-set-target-point 87)
	(up-filter-distance c: -1 c: 15) ; was 10
	(up-find-local c: villager-class c: 1)
	(up-set-target-by-id g: gl-old-deer)
	(up-target-objects 1 action-default -1 -1)
	;(chat-local-to-self "old deer worth eating 2")
	(enable-timer 11 60) ;25
)

(defrule
	(strategic-number sn-escrow-level == 0)
	(up-research-status c: ri-wheel-barrow < research-pending)
	(building-type-count town-center > 1)
	(or(building-type-count-total farm >= 14)
	   (food-amount > 100))
	(not(can-afford-research ri-wheel-barrow))
=>
	(set-escrow-percentage food 100)
	(set-escrow-percentage wood 100)
	(set-strategic-number sn-escrow-level ri-wheel-barrow)
	(chat-local-to-self "escrowing for wheel barrow")
)
(defrule
	(strategic-number sn-escrow-level == ri-wheel-barrow)
	(or(and(building-type-count-total farm < 14)
	       (food-amount < 100))
	(or(up-research-status c: ri-wheel-barrow >= research-pending)
	   (building-type-count town-center <= 1)))
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(release-escrow food)
	(release-escrow wood)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for wheel barrow")
)
(defrule
	(strategic-number sn-escrow-level == ri-wheel-barrow)
	(can-research-with-escrow ri-wheel-barrow)
=>
	(release-escrow wood)
	(release-escrow food)
	(research ri-wheel-barrow)
	(chat-local-to-self "researching wheel barrow with escrow")
)

; 

(defrule
	(strategic-number sn-escrow-level == 0)
	(not(goal gl-fast-castle 1))
	(up-research-status c: ri-wheel-barrow < research-pending)
	(game-time > 930)
	(building-type-count-total farm >= 14)
	(not(can-afford-research ri-wheel-barrow))
=>
	(set-escrow-percentage food 75)
	(set-escrow-percentage wood 30)
	(set-strategic-number sn-escrow-level flank-wheel-barrow)
	(chat-local-to-self "escrowing for wheel barrow (flank)")
)
(defrule
	(strategic-number sn-escrow-level == flank-wheel-barrow)
	(or(building-type-count-total farm < 14)
	   (up-research-status c: ri-wheel-barrow >= research-pending))
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(release-escrow food)
	(release-escrow wood)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for wheel barrow")
)
(defrule
	(strategic-number sn-escrow-level == flank-wheel-barrow)
	(can-research-with-escrow ri-wheel-barrow)
=>
	(release-escrow wood)
	(release-escrow food)
	(research ri-wheel-barrow)
	(chat-local-to-self "researching wheel barrow with escrow")
)

(defrule
	(strategic-number sn-escrow-level > 0)
	(housing-headroom < 7)
	(up-pending-objects c: house < 2)
	(can-build-with-escrow house)
=>
	(release-escrow wood)
	(build house)
	(chat-local-to-self "building house with escrow")
)
(defrule
	(current-age < castle-age)
	(unit-type-count-total battering-ram-line == 0)
	(unit-type-count-total trebuchet-set == 0)
	(players-building-type-count target-player watch-tower > 0)
	(strategic-number sn-disable-tower-priority != 1)
=>
	(set-strategic-number sn-disable-tower-priority 1)
	(up-set-defense-priority c: watch-tower c: -1)
	(chat-local-to-self "disabling tower priority")
)
(defrule
	(current-age >= castle-age)
	(or(unit-type-count-total battering-ram-line > 0)
	(or(unit-type-count-total trebuchet-set > 0)
	   (players-building-type-count every-enemy watch-tower == 0)))
	(strategic-number sn-disable-tower-priority == 1)
=>
	(set-strategic-number sn-disable-tower-priority 0)
	(up-reset-target-priorities priority-defense 0)
	(chat-local-to-self "resetting defense priorities")
)

(defrule
	(food-amount >= 200)
	(or(building-type-count-total stable >= 2)
	   (building-type-count-total archery-range >= 2))
	(building-type-count-total blacksmith == 0)
	(strategic-number sn-escrow-level == 0)
	(building-type-count-total farm >= 14)
	(not(can-afford-building blacksmith))
=>
	(set-escrow-percentage wood 75)
	(set-strategic-number sn-escrow-level blacksmith)
	(chat-local-to-self "escrowing for blacksmith")
)
(defrule
	(or(food-amount < 200)
	(or(building-type-count-total farm < 14)
	(or(and(building-type-count-total stable < 2)
           (building-type-count-total archery-range < 2))
	   (building-type-count-total blacksmith > 0))))
	(strategic-number sn-escrow-level == blacksmith)
=>
	(set-escrow-percentage wood 0)
	(release-escrow wood)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for blacksmith")
)
(defrule
	(strategic-number sn-escrow-level == blacksmith)
	(can-build-with-escrow blacksmith)
=>
	(release-escrow wood)
	(build blacksmith)
	(chat-local-to-self "building blacksmith with escrow")
)

(defrule
	(strategic-number sn-escrow-level == 0)
	(building-type-count-total blacksmith > 0)
	(up-research-status c: castle-age < research-pending)
	(game-time > 1110)
	(research-available castle-age)
	(not(can-afford-research castle-age))
=>
	(set-escrow-percentage food 20)
	(set-escrow-percentage gold 10)
	(set-strategic-number sn-escrow-level castle-age)
	(chat-local-to-self "escrowing for castle age")
)
(defrule
	(strategic-number sn-escrow-level == castle-age)
	(or(building-type-count-total blacksmith == 0)
	(or(up-research-status c: castle-age >= research-pending)
	   (not(research-available castle-age))))
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrow for castle age")
)
(defrule
	(strategic-number sn-escrow-level == castle-age)
	(can-research-with-escrow castle-age)
=>
	(release-escrow food)
	(release-escrow gold)
	(research castle-age)
	(set-goal gl-enable-tsa 0)
	(chat-local-to-self "researching castle age with escrow")
)

(defrule
	(up-timer-status 12 != timer-running)
	(goal gl-fast-castle 1)
	(or(unit-type-count 229 > 0)
	   (unit-type-count 221 > 0)) ; dead miners
	(up-pending-objects c: mining-camp < 1)
	(can-build mining-camp)
=>
	(up-modify-sn sn-camp-max-distance c:+ 3)
	(set-strategic-number sn-maximum-stone-drop-distance 254)
	(build mining-camp)
	(enable-timer 12 300)
)
(defrule
	(up-timer-status 13 != timer-running)
	(current-age < castle-age)
	(or(unit-type-count 229 > 0)
	   (unit-type-count 221 > 0)) ; dead miners
	(up-pending-objects c: mining-camp < 1)
	(can-build mining-camp)
=>
	(up-modify-sn sn-camp-max-distance c:+ 3)
	(build mining-camp)
	(enable-timer 13 300)
)
(defrule
	(up-timer-status 13 != timer-running)
	(current-age >= castle-age)
	(or(building-type-count-total town-center >= 3)
	   (unit-type-count-total villager < 40))
	(or(unit-type-count 229 > 0)
	   (unit-type-count 221 > 0)) ; dead miners
	(up-pending-objects c: mining-camp < 1)
	(can-build mining-camp)
=>
	(up-modify-sn sn-camp-max-distance c:+ 3)
	(build mining-camp)
	(enable-timer 13 300)
)
(defrule
	(strategic-number sn-castle-age-strategy != booming)
	(up-compare-goal gl-previous-strategy != booming)
	(strategic-number sn-escrow-level == 0)
	(or(players-building-type-count target-player watch-tower > 0)
	   (players-building-type-count target-player castle > 0))
	(military-population > 15)
	(unit-available battering-ram-line)
	(not(can-afford-unit battering-ram-line))
	(building-type-count-total farm >= 14)
	(building-type-count-total town-center >= 3)
	(strategic-number sn-military-level > 0)
	(unit-type-count-total battering-ram-line < 3)
	(housing-headroom > 5)
=>
	(set-goal gl-split-goal 1110)
)
(defrule
	(goal gl-split-goal 1110)
=>
	(set-escrow-percentage wood 75)
	(set-escrow-percentage gold 75)
	(set-strategic-number sn-escrow-level battering-ram)
	(chat-local-to-self "escrowing for battering-ram")
	(set-goal gl-split-goal 0)
)
(defrule
	(strategic-number sn-castle-age-strategy != booming)
	(strategic-number sn-escrow-level == battering-ram)
	(or(strategic-number sn-military-level < 1)
	(or(unit-type-count-total battering-ram-line >= 3)
	(or(housing-headroom < 5)
	(or(military-population < 15)
	(or(building-type-count-total siege-workshop == 0)
	(or(building-type-count-total farm < 14)
	   (building-type-count-total town-center < 3)))))))
=>
	(set-goal gl-split-goal 1025)
)
(defrule
	(up-compare-goal gl-previous-strategy != booming)
	(goal gl-split-goal 1025)
=>
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(release-escrow wood)
	(release-escrow gold)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for battering-ram")
	(set-goal gl-split-goal 0)
)
(defrule
	(strategic-number sn-castle-age-strategy != booming)
	(up-compare-goal gl-previous-strategy != booming)
	(strategic-number sn-escrow-level == battering-ram)
	(can-train-with-escrow battering-ram-line)
=>
	(release-escrow wood)
	(release-escrow gold)
	(train battering-ram-line)
	(chat-local-to-self "training battering-ram with escrow")
)

(defrule
	(building-type-count-total castle < 4)
	(can-build castle)
=>
	(set-goal gl-pause-tsa 1)
	(build castle)
)
(defrule
	(building-type-count-total castle >= 4)
	(can-build castle)
=>
	(set-goal gl-pause-tsa 1)
	(build-forward castle)
)

(defrule
	(strategic-number sn-castle-age-strategy != booming)
	(up-compare-goal gl-previous-strategy != booming)
	(strategic-number sn-escrow-level == 0)
	(building-type-count-total siege-workshop == 0)
	(or(players-building-type-count target-player watch-tower > 0)
	   (players-building-type-count target-player castle > 0))
	(not(can-afford-building siege-workshop))
	(building-available siege-workshop)
	(building-type-count-total farm >= 14)
=>
	(set-escrow-percentage wood 75)
	(set-strategic-number sn-escrow-level siege-workshop)
	(chat-local-to-self "escrowing for siege workshop")
)
(defrule
	(strategic-number sn-castle-age-strategy != booming)
	(up-compare-goal gl-previous-strategy != booming)
	(strategic-number sn-escrow-level == siege-workshop)
	(or(building-type-count-total siege-workshop > 0)
	(or(and(players-building-type-count target-player watch-tower == 0)
	       (players-building-type-count target-player castle == 0))
	    (building-type-count-total farm < 14)))
=>
	(set-escrow-percentage wood 0)
	(release-escrow wood)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopped escrow for siege workshop")
)
(defrule
	(strategic-number sn-castle-age-strategy != booming)
	(up-compare-goal gl-previous-strategy != booming)
	(strategic-number sn-escrow-level == siege-workshop)
	(can-build-with-escrow siege-workshop)
=>
	(release-escrow wood)
	(build siege-workshop)
	(chat-local-to-self "building siege workshop with escrow")
)

; anti-sling workshop
(defrule
	(strategic-number sn-castle-age-strategy != booming)
	(up-compare-goal gl-previous-strategy != booming)
	(strategic-number sn-escrow-level == 0)
	(building-type-count-total siege-workshop == 0)
	(or(players-building-type-count target-player watch-tower > 0)
	   (players-building-type-count target-player castle > 0))
	(strategic-number sn-enemy-sling-target-player > 0)
	(not(can-afford-building siege-workshop))
	(building-available siege-workshop)
	(building-type-count-total farm >= 14)
=>
	(set-escrow-percentage wood 75)
	(set-strategic-number sn-escrow-level anti-sling-workshop)
	(chat-local-to-self "escrowing for siege workshop (2)")
)
(defrule
	(strategic-number sn-castle-age-strategy != booming)
	(up-compare-goal gl-previous-strategy != booming)
	(strategic-number sn-escrow-level == anti-sling-workshop)
	(or(building-type-count-total siege-workshop > 0)
	(or(strategic-number sn-enemy-sling-target-player == 0)
	(or(and(players-building-type-count target-player watch-tower == 0)
	       (players-building-type-count target-player castle == 0))
	    (building-type-count-total farm < 14))))
=>
	(set-escrow-percentage wood 0)
	(release-escrow wood)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopped escrow for siege workshop (2)")
)
(defrule
	(strategic-number sn-castle-age-strategy != booming)
	(up-compare-goal gl-previous-strategy != booming)
	(strategic-number sn-escrow-level == anti-sling-workshop)
	(can-build-with-escrow siege-workshop)
=>
	(release-escrow wood)
	(build siege-workshop)
	(chat-local-to-self "building siege workshop with escrow (2)")
)

(defrule
	(population >= 170)
	(current-age >= castle-age)
	(military-population > 20)
=>
	(delete-building stone-wall-line)
	(delete-building stone-wall)
	(delete-building fortified-wall)
	(delete-building palisade-wall)
	(delete-building 659)
	(delete-building 88)
	(delete-building 667)
	(delete-building 64)
)
(defrule
	;(game-time >= 2880)
	(or(unit-type-count-total trade-cart > 0)
	   (players-unit-type-count any-ally trade-cart > 0))
=>
	(delete-building stone-wall-line)
	(delete-building stone-wall)
	(delete-building fortified-wall)
	(delete-building palisade-wall)
	(delete-building 659)
	(delete-building 88)
	(delete-building 667)
	(delete-building 64)
)

(defrule
	(or(building-type-count-total stone-wall-line > 0)
	   (building-type-count-total palisade-wall > 0))
	(current-age == castle-age)
	(population-headroom > 0)
	(up-pending-objects c: house < 1)
	(can-build house)
=>
	(build house)
)

(defrule
	(building-type-count-total lumber-camp > 0)
=>
	(up-modify-sn sn-camp-max-distance c:+ 10)
	(disable-self)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	
	(unit-type-count villager < 11)
=>
	(set-strategic-number sn-enable-training-queue 1)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	
	(unit-type-count villager >= 11)
	(up-research-status c: ri-loom < research-pending)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	
	(unit-type-count villager >= 11)
	(food-amount <= 410)
	(unit-type-count-total villager < 24)
	(up-research-status c: ri-loom >= research-pending)
=>
	(set-strategic-number sn-enable-training-queue 1)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	
	(unit-type-count-total villager >= 19)
	(or(food-amount >= 411)
	   (unit-type-count-total villager >= 24))
=>
	(set-strategic-number sn-enable-training-queue 0)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(current-age >= feudal-age)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(unit-type-count-total villager < max-civ)
	(up-research-status c: ri-loom < research-pending)
	(unit-type-count villager < 10)
	(can-train villager)
=>
	(train villager)
	(enable-timer 46 21)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(or(food-amount >= 500)
	(or(unit-type-count-total villager >= 24)
	   (game-time > 560)))
	(can-research feudal-age)
=>
	(research feudal-age)
)
(defrule
	(up-compare-goal gl-map-style != WATER)	
	(or(food-amount < 50)
	   (and(civ-selected mayan)(housing-headroom == 0)))
	(not(can-train villager))
	(can-research ri-loom)
=>
	(research ri-loom)
)
(defrule
	(up-compare-goal gl-map-style != WATER)	
	(unit-type-count-total villager >= 10)
	(can-research ri-loom)
=>
	(research ri-loom)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(unit-type-count-total villager < max-civ)
	(up-research-status c: ri-loom >= research-pending)
;	(up-compare-goal gl-total-lured-deer < 1)
	(food-amount < 450)
	(unit-type-count villager < 24)
	(can-train villager)
=>
	(train villager)
	(enable-timer 46 21)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(unit-type-count-total villager < max-civ)
	(food-amount < 450)
	(up-research-status c: ri-loom >= research-pending)
	(unit-type-count-total villager < 24) ; (unit-type-count-total villager < 24) ; (unit-type-count-total villager < 26)
	(can-train villager)
=>
	(train villager)
	(enable-timer 46 21)
)
(defrule
	(up-compare-goal gl-map-style != WATER)	
	(up-research-status c: feudal-age >= research-pending)
	(building-type-count-total barracks == 0)
	(not(goal gl-fast-castle 1))
	(can-build barracks)
=>
	(set-goal gl-pause-tsa 1)
	(set-strategic-number sn-placement-zone-size 1)
	(up-set-placement-data my-player-number -1 g: gl-new-town-size) 
	;(up-build place-control 1 c: barracks)
	(build barracks)
)
(defrule
	(up-compare-goal gl-map-style != WATER)	
	(up-research-status c: feudal-age >= research-pending)
	(building-type-count-total barracks == 0)
	(not(goal gl-fast-castle 1))
	(can-build barracks)
=>
	(set-goal gl-pause-tsa 1)
	(set-strategic-number sn-placement-zone-size 1)
	(up-set-placement-data my-player-number -1 c: -10) 
	;(up-build place-control 1 c: barracks)
	(build barracks)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(game-time > 300)
	(game-time > 50)
	(or(housing-headroom > 4)
	   (up-pending-objects c: house >= 1))
	(unit-type-count livestock-class < 1)
	(or(unit-type-count 120 > 0) ; male forager
	   (unit-type-count 354 > 0)) ; female forager 
	(building-type-count-total mill == 0)
	(can-build mill)
	(or(unit-type-count-total villager > 8)
	   (unit-type-count villager-forager > 0))
=>
	(build mill)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(game-time > 300)
	(or(housing-headroom > 3)
	   (up-pending-objects c: house >= 1))
	(or(building-type-count-total lumber-camp > 0)
	   (and(unit-type-count livestock-class < 1)
	       (unit-type-count villager >= 10)))
	(building-type-count-total mill == 0)
	(can-build mill)
	(or(unit-type-count-total villager > 8)
	   (unit-type-count villager-forager > 0))
=>
	(build mill)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(game-time > 300)
	(or(housing-headroom > 3)
	   (up-pending-objects c: house >= 1))
	(game-time > 30)
	(or(unit-type-count 120 > 0)
	   (unit-type-count 354 > 0))
	(unit-type-count livestock-class < 2)
	(building-type-count-total mill == 0)
	(can-build mill)
	(or(unit-type-count-total villager > 8)
	   (unit-type-count villager-forager > 0))
=>
	(build mill)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(game-time > 300)
	(or(housing-headroom > 3)
	   (up-pending-objects c: house >= 1))
	(game-time > 30)
	(or(unit-type-count 592 > 3)
	   (unit-type-count 590 > 3))
	(unit-type-count livestock-class <= 2)
	(building-type-count-total mill == 0)
	(can-build mill)
	(or(unit-type-count-total villager > 8)
	   (unit-type-count villager-forager > 0))
=>
	(build mill)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(game-time > 300)
	(unit-type-count villager > 7)
	(or(unit-type-count livestock-class > 1)
	   (building-type-count-total mill >= 1))
	(building-type-count-total lumber-camp == 0)
	(housing-headroom > 4)
	(can-build lumber-camp)
	(resource-found wood)
=>
	(build lumber-camp)
	(up-modify-sn sn-camp-max-distance c:+ 1)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(game-time > 300)
	;(up-research-status c: feudal-age >= research-pending)
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp == 1)
	(can-build lumber-camp)
	(unit-type-count-total villager > 19)
	(or(unit-type-count 123 > 3)
	   (unit-type-count 218 > 3))
	;(dropsite-min-distance wood > 2)
	(resource-found wood)
=>
	(build lumber-camp)
	(up-modify-sn sn-camp-max-distance c:+ 1)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(game-time > 300)
	(not(resource-found gold))
	(building-type-count-total mining-camp == 0)
	(up-research-status c: feudal-age >= research-pending)
	(strategic-number sn-camp-max-distance < 32)
	(can-build mining-camp)
=>
	(up-modify-sn sn-camp-max-distance c:+ 1)
	(up-chat-data-to-all "No gold within range, increase distance: %d" s: sn-camp-max-distance)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(unit-type-count-total villager-gold > 0)
	(current-age == feudal-age)
	(game-time > 1080)
	(dropsite-min-distance gold > 3)
	(building-type-count-total mining-camp < 2)
	(can-build mining-camp)
	(resource-found gold)
=>
	(set-goal gl-pause-tsa 1)
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
	(up-modify-sn sn-camp-max-distance c:+ 1)
)
(defrule
	(up-compare-goal gl-map-style != WATER)
	(strategic-number sn-enable-boar-hunting == 1)
	(up-research-status c: feudal-age < research-pending)
	(food-amount < 250)
	(game-time > 220)
	(unit-type-count villager-forager > 4)
	(idle-farm-count < 1)
	(up-pending-objects c: farm < 1)
	(building-type-count lumber-camp > 0)
	(or(housing-headroom > 3)
	   (up-pending-objects c: house >= 1))	
	(can-build farm)
	(goal 86 -2)
=>
	(build farm)
	(chat-local-to-self "Farm 1")
)

(defrule
	(game-time > 615)
	(not(goal gl-fast-castle 1))
	(building-type-count barracks == 0)
=>
	(up-assign-builders c: barracks c: 3)
	(disable-self)
)
(defrule
	(game-time > 745)
	(not(goal gl-fast-castle 1))
	(building-type-count barracks == 0)
=>
	(up-assign-builders c: barracks c: 3)
	(disable-self)
)
(defrule
	(building-type-count barracks > 0)
=>
	(up-assign-builders c: barracks c: 1)
	(disable-self)
)

(defrule
	(up-compare-goal gl-split-goal > 0)
=>
	(up-chat-data-to-self "!!! Warning: split goal is still switched on: %d" g: gl-split-goal)
)
;(defrule
;	(strategic-number sn-enable-boar-hunting == 1)
;	(strategic-number sn-minimum-number-hunters > 0)
;=>
;	(up-chat-data-to-self "!!! Warning: sn-minimum-number-hunters is larger than 0: %d" s: sn-minimum-number-hunters)
;)
(defrule
	(current-age == feudal-age)
	(strategic-number sn-enable-boar-hunting == 2)
=>
	(chat-local-to-self "!!! Warning: Boar luring is ENABLED")
)
;(defrule
;	(game-time s:> sn-home-exploration-time)
;	(or(up-compare-goal gl-new-target-player > 8)
;	   (up-compare-goal gl-new-target-player < 1))
;=>
;	;(up-chat-data-to-self "!!! Warning: gl-new-target-player is not at threshold: %d" g: gl-new-target-player)
;)
;(defrule
;	(up-compare-goal 86 > 0)
;=>
;	(up-chat-data-to-self "!!! Warning: deer-luring goal is on: %d" g: 86)
;)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(not(goal gl-fast-castle 1))
	(strategic-number sn-enemy-sling-target-player > 0)
	(strategic-number sn-escrow-level == 0)
	(research-available castle-age)
=>
	(set-escrow-percentage food 100)
	(set-strategic-number sn-escrow-level anti-sling-feudal-escrow)
	(chat-local-to-self "escrowing for castle age (anti-sling)")
)
(defrule
	(not(goal gl-fast-castle 1))
	(strategic-number sn-escrow-level == anti-sling-feudal-escrow)
	(or(up-research-status c: castle-age >= research-pending)
	   (strategic-number sn-enemy-sling-target-player == 0))
=>
	(set-escrow-percentage food 0)
	(release-escrow food)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrow for castle age (anti-sling)")
)
(defrule
	(not(goal gl-fast-castle 1))
	(strategic-number sn-escrow-level == anti-sling-feudal-escrow)
	(food-amount < 650)
	(can-train-with-escrow villager)
=>
	(release-escrow food)
	(train villager)
	(enable-timer 46 21)
)
(defrule
	(not(goal gl-fast-castle 1))
	(strategic-number sn-escrow-level == anti-sling-feudal-escrow)
	(can-research-with-escrow castle-age)
=>
	(release-escrow food)
	(set-goal gl-enable-tsa 0)
	(research castle-age)
)
#end-if

(defrule
	(up-timer-status 45 != timer-running)
	(strategic-number sn-escrow-level > 0)
=>
	(set-strategic-number sn-escrow-level 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	(release-escrow food)
	(release-escrow wood)
	(release-escrow gold)
	(release-escrow stone)
	;(chat-local-to-self "!!! Debug: Resetting escrow incase its stuck on for some reason.")
	(enable-timer 45 600)
)
(defrule
	(up-timer-status 44 != timer-running)
	(up-compare-goal gl-enable-tsa > 0)
	(up-compare-goal gl-retreat-reset < 1)
=>
	(up-set-attack-stance all-units-class c: stance-aggressive)
	(enable-timer 44 60)
)
(defrule
	(current-age == imperial-age)
	(or(game-time > 3600)
	   (players-stance any-human ally))
	(food-amount > 1000)
	(can-research ri-town-watch)
=>
	(research ri-town-watch)
)
(defrule
	(current-age == imperial-age)
	(or(game-time > 3600)
	   (players-stance any-human ally))
	(food-amount > 1000)
	(gold-amount > 1000)
	(can-research ri-town-patrol)
=>
	(research ri-town-patrol)
)
(defrule
	(or(unit-type-count 225 >= 3)
	   (unit-type-count 213 >= 3)) ; dead builders
	(strategic-number sn-percent-building-cancellation != 99)
=>
	(set-strategic-number sn-percent-building-cancellation 99)
	(chat-local-to-self "Dead builders detected - PBC to 99")
	(up-assign-builders c: wall-class c: -1)
	(up-assign-builders c: gate-class c: -1)
)
(defrule
	(unit-type-count 225 < 3)
	(unit-type-count 213 < 3)
	(strategic-number sn-percent-building-cancellation != 10)
=>
	(set-strategic-number sn-percent-building-cancellation 10)
	(chat-local-to-self "No more dead builders detected - PBC to 10.")
	(up-assign-builders c: wall-class c: 1)
	(up-assign-builders c: gate-class c: 1)
)

(defrule
	(players-stance target-player enemy)
	(players-current-age target-player == feudal-age)
	(up-compare-goal gl-enemy-strategy == flushing)
	(up-compare-goal gl-flush-type != scrush)
	(players-unit-type-count target-player skirmisher-line > 0)
	(players-unit-type-count target-player spearman-line > 0)
	(up-compare-goal gl-enemy-flush-type < 1)
=>
	(set-goal gl-enemy-flush-type trashf)
	(chat-local-to-self "Being trash flushed.")
)
(defrule
	(players-stance target-player enemy)
	(players-current-age target-player == feudal-age)
	(up-compare-goal gl-enemy-strategy == flushing)
	(players-unit-type-count target-player skirmisher-line > 0)
	(players-unit-type-count target-player spearman-line < 1)
	(players-unit-type-count target-player archer-line == 0)
	(up-compare-goal gl-enemy-flush-type < 1)
=>
	(set-goal gl-enemy-flush-type skirms)
	(chat-local-to-self "Being skirm rushed.")
)
(defrule
	(players-stance target-player enemy)
	(players-current-age target-player == feudal-age)
	(up-compare-goal gl-enemy-strategy == flushing)
	(or(players-unit-type-count target-player skirmisher-line > 0)
	   (players-unit-type-count target-player archer-line > 0))
	(up-compare-goal gl-enemy-flush-type < 1)
=>
	(set-goal gl-enemy-flush-type archers)
	(chat-local-to-self "Being archer rushed.")
)
(defrule
	(players-stance target-player enemy)
	(players-current-age target-player == feudal-age)
	(up-compare-goal gl-enemy-strategy == flushing)
	(or(players-unit-type-count target-player scout-cavalry-line g:> gl-starting-army)
	   (players-building-type-count target-player stable > 0))
	(up-compare-goal gl-enemy-flush-type < 1)
=>
	(set-goal gl-enemy-flush-type scrush)
	(chat-local-to-self "Being scout rushed.")
)
(defrule
	(players-stance target-player enemy)
	(players-current-age target-player == feudal-age)
	(up-compare-goal gl-enemy-strategy == flushing)
	(or(players-unit-type-count target-player galley-line g:> gl-starting-army)
	   (players-unit-type-count target-player fire-galley g:> gl-starting-army))
	(up-compare-goal gl-enemy-flush-type < 1)
=>
	(set-goal gl-enemy-flush-type feudal-navy-agro)
	(chat-local-to-self "Being galley rushed.")
)
(defrule
	(players-stance target-player enemy)
	(players-current-age target-player == feudal-age)
	(up-compare-goal gl-enemy-strategy == flushing)
	(players-unit-type-count target-player militiaman-line > 3)
	(players-unit-type-count target-player skirmisher-line > 0)
	(up-compare-goal gl-enemy-flush-type != maa)
=>
	(set-goal gl-enemy-flush-type maa)
	(chat-local-to-self "Being maa rushed.")	
)
(defrule
	(players-stance target-player enemy)
	(players-current-age target-player == feudal-age)
	(up-compare-goal gl-enemy-strategy == flushing)
	(or(players-unit-type-count target-player militiaman-line > 1)
	   (players-unit-type-count target-player scout-cavalry-line g:> gl-starting-army))
	(players-unit-type-count target-player skirmisher-line > 0)
	(players-unit-type-count target-player archer-line > 0)
	(players-unit-type-count target-player spearman-line > 0)
=>
	(set-goal gl-enemy-flush-type megaflush)
	(chat-local-to-self "Being megaflushed.")	
)

(defrule
	(research-available ri-champion)
	(strategic-number sn-escrow-level == 0)
	(building-type-count-total barracks > 0)
	(unit-type-count-total militiaman-line > 10)
	(up-research-status c: ri-champion < research-pending)
	(military-population > 20)
=>
	(set-escrow-percentage food 75)
	(set-escrow-percentage gold 75)
	(set-strategic-number sn-escrow-level ri-champion)
	(chat-local-to-self "escrowing for champion")
)
(defrule
	(strategic-number sn-escrow-level == ri-champion)
	(or(up-research-status c: ri-champion >= research-pending)
	(or(not(research-available ri-champion))
	(or(military-population < 20)
	(or(building-type-count-total barracks == 0)
	   (unit-type-count-total militiaman-line < 10)))))
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(set-strategic-number sn-escrow-level 0)
	;(chat-local-to-self "stopping escrowing for champion")
)
(defrule
	(strategic-number sn-escrow-level == ri-champion)
	(can-research-with-escrow ri-champion)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-champion)
)
(defrule
	(strategic-number sn-escrow-level == ri-hand-cart)
	(unit-type-count-total villager < 120)
	(up-pending-objects c: villager < 3)
	(wood-amount < 175)
	(can-train-with-escrow villager)
=>
	(release-escrow food)
	(train villager)
	(chat-local-to-self "training villager with ri-hand-cart escrow")
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(current-age == feudal-age)
	(up-compare-goal gl-enable-tsa < 1)
	(building-type-count-total watch-tower < 2)
	(up-compare-goal gl-map-style == OPEN)
	(up-enemy-units-in-town > 5)
	(military-population < 10)
	(up-research-status c: castle-age < research-pending)
	(can-build-with-escrow watch-tower)
=>
	(up-assign-builders c: watch-tower c: 5)
	(set-strategic-number sn-placement-zone-size 1)
	(up-set-placement-data my-player-number -1 c: 1) 
	(chat-to-player my-player-number "Defensive Tower")
	(up-build place-control 1 c: watch-tower)
	(up-jump-rule 9001)
	(disable-self)
)
(defrule
	(current-age == feudal-age)
	(military-population < 10)
	(players-military-population target-player >= 5)
	(building-type-count mining-camp > 0)
	(up-compare-goal gl-map-style == OPEN)
	(up-research-status c: castle-age < research-pending)
	(can-build-with-escrow watch-tower)
=>
	(up-assign-builders c: watch-tower c: 5)
	(set-strategic-number sn-placement-zone-size 1)
	(up-set-placement-data my-player-number -1 c: 10) 
	(chat-to-player my-player-number "Defensive Tower")
	(up-build place-control 1 c: watch-tower)
	(up-jump-rule 9001)
	(disable-self)
)
#end-if
(defrule
	(current-age == feudal-age)
	(up-compare-goal gl-flush-type > 0)
=>
	(up-set-defense-priority c: lumber-camp c: 1000)
	(up-set-defense-priority c: mining-camp c: 1000)
	(up-set-defense-priority c: mill c: 1000)
	(up-set-defense-priority c: town-center c: -1)
	(up-set-defense-priority c: barracks c: -1)
	(up-set-defense-priority c: archery-range c: -1)
	(up-set-defense-priority c: stable c: -1)
	(chat-local-to-self "set flush defense priorities")
	(disable-self)
)
(defrule
	(current-age == castle-age)
	(up-compare-goal gl-flush-type > 0)
=>
	(up-reset-target-priorities priority-defense 0)
	(chat-local-to-self "resetting flush defense priorities")
	(disable-self)
)

(defrule
	(current-age >= feudal-age)
	(building-count g:!= gl-previous-building-count)
	(and(strategic-number sn-military-level < 1)
	    (up-compare-goal gl-enable-tsa < 1))
=>
	(up-get-fact building-count 0 gl-previous-building-count)
	;(up-chat-data-to-all "gl-previous-building-count: %d" g: gl-previous-building-count)
	(up-gather-inside c: barracks c: 1)
	(up-gather-inside c: archery-range c: 1)
	(up-gather-inside c: stable c: 1)
	(up-gather-inside c: siege-workshop c: 1)
	;(up-gather-inside c: monastery c: 1)
	;(chat-local-to-self "garrisoning units inside")
	(set-strategic-number sn-garrison-units-in-buildings 1)
)
(defrule
	(or(up-compare-goal gl-enable-tsa > 0)
	(or(strategic-number sn-military-level > 0)
	   (and(up-enemy-units-in-town g:< gl-data-military-population)
	       (town-under-attack))))
	(strategic-number sn-garrison-units-in-buildings == 1)
=>
	(set-goal gl-split-goal 1700)
)
(defrule
	(goal gl-split-goal 1700)
=>
	(up-gather-inside c: barracks c: 0)
	(up-gather-inside c: archery-range c: 0)
	(up-gather-inside c: stable c: 0)
	(up-gather-inside c: siege-workshop c: 0)
	(up-gather-inside c: monastery c: 0)
	;(chat-local-to-self "ungarrisoning units")
	(up-ungarrison c: barracks)
	(up-ungarrison c: archery-range)
	(up-ungarrison c: stable)
	(up-ungarrison c: siege-workshop)
	;(up-ungarrison c: monastery)
	(set-strategic-number sn-garrison-units-in-buildings 0)	
	(set-goal gl-split-goal 0)
)

(defrule
	(up-compare-goal gl-enable-tsa < 1)
	(up-compare-goal gl-threat-time < 1000)
	(up-compare-goal gl-threat-target == villager-class)
	(up-compare-goal gl-threat-player != 0)
	(up-timer-status 38 != timer-running)
	(military-population > 5)
	(strategic-number sn-garrison-units-in-buildings != 1)
=>
	(set-goal gl-split-goal 4001)
)
(defrule
	(goal gl-split-goal 4001)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= gl-threat-player)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 40)
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-find-remote c: all-units-class c: 1)
	(up-target-objects 0 action-patrol -1 stance-defensive)
	(set-goal gl-threat-target 0)
	(enable-timer 38 12)
	(set-goal gl-split-goal 4050)
)
(defrule
	(goal gl-split-goal 4050)
=>
	(chat-local-to-self "patrol defense.")
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-goal gl-split-goal 0)
)
(defrule
	(or(game-time > 3645)
	   (population < 100))
	(building-type-count-total town-center < 5)
	(up-pending-objects c: town-center < 1)
	(can-build town-center)
=>
	(build town-center)
)
(defrule
	(gold-amount >= 300)
	(military-population < 10)
	(players-unit-type-count any-enemy knight-line > 0)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-enable-boar-hunting == 1)
	(strategic-number sn-minimum-number-hunters < 4)
	(building-type-count-total mill > 0)
	(dropsite-min-distance deer-hunting s:< sn-maximum-hunt-drop-distance)
	(dropsite-min-distance deer-hunting != -1)
=>
	(set-strategic-number sn-minimum-number-hunters 4)
	(chat-local-to-self "Force deer hunting.")
)

(defrule
	(current-age == imperial-age)
	(research-available ri-cavalier)
	(unit-type-count-total knight-line > 5)
	(strategic-number sn-escrow-level == 0)
=>
	(set-escrow-percentage food 100)
	(set-escrow-percentage gold 100)
	(set-strategic-number sn-escrow-level ri-cavalier)
	(chat-local-to-self "escrowing for cavalier")
)
(defrule
	(current-age == imperial-age)
	(or(up-research-status c: ri-cavalier >= research-pending)
	   (unit-type-count-total knight-line < 5))
	(strategic-number sn-escrow-level == ri-cavalier)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for cavalier")
)
(defrule
	(strategic-number sn-escrow-level == ri-cavalier)
	(can-research-with-escrow ri-cavalier)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-cavalier)
)

(defrule
	(current-age == imperial-age)
	(unit-type-count-total spearman-line > 10)
	(research-available ri-halberdier)
	(strategic-number sn-escrow-level == 0)
=>
	(set-escrow-percentage food 50)
	(set-escrow-percentage gold 100)
	(chat-local-to-self "escrowing for halberdier")
	(set-strategic-number sn-escrow-level ri-halberdier)
)
(defrule
	(current-age == imperial-age)
	(or(up-research-status c: ri-halberdier >= research-pending)
	(or(unit-type-count-total spearman-line < 10)
	   (not(research-available ri-halberdier))))
	(strategic-number sn-escrow-level == ri-halberdier)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(chat-local-to-self "stopping escrowing for halberdier")
	(set-strategic-number sn-escrow-level 0)
)
(defrule
	(strategic-number sn-escrow-level == ri-halberdier)
	(can-research-with-escrow ri-halberdier)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-halberdier)
	(chat-local-to-self "researching halb with escrow")
)

	
(defrule
	(current-age == imperial-age)
	(research-available ri-heavy-camel)
	(up-research-status c: ri-heavy-camel < research-pending)
	(unit-type-count-total camel-line > 5)
	(strategic-number sn-escrow-level == 0)
=>
	(set-escrow-percentage food 100)
	(set-escrow-percentage gold 100)
	(set-strategic-number sn-escrow-level ri-heavy-camel)
	(chat-local-to-self "escrowing for heavy camel")
)
(defrule
	(current-age == imperial-age)
	(or(up-research-status c: ri-heavy-camel >= research-pending)
	   (unit-type-count-total camel-line < 5))
	(strategic-number sn-escrow-level == ri-heavy-camel)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for heavy camel")
)
(defrule
	(strategic-number sn-escrow-level == ri-heavy-camel)
	(can-research-with-escrow ri-heavy-camel)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-heavy-camel)
)
(defrule
	(or(up-research-status c: ri-cavalier >= research-pending)
	   (up-research-status c: ri-heavy-camel >= research-pending))
	(research-available ri-plate-barding)
	(up-research-status c: ri-plate-barding < research-pending)
	(strategic-number sn-escrow-level == 0)
=>
	(set-escrow-percentage food 100)
	(set-escrow-percentage gold 100)
	(set-strategic-number sn-escrow-level ri-plate-barding)
	(chat-local-to-self "escrowing for plate-barding")
)
(defrule
	(or(and(up-research-status c: ri-cavalier < research-pending)
	       (up-research-status c: ri-heavy-camel < research-pending))
	   (up-research-status c: ri-plate-barding >= research-pending))
	(strategic-number sn-escrow-level == ri-plate-barding)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for plate-barding")
)
(defrule
	(strategic-number sn-escrow-level == ri-plate-barding)
	(can-research-with-escrow ri-plate-barding)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-plate-barding)
)

(defrule
	(current-age == imperial-age)
	(research-available ri-paladin)
	(unit-type-count-total knight-line > 10)
	(up-research-status c: ri-paladin < research-pending)
	(strategic-number sn-escrow-level == 0)
=>
	(set-escrow-percentage food 100)
	(set-escrow-percentage gold 100)
	(set-strategic-number sn-escrow-level ri-paladin)
	(chat-local-to-self "escrowing for ri-paladin")
)
(defrule
	(current-age == imperial-age)
	(or(up-research-status c: ri-paladin >= research-pending)
	   (unit-type-count-total knight-line < 10))
	(strategic-number sn-escrow-level == ri-paladin)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for ri-paladin")
)
(defrule
	(strategic-number sn-escrow-level == ri-paladin)
	(can-research-with-escrow ri-paladin)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-paladin)
)

#load-if-defined JAPANESE-CIV
(defrule
	(unit-type-count my-unique-unit-line > 10)
	(current-age == imperial-age)
	(research-available my-unique-unit-upgrade)
	(building-type-count-total castle > 0)
	(strategic-number sn-escrow-level == 0)
=>
	(set-escrow-percentage food 80)
	(set-escrow-percentage gold 80)
	(set-strategic-number sn-escrow-level my-unique-unit-upgrade)
	(chat-local-to-self "escrowing for elite samurai")
)
(defrule
	(or(unit-type-count my-unique-unit-line < 10)
	(or(not(research-available my-unique-unit-upgrade))
	(or(building-type-count-total castle == 0)
	   (up-research-status c: my-unique-unit-upgrade >= research-pending))))
	(strategic-number sn-escrow-level == my-unique-unit-upgrade)
=>
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(release-escrow food)
	(release-escrow gold)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for elite samurai")
)
(defrule
	(strategic-number sn-escrow-level == my-unique-unit-upgrade)
	(can-research-with-escrow my-unique-unit-upgrade)
=>
	(release-escrow food)
	(release-escrow gold)
	(research my-unique-unit-upgrade)
)
#end-if

(defrule
	(can-research ri-chemistry)
=>
	(research ri-chemistry)
)
(defrule
	(unit-type-count-total battering-ram-line > 0)
	(can-research ri-capped-ram)
=>
	(research ri-capped-ram)
)
(defrule
	(unit-type-count-total battering-ram-line > 0)
	(can-research ri-siege-ram)
=>
	(research ri-siege-ram)
)
(defrule
	(strategic-number sn-castle-age-strategy == end-game)
	(or(civ-selected korean)
	(or(unit-type-count trebuchet-set > 0)
	   (unit-type-count mangonel-line > 0)))
	(can-research ri-siege-engineers)
=>
	(research ri-siege-engineers)
)
(defrule
	(strategic-number sn-castle-age-strategy == end-game)
	(or(population >= 180)
	   (up-compare-goal sn-archer-threat > 0))
	(unit-type-count-total mangonel-line >= 3)
	(can-research ri-onager)
=>
	(research ri-onager)
)
(defrule
	(strategic-number sn-castle-age-strategy == end-game)
	(or(population >= 180)
	   (up-compare-goal sn-archer-threat > 0))
	(unit-type-count-total mangonel-line >= 3)
	(can-research ri-siege-onager)
=>
	(research ri-siege-onager)
)
(defrule
	(strategic-number sn-castle-age-strategy == end-game)
	(up-compare-goal gl-previous-strategy == xbow)
	(can-research ri-leather-archer-armor)
=>
	(research ri-leather-archer-armor)
)

(defrule
	(strategic-number sn-escrow-level == 0)
	(research-available ri-elite-skirmisher)
	(up-research-status c: ri-elite-skirmisher < research-pending)
	(current-age >= castle-age)
	(unit-type-count-total skirmisher-line > 10)
	(up-compare-goal gl-enemy-strategy != EAGLE-RUSH)
=>
	(set-escrow-percentage wood 50)
	(set-escrow-percentage gold 50)
	(set-strategic-number sn-escrow-level ri-elite-skirmisher)
	(chat-local-to-self "escrowing for elite skirmisher")
)

(defrule
	(strategic-number sn-escrow-level == ri-elite-skirmisher)
	(or(not(research-available ri-elite-skirmisher))
	(or(up-compare-goal gl-enemy-strategy == EAGLE-RUSH)
	(or(up-research-status c: ri-elite-skirmisher >= research-pending)
	   (unit-type-count-total skirmisher-line < 10))))
=>
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(release-escrow wood)
	(release-escrow gold)
	(set-strategic-number sn-escrow-level 0)
	(chat-local-to-self "stopping escrowing for elite skirmisher")
)
(defrule
	(strategic-number sn-escrow-level == ri-elite-skirmisher)
	(can-research-with-escrow ri-elite-skirmisher)
=>
	(release-escrow wood)
	(release-escrow gold)
	(research ri-elite-skirmisher)
)
	
; bully injured villagers
(defrule
	(strategic-number sn-focus-player-number > 0)
	(players-stance focus-player enemy)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: scout-unit c: 1)
	(up-find-remote c: villager-class c: 240)
;	(up-clean-search search-remote -1 search-order-asc)
;	(up-clean-search search-remote object-data-hitpoints search-order-asc)
;	(up-remove-objects search-remote object-data-hitpoints > 14)
	(up-get-search-state gl-local-total)
	(set-goal gl-split-goal 7100)
)
(defrule
	(goal gl-split-goal 7100)
	(military-population g:<= gl-starting-army)
	(up-set-target-object search-local c: 0)
	(up-compare-goal gl-remote-last > 0)
	(up-object-data object-data-hitpoints > 25)
	(up-object-data object-data-action != actionid-attack)
	(up-compare-goal gl-retreat-reset < 1)
	(up-set-target-object search-remote c: 0)
	(up-object-data object-data-hitpoints < 14)
=>
	(up-target-objects 0 action-default -1 -1)
	(chat-local-to-self "Seen injured villager -- Attack it")
	(set-goal gl-split-goal 0)
)
(defrule
	(goal gl-split-goal 7100)
=>
	(set-goal gl-split-goal 0) ; nothing to do here
)

; dodge tower defended camps

(defrule
	(strategic-number sn-military-level > 0)
	(players-stance focus-player enemy)
	(players-building-type-count focus-player watch-tower == 1)
	(unit-type-count-total battering-ram-line == 0)
	(unit-type-count-total mangonel-line == 0)
	(unit-type-count-total trebuchet-set == 0)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-remote c: watch-tower c: 1)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object gl-scary-object-x)
	(set-goal gl-split-goal 8000)
)
(defrule
	(strategic-number sn-military-level > 0)
	(goal gl-split-goal 8000)
	(players-building-type-count focus-player watch-tower == 1)
=>
	(up-filter-exclude -1 actionid-explore orderid-explore -1)
	(up-filter-include 4 -1 -1 -1)
	(up-find-local c: all-units-class c: 240)
	(up-reset-filters)
	(up-set-target-point gl-scary-object-x)
	(up-filter-distance c: 15 c: 60)
	(up-find-remote c: lumber-camp c: 240)
	(up-find-remote c: mining-camp c: 240)
	(up-get-search-state gl-local-total)
	(set-goal gl-split-goal 8001)
)
(defrule
	(strategic-number sn-military-level > 0)
	(goal gl-split-goal 8001)
	(up-timer-status 3 != timer-running)
	(players-building-type-count target-player castle == 0)
	(up-compare-goal gl-remote-total == 0)
=>
	(chat-local-to-self "didn't find any targets")
	(chat-local-to-self "Searching my target enemy")
	(up-send-scout group-type-land-explore scout-enemy)
	(enable-timer 3 20) 
	(set-goal gl-split-goal 0)
)
(defrule
	(strategic-number sn-military-level > 0)
	(goal gl-split-goal 8001)
	(up-compare-goal gl-remote-total > 0)
	(up-timer-status 22 != timer-running)
=>
	(up-target-objects 0 action-patrol -1 stance-defensive)
	(set-strategic-number sn-allow-direct-unit-control 1)
	(chat-local-to-self "target an undefended camp")
	(enable-timer 22 10)
	(set-goal gl-split-goal 0)
)
(defrule
	(strategic-number sn-military-level < 1)
	(strategic-number sn-allow-direct-unit-control == 1)
=>
	(set-strategic-number sn-allow-direct-unit-control 0)
)

; detect enemy near tc

(defrule
	(players-stance focus-player enemy)
	(strategic-number sn-focus-player-number > 0)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: town-center c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object gl-position-self-x)	
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 7)
	(up-find-remote c: all-units-class c: 240)
	(up-get-search-state gl-local-total)
	(set-goal gl-split-goal 8100)
)
(defrule
	(goal gl-split-goal 8100)
	(up-compare-goal gl-remote-total > 0)
=>
	(up-reset-search 1 1 1 1)
	(set-goal temporary-goal9 0)
	(up-find-local c: villager-class c: 15)
	(up-get-search-state gl-local-total)
	(set-goal gl-split-goal 8101)
)
(defrule
	(goal gl-split-goal 8101)
	(or(dropsite-min-distance live-boar > 15)
	   (dropsite-min-distance live-boar == -1))
	(up-compare-goal gl-local-total > 0)
	(up-compare-goal temporary-goal9 g:< gl-local-total)
=>
	(up-reset-search 1 1 1 1)
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number c:= my-player-number)
	(up-reset-filters)
	(up-find-remote c: town-center c: 1)
	(up-set-target-point gl-position-self-x)
	(up-filter-distance c: -1 c: 7)
	(up-find-local c: villager-class c: 1)
	(up-target-objects 0 action-garrison -1 -1)
	(set-goal gl-split-goal 8200)
)	
(defrule
	(goal gl-split-goal 8200)
=>
	(up-modify-goal temporary-goal9 c:+ 1)
	;(up-chat-data-to-self "Units detected near town center - garrison: %d" g: temporary-goal9)
	;(up-chat-data-to-self "Total found: %d" g: gl-local-last)
	(set-goal gl-split-goal 8101)
	(up-jump-rule 2)
)
(defrule
	(goal gl-split-goal 8101)
=>
	(set-goal gl-split-goal 0) ; nothing to do here
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
)
(defrule
	(goal gl-split-goal 8100)
=>
	(set-goal gl-split-goal 0) ; nothing to do here
)

; detect cloesst ally and flanks
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(game-time > 5)
	(up-players-in-game ally > 0)
	(up-compare-goal gl-closest-ally <= 0)
=>
	(up-find-player ally find-closest gl-closest-ally)
	;(up-chat-data-to-all "My closest ally is %d" g: gl-closest-ally)
)
#end-if
#load-if-defined UP-POCKET-POSITION ; Search for closest flank ally as pocket - also detects if we are super pocket.
(defrule
	(game-time > 5)
	(up-players-in-game ally >= 3) ; atleast have a pocket.
	(up-compare-goal gl-closest-ally <= 0)
=>
	(up-find-player ally find-closest gl-closest-ally)
	;(up-chat-data-to-all "My closest ally is %d" g: gl-closest-ally)
	(up-modify-goal temporary-goal g:= sn-target-player-number)
	(up-modify-sn sn-target-player-number g:= gl-closest-ally)
	(set-goal gl-split-goal 9150)
)
;(defrule
;	(true)
;=>
;	(up-chat-data-to-all "gl-closest-ally: %d" g: gl-closest-ally)
;	(up-chat-data-to-all "gl-closest-flank-to-pocket: %d" g: gl-closest-flank-to-pocket)
;	(up-chat-data-to-all "position-goal: %d" g: position-goal)
;	(up-chat-data-to-all "sn-target-player-number: %d" s: sn-target-player-number)
;)
(defrule
	(goal gl-split-goal 9150)
	(up-compare-goal gl-closest-ally > 0)
	(up-compare-goal gl-closest-flank-to-pocket < 1)
	(up-allied-goal target-player position-goal == flank)
=>
	(up-find-player ally find-closest gl-closest-flank-to-pocket)
	(up-modify-sn sn-target-player-number g:= gl-closest-flank-to-pocket)
	(set-goal gl-split-goal 9151)
)
(defrule
	(goal gl-split-goal 9150)
	(up-compare-goal gl-closest-ally > 0)
	(up-compare-goal gl-closest-flank-to-pocket <= 0)
	(up-allied-goal target-player position-goal != flank)
=>
	(up-find-player ally find-closest gl-closest-flank-to-pocket)
	(up-find-next-player ally find-closest gl-closest-flank-to-pocket)
	(up-modify-sn sn-target-player-number g:= gl-closest-flank-to-pocket)
	(set-goal gl-split-goal 9151)
)
(defrule
	(goal gl-split-goal 9151)
	(up-allied-goal target-player position-goal == pocket)
	(up-compare-goal gl-super-pocket != 1)
=>
	;(chat-to-all "!!! Super Pocket detected!")
	(set-goal gl-super-pocket 1)
	(set-goal gl-split-goal 0)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)
(defrule
	(goal gl-split-goal 9151)
	(up-allied-goal target-player position-goal == flank)
=>
	;(up-chat-data-to-all "My closest flank ally is %d" g: gl-closest-flank-to-pocket)
	(set-goal gl-split-goal 0)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)
#end-if
(defrule
	(strategic-number sn-escrow-level == tc-run-escrow)
	(building-type-count-total mining-camp > 0)
=>
	(set-strategic-number sn-wood-gatherer-percentage 90)
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
(defrule
	(strategic-number sn-escrow-level == tc-run-escrow)
	(building-type-count-total mining-camp == 0)
=>
	(set-strategic-number sn-wood-gatherer-percentage 100)
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

